
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Lawyer
 * 
 */
export type Lawyer = $Result.DefaultSelection<Prisma.$LawyerPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model AuthVerificationToken
 * 
 */
export type AuthVerificationToken = $Result.DefaultSelection<Prisma.$AuthVerificationTokenPayload>
/**
 * Model WebAuthnUser
 * 
 */
export type WebAuthnUser = $Result.DefaultSelection<Prisma.$WebAuthnUserPayload>
/**
 * Model WebAuthnCredential
 * 
 */
export type WebAuthnCredential = $Result.DefaultSelection<Prisma.$WebAuthnCredentialPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Documents
 * const documents = await prisma.document.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Documents
   * const documents = await prisma.document.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lawyer`: Exposes CRUD operations for the **Lawyer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lawyers
    * const lawyers = await prisma.lawyer.findMany()
    * ```
    */
  get lawyer(): Prisma.LawyerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.authVerificationToken`: Exposes CRUD operations for the **AuthVerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthVerificationTokens
    * const authVerificationTokens = await prisma.authVerificationToken.findMany()
    * ```
    */
  get authVerificationToken(): Prisma.AuthVerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webAuthnUser`: Exposes CRUD operations for the **WebAuthnUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebAuthnUsers
    * const webAuthnUsers = await prisma.webAuthnUser.findMany()
    * ```
    */
  get webAuthnUser(): Prisma.WebAuthnUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webAuthnCredential`: Exposes CRUD operations for the **WebAuthnCredential** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebAuthnCredentials
    * const webAuthnCredentials = await prisma.webAuthnCredential.findMany()
    * ```
    */
  get webAuthnCredential(): Prisma.WebAuthnCredentialDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Document: 'Document',
    Lawyer: 'Lawyer',
    Note: 'Note',
    AuthVerificationToken: 'AuthVerificationToken',
    WebAuthnUser: 'WebAuthnUser',
    WebAuthnCredential: 'WebAuthnCredential'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "document" | "lawyer" | "note" | "authVerificationToken" | "webAuthnUser" | "webAuthnCredential"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Lawyer: {
        payload: Prisma.$LawyerPayload<ExtArgs>
        fields: Prisma.LawyerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LawyerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LawyerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>
          }
          findFirst: {
            args: Prisma.LawyerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LawyerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>
          }
          findMany: {
            args: Prisma.LawyerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>[]
          }
          create: {
            args: Prisma.LawyerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>
          }
          createMany: {
            args: Prisma.LawyerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LawyerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>[]
          }
          delete: {
            args: Prisma.LawyerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>
          }
          update: {
            args: Prisma.LawyerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>
          }
          deleteMany: {
            args: Prisma.LawyerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LawyerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LawyerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>[]
          }
          upsert: {
            args: Prisma.LawyerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LawyerPayload>
          }
          aggregate: {
            args: Prisma.LawyerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLawyer>
          }
          groupBy: {
            args: Prisma.LawyerGroupByArgs<ExtArgs>
            result: $Utils.Optional<LawyerGroupByOutputType>[]
          }
          count: {
            args: Prisma.LawyerCountArgs<ExtArgs>
            result: $Utils.Optional<LawyerCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      AuthVerificationToken: {
        payload: Prisma.$AuthVerificationTokenPayload<ExtArgs>
        fields: Prisma.AuthVerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthVerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthVerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.AuthVerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthVerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>
          }
          findMany: {
            args: Prisma.AuthVerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>[]
          }
          create: {
            args: Prisma.AuthVerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>
          }
          createMany: {
            args: Prisma.AuthVerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthVerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.AuthVerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>
          }
          update: {
            args: Prisma.AuthVerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.AuthVerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthVerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuthVerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.AuthVerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthVerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.AuthVerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthVerificationToken>
          }
          groupBy: {
            args: Prisma.AuthVerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthVerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthVerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<AuthVerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      WebAuthnUser: {
        payload: Prisma.$WebAuthnUserPayload<ExtArgs>
        fields: Prisma.WebAuthnUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebAuthnUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebAuthnUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>
          }
          findFirst: {
            args: Prisma.WebAuthnUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebAuthnUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>
          }
          findMany: {
            args: Prisma.WebAuthnUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>[]
          }
          create: {
            args: Prisma.WebAuthnUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>
          }
          createMany: {
            args: Prisma.WebAuthnUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebAuthnUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>[]
          }
          delete: {
            args: Prisma.WebAuthnUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>
          }
          update: {
            args: Prisma.WebAuthnUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>
          }
          deleteMany: {
            args: Prisma.WebAuthnUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebAuthnUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebAuthnUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>[]
          }
          upsert: {
            args: Prisma.WebAuthnUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnUserPayload>
          }
          aggregate: {
            args: Prisma.WebAuthnUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebAuthnUser>
          }
          groupBy: {
            args: Prisma.WebAuthnUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebAuthnUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebAuthnUserCountArgs<ExtArgs>
            result: $Utils.Optional<WebAuthnUserCountAggregateOutputType> | number
          }
        }
      }
      WebAuthnCredential: {
        payload: Prisma.$WebAuthnCredentialPayload<ExtArgs>
        fields: Prisma.WebAuthnCredentialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebAuthnCredentialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebAuthnCredentialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>
          }
          findFirst: {
            args: Prisma.WebAuthnCredentialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebAuthnCredentialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>
          }
          findMany: {
            args: Prisma.WebAuthnCredentialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>[]
          }
          create: {
            args: Prisma.WebAuthnCredentialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>
          }
          createMany: {
            args: Prisma.WebAuthnCredentialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebAuthnCredentialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>[]
          }
          delete: {
            args: Prisma.WebAuthnCredentialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>
          }
          update: {
            args: Prisma.WebAuthnCredentialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>
          }
          deleteMany: {
            args: Prisma.WebAuthnCredentialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebAuthnCredentialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebAuthnCredentialUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>[]
          }
          upsert: {
            args: Prisma.WebAuthnCredentialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebAuthnCredentialPayload>
          }
          aggregate: {
            args: Prisma.WebAuthnCredentialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebAuthnCredential>
          }
          groupBy: {
            args: Prisma.WebAuthnCredentialGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebAuthnCredentialGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebAuthnCredentialCountArgs<ExtArgs>
            result: $Utils.Optional<WebAuthnCredentialCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    document?: DocumentOmit
    lawyer?: LawyerOmit
    note?: NoteOmit
    authVerificationToken?: AuthVerificationTokenOmit
    webAuthnUser?: WebAuthnUserOmit
    webAuthnCredential?: WebAuthnCredentialOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LawyerCountOutputType
   */

  export type LawyerCountOutputType = {
    documents: number
    notes: number
  }

  export type LawyerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | LawyerCountOutputTypeCountDocumentsArgs
    notes?: boolean | LawyerCountOutputTypeCountNotesArgs
  }

  // Custom InputTypes
  /**
   * LawyerCountOutputType without action
   */
  export type LawyerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LawyerCountOutputType
     */
    select?: LawyerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LawyerCountOutputType without action
   */
  export type LawyerCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * LawyerCountOutputType without action
   */
  export type LawyerCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }


  /**
   * Count Type WebAuthnUserCountOutputType
   */

  export type WebAuthnUserCountOutputType = {
    credentials: number
  }

  export type WebAuthnUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    credentials?: boolean | WebAuthnUserCountOutputTypeCountCredentialsArgs
  }

  // Custom InputTypes
  /**
   * WebAuthnUserCountOutputType without action
   */
  export type WebAuthnUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUserCountOutputType
     */
    select?: WebAuthnUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WebAuthnUserCountOutputType without action
   */
  export type WebAuthnUserCountOutputTypeCountCredentialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebAuthnCredentialWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    filename: string | null
    originalPath: string | null
    tempPath: string | null
    finalPath: string | null
    documentType: string | null
    isGenerated: boolean | null
    isCustomized: boolean | null
    isSent: boolean | null
    isPushed: boolean | null
    generatedAt: Date | null
    sentAt: Date | null
    pushedAt: Date | null
    createdAt: Date | null
    lawyerId: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    originalPath: string | null
    tempPath: string | null
    finalPath: string | null
    documentType: string | null
    isGenerated: boolean | null
    isCustomized: boolean | null
    isSent: boolean | null
    isPushed: boolean | null
    generatedAt: Date | null
    sentAt: Date | null
    pushedAt: Date | null
    createdAt: Date | null
    lawyerId: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    filename: number
    originalPath: number
    tempPath: number
    finalPath: number
    documentType: number
    isGenerated: number
    isCustomized: number
    isSent: number
    isPushed: number
    generatedAt: number
    sentAt: number
    pushedAt: number
    createdAt: number
    lawyerId: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    filename?: true
    originalPath?: true
    tempPath?: true
    finalPath?: true
    documentType?: true
    isGenerated?: true
    isCustomized?: true
    isSent?: true
    isPushed?: true
    generatedAt?: true
    sentAt?: true
    pushedAt?: true
    createdAt?: true
    lawyerId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    filename?: true
    originalPath?: true
    tempPath?: true
    finalPath?: true
    documentType?: true
    isGenerated?: true
    isCustomized?: true
    isSent?: true
    isPushed?: true
    generatedAt?: true
    sentAt?: true
    pushedAt?: true
    createdAt?: true
    lawyerId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    filename?: true
    originalPath?: true
    tempPath?: true
    finalPath?: true
    documentType?: true
    isGenerated?: true
    isCustomized?: true
    isSent?: true
    isPushed?: true
    generatedAt?: true
    sentAt?: true
    pushedAt?: true
    createdAt?: true
    lawyerId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    filename: string
    originalPath: string
    tempPath: string | null
    finalPath: string | null
    documentType: string
    isGenerated: boolean | null
    isCustomized: boolean | null
    isSent: boolean | null
    isPushed: boolean | null
    generatedAt: Date | null
    sentAt: Date | null
    pushedAt: Date | null
    createdAt: Date | null
    lawyerId: string
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalPath?: boolean
    tempPath?: boolean
    finalPath?: boolean
    documentType?: boolean
    isGenerated?: boolean
    isCustomized?: boolean
    isSent?: boolean
    isPushed?: boolean
    generatedAt?: boolean
    sentAt?: boolean
    pushedAt?: boolean
    createdAt?: boolean
    lawyerId?: boolean
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalPath?: boolean
    tempPath?: boolean
    finalPath?: boolean
    documentType?: boolean
    isGenerated?: boolean
    isCustomized?: boolean
    isSent?: boolean
    isPushed?: boolean
    generatedAt?: boolean
    sentAt?: boolean
    pushedAt?: boolean
    createdAt?: boolean
    lawyerId?: boolean
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalPath?: boolean
    tempPath?: boolean
    finalPath?: boolean
    documentType?: boolean
    isGenerated?: boolean
    isCustomized?: boolean
    isSent?: boolean
    isPushed?: boolean
    generatedAt?: boolean
    sentAt?: boolean
    pushedAt?: boolean
    createdAt?: boolean
    lawyerId?: boolean
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    filename?: boolean
    originalPath?: boolean
    tempPath?: boolean
    finalPath?: boolean
    documentType?: boolean
    isGenerated?: boolean
    isCustomized?: boolean
    isSent?: boolean
    isPushed?: boolean
    generatedAt?: boolean
    sentAt?: boolean
    pushedAt?: boolean
    createdAt?: boolean
    lawyerId?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "filename" | "originalPath" | "tempPath" | "finalPath" | "documentType" | "isGenerated" | "isCustomized" | "isSent" | "isPushed" | "generatedAt" | "sentAt" | "pushedAt" | "createdAt" | "lawyerId", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      lawyer: Prisma.$LawyerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      originalPath: string
      tempPath: string | null
      finalPath: string | null
      documentType: string
      isGenerated: boolean | null
      isCustomized: boolean | null
      isSent: boolean | null
      isPushed: boolean | null
      generatedAt: Date | null
      sentAt: Date | null
      pushedAt: Date | null
      createdAt: Date | null
      lawyerId: string
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lawyer<T extends LawyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LawyerDefaultArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly filename: FieldRef<"Document", 'String'>
    readonly originalPath: FieldRef<"Document", 'String'>
    readonly tempPath: FieldRef<"Document", 'String'>
    readonly finalPath: FieldRef<"Document", 'String'>
    readonly documentType: FieldRef<"Document", 'String'>
    readonly isGenerated: FieldRef<"Document", 'Boolean'>
    readonly isCustomized: FieldRef<"Document", 'Boolean'>
    readonly isSent: FieldRef<"Document", 'Boolean'>
    readonly isPushed: FieldRef<"Document", 'Boolean'>
    readonly generatedAt: FieldRef<"Document", 'DateTime'>
    readonly sentAt: FieldRef<"Document", 'DateTime'>
    readonly pushedAt: FieldRef<"Document", 'DateTime'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly lawyerId: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Lawyer
   */

  export type AggregateLawyer = {
    _count: LawyerCountAggregateOutputType | null
    _avg: LawyerAvgAggregateOutputType | null
    _sum: LawyerSumAggregateOutputType | null
    _min: LawyerMinAggregateOutputType | null
    _max: LawyerMaxAggregateOutputType | null
  }

  export type LawyerAvgAggregateOutputType = {
    position: number | null
  }

  export type LawyerSumAggregateOutputType = {
    position: number | null
  }

  export type LawyerMinAggregateOutputType = {
    id: string | null
    pin: string | null
    lawFirm: string | null
    contactName: string | null
    phone: string | null
    email: string | null
    status: string | null
    readyToGenerateDocuments: boolean | null
    readyToGenerateDocumentsSealed: boolean | null
    sendEmail: boolean | null
    sendEmailSealed: boolean | null
    pushToCentralRepository: boolean | null
    pushToCentralRepositorySealed: boolean | null
    readyToSend: boolean | null
    pinAddedToTOB: boolean | null
    customizedTOBPath: string | null
    pinHyperlink: string | null
    documentsSent: boolean | null
    emailSentAt: Date | null
    pushedToRepository: boolean | null
    repositoryPath: string | null
    completedAt: Date | null
    followUpDueDate: Date | null
    followUpStatus: string | null
    stackGroup: string | null
    position: number | null
    isActive: boolean | null
    isEditable: boolean | null
    isDraggable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastModified: Date | null
    createdBy: string | null
    customEmailSubject: string | null
    customEmailContent: string | null
    cardCollapsed: boolean | null
  }

  export type LawyerMaxAggregateOutputType = {
    id: string | null
    pin: string | null
    lawFirm: string | null
    contactName: string | null
    phone: string | null
    email: string | null
    status: string | null
    readyToGenerateDocuments: boolean | null
    readyToGenerateDocumentsSealed: boolean | null
    sendEmail: boolean | null
    sendEmailSealed: boolean | null
    pushToCentralRepository: boolean | null
    pushToCentralRepositorySealed: boolean | null
    readyToSend: boolean | null
    pinAddedToTOB: boolean | null
    customizedTOBPath: string | null
    pinHyperlink: string | null
    documentsSent: boolean | null
    emailSentAt: Date | null
    pushedToRepository: boolean | null
    repositoryPath: string | null
    completedAt: Date | null
    followUpDueDate: Date | null
    followUpStatus: string | null
    stackGroup: string | null
    position: number | null
    isActive: boolean | null
    isEditable: boolean | null
    isDraggable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastModified: Date | null
    createdBy: string | null
    customEmailSubject: string | null
    customEmailContent: string | null
    cardCollapsed: boolean | null
  }

  export type LawyerCountAggregateOutputType = {
    id: number
    pin: number
    lawFirm: number
    contactName: number
    phone: number
    email: number
    status: number
    readyToGenerateDocuments: number
    readyToGenerateDocumentsSealed: number
    sendEmail: number
    sendEmailSealed: number
    pushToCentralRepository: number
    pushToCentralRepositorySealed: number
    readyToSend: number
    pinAddedToTOB: number
    customizedTOBPath: number
    pinHyperlink: number
    documentsSent: number
    emailSentAt: number
    pushedToRepository: number
    repositoryPath: number
    completedAt: number
    followUpDueDate: number
    followUpStatus: number
    stackGroup: number
    position: number
    isActive: number
    isEditable: number
    isDraggable: number
    createdAt: number
    updatedAt: number
    lastModified: number
    createdBy: number
    customEmailSubject: number
    customEmailContent: number
    cardCollapsed: number
    _all: number
  }


  export type LawyerAvgAggregateInputType = {
    position?: true
  }

  export type LawyerSumAggregateInputType = {
    position?: true
  }

  export type LawyerMinAggregateInputType = {
    id?: true
    pin?: true
    lawFirm?: true
    contactName?: true
    phone?: true
    email?: true
    status?: true
    readyToGenerateDocuments?: true
    readyToGenerateDocumentsSealed?: true
    sendEmail?: true
    sendEmailSealed?: true
    pushToCentralRepository?: true
    pushToCentralRepositorySealed?: true
    readyToSend?: true
    pinAddedToTOB?: true
    customizedTOBPath?: true
    pinHyperlink?: true
    documentsSent?: true
    emailSentAt?: true
    pushedToRepository?: true
    repositoryPath?: true
    completedAt?: true
    followUpDueDate?: true
    followUpStatus?: true
    stackGroup?: true
    position?: true
    isActive?: true
    isEditable?: true
    isDraggable?: true
    createdAt?: true
    updatedAt?: true
    lastModified?: true
    createdBy?: true
    customEmailSubject?: true
    customEmailContent?: true
    cardCollapsed?: true
  }

  export type LawyerMaxAggregateInputType = {
    id?: true
    pin?: true
    lawFirm?: true
    contactName?: true
    phone?: true
    email?: true
    status?: true
    readyToGenerateDocuments?: true
    readyToGenerateDocumentsSealed?: true
    sendEmail?: true
    sendEmailSealed?: true
    pushToCentralRepository?: true
    pushToCentralRepositorySealed?: true
    readyToSend?: true
    pinAddedToTOB?: true
    customizedTOBPath?: true
    pinHyperlink?: true
    documentsSent?: true
    emailSentAt?: true
    pushedToRepository?: true
    repositoryPath?: true
    completedAt?: true
    followUpDueDate?: true
    followUpStatus?: true
    stackGroup?: true
    position?: true
    isActive?: true
    isEditable?: true
    isDraggable?: true
    createdAt?: true
    updatedAt?: true
    lastModified?: true
    createdBy?: true
    customEmailSubject?: true
    customEmailContent?: true
    cardCollapsed?: true
  }

  export type LawyerCountAggregateInputType = {
    id?: true
    pin?: true
    lawFirm?: true
    contactName?: true
    phone?: true
    email?: true
    status?: true
    readyToGenerateDocuments?: true
    readyToGenerateDocumentsSealed?: true
    sendEmail?: true
    sendEmailSealed?: true
    pushToCentralRepository?: true
    pushToCentralRepositorySealed?: true
    readyToSend?: true
    pinAddedToTOB?: true
    customizedTOBPath?: true
    pinHyperlink?: true
    documentsSent?: true
    emailSentAt?: true
    pushedToRepository?: true
    repositoryPath?: true
    completedAt?: true
    followUpDueDate?: true
    followUpStatus?: true
    stackGroup?: true
    position?: true
    isActive?: true
    isEditable?: true
    isDraggable?: true
    createdAt?: true
    updatedAt?: true
    lastModified?: true
    createdBy?: true
    customEmailSubject?: true
    customEmailContent?: true
    cardCollapsed?: true
    _all?: true
  }

  export type LawyerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lawyer to aggregate.
     */
    where?: LawyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lawyers to fetch.
     */
    orderBy?: LawyerOrderByWithRelationInput | LawyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LawyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lawyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lawyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lawyers
    **/
    _count?: true | LawyerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LawyerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LawyerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LawyerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LawyerMaxAggregateInputType
  }

  export type GetLawyerAggregateType<T extends LawyerAggregateArgs> = {
        [P in keyof T & keyof AggregateLawyer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLawyer[P]>
      : GetScalarType<T[P], AggregateLawyer[P]>
  }




  export type LawyerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LawyerWhereInput
    orderBy?: LawyerOrderByWithAggregationInput | LawyerOrderByWithAggregationInput[]
    by: LawyerScalarFieldEnum[] | LawyerScalarFieldEnum
    having?: LawyerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LawyerCountAggregateInputType | true
    _avg?: LawyerAvgAggregateInputType
    _sum?: LawyerSumAggregateInputType
    _min?: LawyerMinAggregateInputType
    _max?: LawyerMaxAggregateInputType
  }

  export type LawyerGroupByOutputType = {
    id: string
    pin: string
    lawFirm: string
    contactName: string
    phone: string
    email: string
    status: string | null
    readyToGenerateDocuments: boolean | null
    readyToGenerateDocumentsSealed: boolean | null
    sendEmail: boolean | null
    sendEmailSealed: boolean | null
    pushToCentralRepository: boolean | null
    pushToCentralRepositorySealed: boolean | null
    readyToSend: boolean | null
    pinAddedToTOB: boolean | null
    customizedTOBPath: string | null
    pinHyperlink: string | null
    documentsSent: boolean | null
    emailSentAt: Date | null
    pushedToRepository: boolean | null
    repositoryPath: string | null
    completedAt: Date | null
    followUpDueDate: Date | null
    followUpStatus: string | null
    stackGroup: string | null
    position: number | null
    isActive: boolean | null
    isEditable: boolean | null
    isDraggable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastModified: Date | null
    createdBy: string | null
    customEmailSubject: string | null
    customEmailContent: string | null
    cardCollapsed: boolean | null
    _count: LawyerCountAggregateOutputType | null
    _avg: LawyerAvgAggregateOutputType | null
    _sum: LawyerSumAggregateOutputType | null
    _min: LawyerMinAggregateOutputType | null
    _max: LawyerMaxAggregateOutputType | null
  }

  type GetLawyerGroupByPayload<T extends LawyerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LawyerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LawyerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LawyerGroupByOutputType[P]>
            : GetScalarType<T[P], LawyerGroupByOutputType[P]>
        }
      >
    >


  export type LawyerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pin?: boolean
    lawFirm?: boolean
    contactName?: boolean
    phone?: boolean
    email?: boolean
    status?: boolean
    readyToGenerateDocuments?: boolean
    readyToGenerateDocumentsSealed?: boolean
    sendEmail?: boolean
    sendEmailSealed?: boolean
    pushToCentralRepository?: boolean
    pushToCentralRepositorySealed?: boolean
    readyToSend?: boolean
    pinAddedToTOB?: boolean
    customizedTOBPath?: boolean
    pinHyperlink?: boolean
    documentsSent?: boolean
    emailSentAt?: boolean
    pushedToRepository?: boolean
    repositoryPath?: boolean
    completedAt?: boolean
    followUpDueDate?: boolean
    followUpStatus?: boolean
    stackGroup?: boolean
    position?: boolean
    isActive?: boolean
    isEditable?: boolean
    isDraggable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastModified?: boolean
    createdBy?: boolean
    customEmailSubject?: boolean
    customEmailContent?: boolean
    cardCollapsed?: boolean
    documents?: boolean | Lawyer$documentsArgs<ExtArgs>
    notes?: boolean | Lawyer$notesArgs<ExtArgs>
    _count?: boolean | LawyerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lawyer"]>

  export type LawyerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pin?: boolean
    lawFirm?: boolean
    contactName?: boolean
    phone?: boolean
    email?: boolean
    status?: boolean
    readyToGenerateDocuments?: boolean
    readyToGenerateDocumentsSealed?: boolean
    sendEmail?: boolean
    sendEmailSealed?: boolean
    pushToCentralRepository?: boolean
    pushToCentralRepositorySealed?: boolean
    readyToSend?: boolean
    pinAddedToTOB?: boolean
    customizedTOBPath?: boolean
    pinHyperlink?: boolean
    documentsSent?: boolean
    emailSentAt?: boolean
    pushedToRepository?: boolean
    repositoryPath?: boolean
    completedAt?: boolean
    followUpDueDate?: boolean
    followUpStatus?: boolean
    stackGroup?: boolean
    position?: boolean
    isActive?: boolean
    isEditable?: boolean
    isDraggable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastModified?: boolean
    createdBy?: boolean
    customEmailSubject?: boolean
    customEmailContent?: boolean
    cardCollapsed?: boolean
  }, ExtArgs["result"]["lawyer"]>

  export type LawyerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pin?: boolean
    lawFirm?: boolean
    contactName?: boolean
    phone?: boolean
    email?: boolean
    status?: boolean
    readyToGenerateDocuments?: boolean
    readyToGenerateDocumentsSealed?: boolean
    sendEmail?: boolean
    sendEmailSealed?: boolean
    pushToCentralRepository?: boolean
    pushToCentralRepositorySealed?: boolean
    readyToSend?: boolean
    pinAddedToTOB?: boolean
    customizedTOBPath?: boolean
    pinHyperlink?: boolean
    documentsSent?: boolean
    emailSentAt?: boolean
    pushedToRepository?: boolean
    repositoryPath?: boolean
    completedAt?: boolean
    followUpDueDate?: boolean
    followUpStatus?: boolean
    stackGroup?: boolean
    position?: boolean
    isActive?: boolean
    isEditable?: boolean
    isDraggable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastModified?: boolean
    createdBy?: boolean
    customEmailSubject?: boolean
    customEmailContent?: boolean
    cardCollapsed?: boolean
  }, ExtArgs["result"]["lawyer"]>

  export type LawyerSelectScalar = {
    id?: boolean
    pin?: boolean
    lawFirm?: boolean
    contactName?: boolean
    phone?: boolean
    email?: boolean
    status?: boolean
    readyToGenerateDocuments?: boolean
    readyToGenerateDocumentsSealed?: boolean
    sendEmail?: boolean
    sendEmailSealed?: boolean
    pushToCentralRepository?: boolean
    pushToCentralRepositorySealed?: boolean
    readyToSend?: boolean
    pinAddedToTOB?: boolean
    customizedTOBPath?: boolean
    pinHyperlink?: boolean
    documentsSent?: boolean
    emailSentAt?: boolean
    pushedToRepository?: boolean
    repositoryPath?: boolean
    completedAt?: boolean
    followUpDueDate?: boolean
    followUpStatus?: boolean
    stackGroup?: boolean
    position?: boolean
    isActive?: boolean
    isEditable?: boolean
    isDraggable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastModified?: boolean
    createdBy?: boolean
    customEmailSubject?: boolean
    customEmailContent?: boolean
    cardCollapsed?: boolean
  }

  export type LawyerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pin" | "lawFirm" | "contactName" | "phone" | "email" | "status" | "readyToGenerateDocuments" | "readyToGenerateDocumentsSealed" | "sendEmail" | "sendEmailSealed" | "pushToCentralRepository" | "pushToCentralRepositorySealed" | "readyToSend" | "pinAddedToTOB" | "customizedTOBPath" | "pinHyperlink" | "documentsSent" | "emailSentAt" | "pushedToRepository" | "repositoryPath" | "completedAt" | "followUpDueDate" | "followUpStatus" | "stackGroup" | "position" | "isActive" | "isEditable" | "isDraggable" | "createdAt" | "updatedAt" | "lastModified" | "createdBy" | "customEmailSubject" | "customEmailContent" | "cardCollapsed", ExtArgs["result"]["lawyer"]>
  export type LawyerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | Lawyer$documentsArgs<ExtArgs>
    notes?: boolean | Lawyer$notesArgs<ExtArgs>
    _count?: boolean | LawyerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LawyerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LawyerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LawyerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lawyer"
    objects: {
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pin: string
      lawFirm: string
      contactName: string
      phone: string
      email: string
      status: string | null
      readyToGenerateDocuments: boolean | null
      readyToGenerateDocumentsSealed: boolean | null
      sendEmail: boolean | null
      sendEmailSealed: boolean | null
      pushToCentralRepository: boolean | null
      pushToCentralRepositorySealed: boolean | null
      readyToSend: boolean | null
      pinAddedToTOB: boolean | null
      customizedTOBPath: string | null
      pinHyperlink: string | null
      documentsSent: boolean | null
      emailSentAt: Date | null
      pushedToRepository: boolean | null
      repositoryPath: string | null
      completedAt: Date | null
      followUpDueDate: Date | null
      followUpStatus: string | null
      stackGroup: string | null
      position: number | null
      isActive: boolean | null
      isEditable: boolean | null
      isDraggable: boolean | null
      createdAt: Date | null
      updatedAt: Date | null
      lastModified: Date | null
      createdBy: string | null
      customEmailSubject: string | null
      customEmailContent: string | null
      cardCollapsed: boolean | null
    }, ExtArgs["result"]["lawyer"]>
    composites: {}
  }

  type LawyerGetPayload<S extends boolean | null | undefined | LawyerDefaultArgs> = $Result.GetResult<Prisma.$LawyerPayload, S>

  type LawyerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LawyerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LawyerCountAggregateInputType | true
    }

  export interface LawyerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lawyer'], meta: { name: 'Lawyer' } }
    /**
     * Find zero or one Lawyer that matches the filter.
     * @param {LawyerFindUniqueArgs} args - Arguments to find a Lawyer
     * @example
     * // Get one Lawyer
     * const lawyer = await prisma.lawyer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LawyerFindUniqueArgs>(args: SelectSubset<T, LawyerFindUniqueArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lawyer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LawyerFindUniqueOrThrowArgs} args - Arguments to find a Lawyer
     * @example
     * // Get one Lawyer
     * const lawyer = await prisma.lawyer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LawyerFindUniqueOrThrowArgs>(args: SelectSubset<T, LawyerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lawyer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LawyerFindFirstArgs} args - Arguments to find a Lawyer
     * @example
     * // Get one Lawyer
     * const lawyer = await prisma.lawyer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LawyerFindFirstArgs>(args?: SelectSubset<T, LawyerFindFirstArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lawyer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LawyerFindFirstOrThrowArgs} args - Arguments to find a Lawyer
     * @example
     * // Get one Lawyer
     * const lawyer = await prisma.lawyer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LawyerFindFirstOrThrowArgs>(args?: SelectSubset<T, LawyerFindFirstOrThrowArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lawyers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LawyerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lawyers
     * const lawyers = await prisma.lawyer.findMany()
     * 
     * // Get first 10 Lawyers
     * const lawyers = await prisma.lawyer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lawyerWithIdOnly = await prisma.lawyer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LawyerFindManyArgs>(args?: SelectSubset<T, LawyerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lawyer.
     * @param {LawyerCreateArgs} args - Arguments to create a Lawyer.
     * @example
     * // Create one Lawyer
     * const Lawyer = await prisma.lawyer.create({
     *   data: {
     *     // ... data to create a Lawyer
     *   }
     * })
     * 
     */
    create<T extends LawyerCreateArgs>(args: SelectSubset<T, LawyerCreateArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lawyers.
     * @param {LawyerCreateManyArgs} args - Arguments to create many Lawyers.
     * @example
     * // Create many Lawyers
     * const lawyer = await prisma.lawyer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LawyerCreateManyArgs>(args?: SelectSubset<T, LawyerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lawyers and returns the data saved in the database.
     * @param {LawyerCreateManyAndReturnArgs} args - Arguments to create many Lawyers.
     * @example
     * // Create many Lawyers
     * const lawyer = await prisma.lawyer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lawyers and only return the `id`
     * const lawyerWithIdOnly = await prisma.lawyer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LawyerCreateManyAndReturnArgs>(args?: SelectSubset<T, LawyerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lawyer.
     * @param {LawyerDeleteArgs} args - Arguments to delete one Lawyer.
     * @example
     * // Delete one Lawyer
     * const Lawyer = await prisma.lawyer.delete({
     *   where: {
     *     // ... filter to delete one Lawyer
     *   }
     * })
     * 
     */
    delete<T extends LawyerDeleteArgs>(args: SelectSubset<T, LawyerDeleteArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lawyer.
     * @param {LawyerUpdateArgs} args - Arguments to update one Lawyer.
     * @example
     * // Update one Lawyer
     * const lawyer = await prisma.lawyer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LawyerUpdateArgs>(args: SelectSubset<T, LawyerUpdateArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lawyers.
     * @param {LawyerDeleteManyArgs} args - Arguments to filter Lawyers to delete.
     * @example
     * // Delete a few Lawyers
     * const { count } = await prisma.lawyer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LawyerDeleteManyArgs>(args?: SelectSubset<T, LawyerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lawyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LawyerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lawyers
     * const lawyer = await prisma.lawyer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LawyerUpdateManyArgs>(args: SelectSubset<T, LawyerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lawyers and returns the data updated in the database.
     * @param {LawyerUpdateManyAndReturnArgs} args - Arguments to update many Lawyers.
     * @example
     * // Update many Lawyers
     * const lawyer = await prisma.lawyer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lawyers and only return the `id`
     * const lawyerWithIdOnly = await prisma.lawyer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LawyerUpdateManyAndReturnArgs>(args: SelectSubset<T, LawyerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lawyer.
     * @param {LawyerUpsertArgs} args - Arguments to update or create a Lawyer.
     * @example
     * // Update or create a Lawyer
     * const lawyer = await prisma.lawyer.upsert({
     *   create: {
     *     // ... data to create a Lawyer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lawyer we want to update
     *   }
     * })
     */
    upsert<T extends LawyerUpsertArgs>(args: SelectSubset<T, LawyerUpsertArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lawyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LawyerCountArgs} args - Arguments to filter Lawyers to count.
     * @example
     * // Count the number of Lawyers
     * const count = await prisma.lawyer.count({
     *   where: {
     *     // ... the filter for the Lawyers we want to count
     *   }
     * })
    **/
    count<T extends LawyerCountArgs>(
      args?: Subset<T, LawyerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LawyerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lawyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LawyerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LawyerAggregateArgs>(args: Subset<T, LawyerAggregateArgs>): Prisma.PrismaPromise<GetLawyerAggregateType<T>>

    /**
     * Group by Lawyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LawyerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LawyerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LawyerGroupByArgs['orderBy'] }
        : { orderBy?: LawyerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LawyerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLawyerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lawyer model
   */
  readonly fields: LawyerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lawyer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LawyerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends Lawyer$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Lawyer$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notes<T extends Lawyer$notesArgs<ExtArgs> = {}>(args?: Subset<T, Lawyer$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lawyer model
   */
  interface LawyerFieldRefs {
    readonly id: FieldRef<"Lawyer", 'String'>
    readonly pin: FieldRef<"Lawyer", 'String'>
    readonly lawFirm: FieldRef<"Lawyer", 'String'>
    readonly contactName: FieldRef<"Lawyer", 'String'>
    readonly phone: FieldRef<"Lawyer", 'String'>
    readonly email: FieldRef<"Lawyer", 'String'>
    readonly status: FieldRef<"Lawyer", 'String'>
    readonly readyToGenerateDocuments: FieldRef<"Lawyer", 'Boolean'>
    readonly readyToGenerateDocumentsSealed: FieldRef<"Lawyer", 'Boolean'>
    readonly sendEmail: FieldRef<"Lawyer", 'Boolean'>
    readonly sendEmailSealed: FieldRef<"Lawyer", 'Boolean'>
    readonly pushToCentralRepository: FieldRef<"Lawyer", 'Boolean'>
    readonly pushToCentralRepositorySealed: FieldRef<"Lawyer", 'Boolean'>
    readonly readyToSend: FieldRef<"Lawyer", 'Boolean'>
    readonly pinAddedToTOB: FieldRef<"Lawyer", 'Boolean'>
    readonly customizedTOBPath: FieldRef<"Lawyer", 'String'>
    readonly pinHyperlink: FieldRef<"Lawyer", 'String'>
    readonly documentsSent: FieldRef<"Lawyer", 'Boolean'>
    readonly emailSentAt: FieldRef<"Lawyer", 'DateTime'>
    readonly pushedToRepository: FieldRef<"Lawyer", 'Boolean'>
    readonly repositoryPath: FieldRef<"Lawyer", 'String'>
    readonly completedAt: FieldRef<"Lawyer", 'DateTime'>
    readonly followUpDueDate: FieldRef<"Lawyer", 'DateTime'>
    readonly followUpStatus: FieldRef<"Lawyer", 'String'>
    readonly stackGroup: FieldRef<"Lawyer", 'String'>
    readonly position: FieldRef<"Lawyer", 'Int'>
    readonly isActive: FieldRef<"Lawyer", 'Boolean'>
    readonly isEditable: FieldRef<"Lawyer", 'Boolean'>
    readonly isDraggable: FieldRef<"Lawyer", 'Boolean'>
    readonly createdAt: FieldRef<"Lawyer", 'DateTime'>
    readonly updatedAt: FieldRef<"Lawyer", 'DateTime'>
    readonly lastModified: FieldRef<"Lawyer", 'DateTime'>
    readonly createdBy: FieldRef<"Lawyer", 'String'>
    readonly customEmailSubject: FieldRef<"Lawyer", 'String'>
    readonly customEmailContent: FieldRef<"Lawyer", 'String'>
    readonly cardCollapsed: FieldRef<"Lawyer", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Lawyer findUnique
   */
  export type LawyerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * Filter, which Lawyer to fetch.
     */
    where: LawyerWhereUniqueInput
  }

  /**
   * Lawyer findUniqueOrThrow
   */
  export type LawyerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * Filter, which Lawyer to fetch.
     */
    where: LawyerWhereUniqueInput
  }

  /**
   * Lawyer findFirst
   */
  export type LawyerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * Filter, which Lawyer to fetch.
     */
    where?: LawyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lawyers to fetch.
     */
    orderBy?: LawyerOrderByWithRelationInput | LawyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lawyers.
     */
    cursor?: LawyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lawyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lawyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lawyers.
     */
    distinct?: LawyerScalarFieldEnum | LawyerScalarFieldEnum[]
  }

  /**
   * Lawyer findFirstOrThrow
   */
  export type LawyerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * Filter, which Lawyer to fetch.
     */
    where?: LawyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lawyers to fetch.
     */
    orderBy?: LawyerOrderByWithRelationInput | LawyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lawyers.
     */
    cursor?: LawyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lawyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lawyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lawyers.
     */
    distinct?: LawyerScalarFieldEnum | LawyerScalarFieldEnum[]
  }

  /**
   * Lawyer findMany
   */
  export type LawyerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * Filter, which Lawyers to fetch.
     */
    where?: LawyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lawyers to fetch.
     */
    orderBy?: LawyerOrderByWithRelationInput | LawyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lawyers.
     */
    cursor?: LawyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lawyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lawyers.
     */
    skip?: number
    distinct?: LawyerScalarFieldEnum | LawyerScalarFieldEnum[]
  }

  /**
   * Lawyer create
   */
  export type LawyerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * The data needed to create a Lawyer.
     */
    data: XOR<LawyerCreateInput, LawyerUncheckedCreateInput>
  }

  /**
   * Lawyer createMany
   */
  export type LawyerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lawyers.
     */
    data: LawyerCreateManyInput | LawyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lawyer createManyAndReturn
   */
  export type LawyerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * The data used to create many Lawyers.
     */
    data: LawyerCreateManyInput | LawyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lawyer update
   */
  export type LawyerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * The data needed to update a Lawyer.
     */
    data: XOR<LawyerUpdateInput, LawyerUncheckedUpdateInput>
    /**
     * Choose, which Lawyer to update.
     */
    where: LawyerWhereUniqueInput
  }

  /**
   * Lawyer updateMany
   */
  export type LawyerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lawyers.
     */
    data: XOR<LawyerUpdateManyMutationInput, LawyerUncheckedUpdateManyInput>
    /**
     * Filter which Lawyers to update
     */
    where?: LawyerWhereInput
    /**
     * Limit how many Lawyers to update.
     */
    limit?: number
  }

  /**
   * Lawyer updateManyAndReturn
   */
  export type LawyerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * The data used to update Lawyers.
     */
    data: XOR<LawyerUpdateManyMutationInput, LawyerUncheckedUpdateManyInput>
    /**
     * Filter which Lawyers to update
     */
    where?: LawyerWhereInput
    /**
     * Limit how many Lawyers to update.
     */
    limit?: number
  }

  /**
   * Lawyer upsert
   */
  export type LawyerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * The filter to search for the Lawyer to update in case it exists.
     */
    where: LawyerWhereUniqueInput
    /**
     * In case the Lawyer found by the `where` argument doesn't exist, create a new Lawyer with this data.
     */
    create: XOR<LawyerCreateInput, LawyerUncheckedCreateInput>
    /**
     * In case the Lawyer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LawyerUpdateInput, LawyerUncheckedUpdateInput>
  }

  /**
   * Lawyer delete
   */
  export type LawyerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
    /**
     * Filter which Lawyer to delete.
     */
    where: LawyerWhereUniqueInput
  }

  /**
   * Lawyer deleteMany
   */
  export type LawyerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lawyers to delete
     */
    where?: LawyerWhereInput
    /**
     * Limit how many Lawyers to delete.
     */
    limit?: number
  }

  /**
   * Lawyer.documents
   */
  export type Lawyer$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Lawyer.notes
   */
  export type Lawyer$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Lawyer without action
   */
  export type LawyerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lawyer
     */
    select?: LawyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lawyer
     */
    omit?: LawyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LawyerInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    text: string | null
    createdAt: Date | null
    editedAt: Date | null
    lawyerId: string | null
    author: string | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    text: string | null
    createdAt: Date | null
    editedAt: Date | null
    lawyerId: string | null
    author: string | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    text: number
    createdAt: number
    editedAt: number
    lawyerId: number
    author: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    editedAt?: true
    lawyerId?: true
    author?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    editedAt?: true
    lawyerId?: true
    author?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    editedAt?: true
    lawyerId?: true
    author?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    text: string
    createdAt: Date | null
    editedAt: Date | null
    lawyerId: string
    author: string | null
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    editedAt?: boolean
    lawyerId?: boolean
    author?: boolean
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    editedAt?: boolean
    lawyerId?: boolean
    author?: boolean
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    editedAt?: boolean
    lawyerId?: boolean
    author?: boolean
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    text?: boolean
    createdAt?: boolean
    editedAt?: boolean
    lawyerId?: boolean
    author?: boolean
  }

  export type NoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "createdAt" | "editedAt" | "lawyerId" | "author", ExtArgs["result"]["note"]>
  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }
  export type NoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lawyer?: boolean | LawyerDefaultArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      lawyer: Prisma.$LawyerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      createdAt: Date | null
      editedAt: Date | null
      lawyerId: string
      author: string | null
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes and returns the data updated in the database.
     * @param {NoteUpdateManyAndReturnArgs} args - Arguments to update many Notes.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NoteUpdateManyAndReturnArgs>(args: SelectSubset<T, NoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lawyer<T extends LawyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LawyerDefaultArgs<ExtArgs>>): Prisma__LawyerClient<$Result.GetResult<Prisma.$LawyerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly text: FieldRef<"Note", 'String'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
    readonly editedAt: FieldRef<"Note", 'DateTime'>
    readonly lawyerId: FieldRef<"Note", 'String'>
    readonly author: FieldRef<"Note", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
  }

  /**
   * Note updateManyAndReturn
   */
  export type NoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to delete.
     */
    limit?: number
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model AuthVerificationToken
   */

  export type AggregateAuthVerificationToken = {
    _count: AuthVerificationTokenCountAggregateOutputType | null
    _min: AuthVerificationTokenMinAggregateOutputType | null
    _max: AuthVerificationTokenMaxAggregateOutputType | null
  }

  export type AuthVerificationTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    pin: string | null
    method: string | null
    token: string | null
    used: boolean | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type AuthVerificationTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    pin: string | null
    method: string | null
    token: string | null
    used: boolean | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type AuthVerificationTokenCountAggregateOutputType = {
    id: number
    email: number
    pin: number
    method: number
    token: number
    used: number
    createdAt: number
    expiresAt: number
    _all: number
  }


  export type AuthVerificationTokenMinAggregateInputType = {
    id?: true
    email?: true
    pin?: true
    method?: true
    token?: true
    used?: true
    createdAt?: true
    expiresAt?: true
  }

  export type AuthVerificationTokenMaxAggregateInputType = {
    id?: true
    email?: true
    pin?: true
    method?: true
    token?: true
    used?: true
    createdAt?: true
    expiresAt?: true
  }

  export type AuthVerificationTokenCountAggregateInputType = {
    id?: true
    email?: true
    pin?: true
    method?: true
    token?: true
    used?: true
    createdAt?: true
    expiresAt?: true
    _all?: true
  }

  export type AuthVerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthVerificationToken to aggregate.
     */
    where?: AuthVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthVerificationTokens to fetch.
     */
    orderBy?: AuthVerificationTokenOrderByWithRelationInput | AuthVerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthVerificationTokens
    **/
    _count?: true | AuthVerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthVerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthVerificationTokenMaxAggregateInputType
  }

  export type GetAuthVerificationTokenAggregateType<T extends AuthVerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthVerificationToken[P]>
      : GetScalarType<T[P], AggregateAuthVerificationToken[P]>
  }




  export type AuthVerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthVerificationTokenWhereInput
    orderBy?: AuthVerificationTokenOrderByWithAggregationInput | AuthVerificationTokenOrderByWithAggregationInput[]
    by: AuthVerificationTokenScalarFieldEnum[] | AuthVerificationTokenScalarFieldEnum
    having?: AuthVerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthVerificationTokenCountAggregateInputType | true
    _min?: AuthVerificationTokenMinAggregateInputType
    _max?: AuthVerificationTokenMaxAggregateInputType
  }

  export type AuthVerificationTokenGroupByOutputType = {
    id: string
    email: string
    pin: string
    method: string
    token: string
    used: boolean
    createdAt: Date
    expiresAt: Date
    _count: AuthVerificationTokenCountAggregateOutputType | null
    _min: AuthVerificationTokenMinAggregateOutputType | null
    _max: AuthVerificationTokenMaxAggregateOutputType | null
  }

  type GetAuthVerificationTokenGroupByPayload<T extends AuthVerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthVerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthVerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthVerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], AuthVerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type AuthVerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    pin?: boolean
    method?: boolean
    token?: boolean
    used?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["authVerificationToken"]>

  export type AuthVerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    pin?: boolean
    method?: boolean
    token?: boolean
    used?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["authVerificationToken"]>

  export type AuthVerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    pin?: boolean
    method?: boolean
    token?: boolean
    used?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["authVerificationToken"]>

  export type AuthVerificationTokenSelectScalar = {
    id?: boolean
    email?: boolean
    pin?: boolean
    method?: boolean
    token?: boolean
    used?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }

  export type AuthVerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "pin" | "method" | "token" | "used" | "createdAt" | "expiresAt", ExtArgs["result"]["authVerificationToken"]>

  export type $AuthVerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuthVerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      pin: string
      method: string
      token: string
      used: boolean
      createdAt: Date
      expiresAt: Date
    }, ExtArgs["result"]["authVerificationToken"]>
    composites: {}
  }

  type AuthVerificationTokenGetPayload<S extends boolean | null | undefined | AuthVerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$AuthVerificationTokenPayload, S>

  type AuthVerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthVerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthVerificationTokenCountAggregateInputType | true
    }

  export interface AuthVerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthVerificationToken'], meta: { name: 'AuthVerificationToken' } }
    /**
     * Find zero or one AuthVerificationToken that matches the filter.
     * @param {AuthVerificationTokenFindUniqueArgs} args - Arguments to find a AuthVerificationToken
     * @example
     * // Get one AuthVerificationToken
     * const authVerificationToken = await prisma.authVerificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthVerificationTokenFindUniqueArgs>(args: SelectSubset<T, AuthVerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__AuthVerificationTokenClient<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuthVerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthVerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a AuthVerificationToken
     * @example
     * // Get one AuthVerificationToken
     * const authVerificationToken = await prisma.authVerificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthVerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthVerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthVerificationTokenClient<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthVerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthVerificationTokenFindFirstArgs} args - Arguments to find a AuthVerificationToken
     * @example
     * // Get one AuthVerificationToken
     * const authVerificationToken = await prisma.authVerificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthVerificationTokenFindFirstArgs>(args?: SelectSubset<T, AuthVerificationTokenFindFirstArgs<ExtArgs>>): Prisma__AuthVerificationTokenClient<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthVerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthVerificationTokenFindFirstOrThrowArgs} args - Arguments to find a AuthVerificationToken
     * @example
     * // Get one AuthVerificationToken
     * const authVerificationToken = await prisma.authVerificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthVerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthVerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthVerificationTokenClient<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuthVerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthVerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthVerificationTokens
     * const authVerificationTokens = await prisma.authVerificationToken.findMany()
     * 
     * // Get first 10 AuthVerificationTokens
     * const authVerificationTokens = await prisma.authVerificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authVerificationTokenWithIdOnly = await prisma.authVerificationToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthVerificationTokenFindManyArgs>(args?: SelectSubset<T, AuthVerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuthVerificationToken.
     * @param {AuthVerificationTokenCreateArgs} args - Arguments to create a AuthVerificationToken.
     * @example
     * // Create one AuthVerificationToken
     * const AuthVerificationToken = await prisma.authVerificationToken.create({
     *   data: {
     *     // ... data to create a AuthVerificationToken
     *   }
     * })
     * 
     */
    create<T extends AuthVerificationTokenCreateArgs>(args: SelectSubset<T, AuthVerificationTokenCreateArgs<ExtArgs>>): Prisma__AuthVerificationTokenClient<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuthVerificationTokens.
     * @param {AuthVerificationTokenCreateManyArgs} args - Arguments to create many AuthVerificationTokens.
     * @example
     * // Create many AuthVerificationTokens
     * const authVerificationToken = await prisma.authVerificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthVerificationTokenCreateManyArgs>(args?: SelectSubset<T, AuthVerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuthVerificationTokens and returns the data saved in the database.
     * @param {AuthVerificationTokenCreateManyAndReturnArgs} args - Arguments to create many AuthVerificationTokens.
     * @example
     * // Create many AuthVerificationTokens
     * const authVerificationToken = await prisma.authVerificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuthVerificationTokens and only return the `id`
     * const authVerificationTokenWithIdOnly = await prisma.authVerificationToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthVerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthVerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuthVerificationToken.
     * @param {AuthVerificationTokenDeleteArgs} args - Arguments to delete one AuthVerificationToken.
     * @example
     * // Delete one AuthVerificationToken
     * const AuthVerificationToken = await prisma.authVerificationToken.delete({
     *   where: {
     *     // ... filter to delete one AuthVerificationToken
     *   }
     * })
     * 
     */
    delete<T extends AuthVerificationTokenDeleteArgs>(args: SelectSubset<T, AuthVerificationTokenDeleteArgs<ExtArgs>>): Prisma__AuthVerificationTokenClient<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuthVerificationToken.
     * @param {AuthVerificationTokenUpdateArgs} args - Arguments to update one AuthVerificationToken.
     * @example
     * // Update one AuthVerificationToken
     * const authVerificationToken = await prisma.authVerificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthVerificationTokenUpdateArgs>(args: SelectSubset<T, AuthVerificationTokenUpdateArgs<ExtArgs>>): Prisma__AuthVerificationTokenClient<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuthVerificationTokens.
     * @param {AuthVerificationTokenDeleteManyArgs} args - Arguments to filter AuthVerificationTokens to delete.
     * @example
     * // Delete a few AuthVerificationTokens
     * const { count } = await prisma.authVerificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthVerificationTokenDeleteManyArgs>(args?: SelectSubset<T, AuthVerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthVerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthVerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthVerificationTokens
     * const authVerificationToken = await prisma.authVerificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthVerificationTokenUpdateManyArgs>(args: SelectSubset<T, AuthVerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthVerificationTokens and returns the data updated in the database.
     * @param {AuthVerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many AuthVerificationTokens.
     * @example
     * // Update many AuthVerificationTokens
     * const authVerificationToken = await prisma.authVerificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuthVerificationTokens and only return the `id`
     * const authVerificationTokenWithIdOnly = await prisma.authVerificationToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuthVerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, AuthVerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuthVerificationToken.
     * @param {AuthVerificationTokenUpsertArgs} args - Arguments to update or create a AuthVerificationToken.
     * @example
     * // Update or create a AuthVerificationToken
     * const authVerificationToken = await prisma.authVerificationToken.upsert({
     *   create: {
     *     // ... data to create a AuthVerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthVerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends AuthVerificationTokenUpsertArgs>(args: SelectSubset<T, AuthVerificationTokenUpsertArgs<ExtArgs>>): Prisma__AuthVerificationTokenClient<$Result.GetResult<Prisma.$AuthVerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuthVerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthVerificationTokenCountArgs} args - Arguments to filter AuthVerificationTokens to count.
     * @example
     * // Count the number of AuthVerificationTokens
     * const count = await prisma.authVerificationToken.count({
     *   where: {
     *     // ... the filter for the AuthVerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends AuthVerificationTokenCountArgs>(
      args?: Subset<T, AuthVerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthVerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthVerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthVerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthVerificationTokenAggregateArgs>(args: Subset<T, AuthVerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetAuthVerificationTokenAggregateType<T>>

    /**
     * Group by AuthVerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthVerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthVerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthVerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: AuthVerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthVerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthVerificationToken model
   */
  readonly fields: AuthVerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthVerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthVerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuthVerificationToken model
   */
  interface AuthVerificationTokenFieldRefs {
    readonly id: FieldRef<"AuthVerificationToken", 'String'>
    readonly email: FieldRef<"AuthVerificationToken", 'String'>
    readonly pin: FieldRef<"AuthVerificationToken", 'String'>
    readonly method: FieldRef<"AuthVerificationToken", 'String'>
    readonly token: FieldRef<"AuthVerificationToken", 'String'>
    readonly used: FieldRef<"AuthVerificationToken", 'Boolean'>
    readonly createdAt: FieldRef<"AuthVerificationToken", 'DateTime'>
    readonly expiresAt: FieldRef<"AuthVerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuthVerificationToken findUnique
   */
  export type AuthVerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which AuthVerificationToken to fetch.
     */
    where: AuthVerificationTokenWhereUniqueInput
  }

  /**
   * AuthVerificationToken findUniqueOrThrow
   */
  export type AuthVerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which AuthVerificationToken to fetch.
     */
    where: AuthVerificationTokenWhereUniqueInput
  }

  /**
   * AuthVerificationToken findFirst
   */
  export type AuthVerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which AuthVerificationToken to fetch.
     */
    where?: AuthVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthVerificationTokens to fetch.
     */
    orderBy?: AuthVerificationTokenOrderByWithRelationInput | AuthVerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthVerificationTokens.
     */
    cursor?: AuthVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthVerificationTokens.
     */
    distinct?: AuthVerificationTokenScalarFieldEnum | AuthVerificationTokenScalarFieldEnum[]
  }

  /**
   * AuthVerificationToken findFirstOrThrow
   */
  export type AuthVerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which AuthVerificationToken to fetch.
     */
    where?: AuthVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthVerificationTokens to fetch.
     */
    orderBy?: AuthVerificationTokenOrderByWithRelationInput | AuthVerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthVerificationTokens.
     */
    cursor?: AuthVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthVerificationTokens.
     */
    distinct?: AuthVerificationTokenScalarFieldEnum | AuthVerificationTokenScalarFieldEnum[]
  }

  /**
   * AuthVerificationToken findMany
   */
  export type AuthVerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which AuthVerificationTokens to fetch.
     */
    where?: AuthVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthVerificationTokens to fetch.
     */
    orderBy?: AuthVerificationTokenOrderByWithRelationInput | AuthVerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthVerificationTokens.
     */
    cursor?: AuthVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthVerificationTokens.
     */
    skip?: number
    distinct?: AuthVerificationTokenScalarFieldEnum | AuthVerificationTokenScalarFieldEnum[]
  }

  /**
   * AuthVerificationToken create
   */
  export type AuthVerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a AuthVerificationToken.
     */
    data: XOR<AuthVerificationTokenCreateInput, AuthVerificationTokenUncheckedCreateInput>
  }

  /**
   * AuthVerificationToken createMany
   */
  export type AuthVerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthVerificationTokens.
     */
    data: AuthVerificationTokenCreateManyInput | AuthVerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthVerificationToken createManyAndReturn
   */
  export type AuthVerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many AuthVerificationTokens.
     */
    data: AuthVerificationTokenCreateManyInput | AuthVerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthVerificationToken update
   */
  export type AuthVerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a AuthVerificationToken.
     */
    data: XOR<AuthVerificationTokenUpdateInput, AuthVerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which AuthVerificationToken to update.
     */
    where: AuthVerificationTokenWhereUniqueInput
  }

  /**
   * AuthVerificationToken updateMany
   */
  export type AuthVerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthVerificationTokens.
     */
    data: XOR<AuthVerificationTokenUpdateManyMutationInput, AuthVerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which AuthVerificationTokens to update
     */
    where?: AuthVerificationTokenWhereInput
    /**
     * Limit how many AuthVerificationTokens to update.
     */
    limit?: number
  }

  /**
   * AuthVerificationToken updateManyAndReturn
   */
  export type AuthVerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update AuthVerificationTokens.
     */
    data: XOR<AuthVerificationTokenUpdateManyMutationInput, AuthVerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which AuthVerificationTokens to update
     */
    where?: AuthVerificationTokenWhereInput
    /**
     * Limit how many AuthVerificationTokens to update.
     */
    limit?: number
  }

  /**
   * AuthVerificationToken upsert
   */
  export type AuthVerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the AuthVerificationToken to update in case it exists.
     */
    where: AuthVerificationTokenWhereUniqueInput
    /**
     * In case the AuthVerificationToken found by the `where` argument doesn't exist, create a new AuthVerificationToken with this data.
     */
    create: XOR<AuthVerificationTokenCreateInput, AuthVerificationTokenUncheckedCreateInput>
    /**
     * In case the AuthVerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthVerificationTokenUpdateInput, AuthVerificationTokenUncheckedUpdateInput>
  }

  /**
   * AuthVerificationToken delete
   */
  export type AuthVerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which AuthVerificationToken to delete.
     */
    where: AuthVerificationTokenWhereUniqueInput
  }

  /**
   * AuthVerificationToken deleteMany
   */
  export type AuthVerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthVerificationTokens to delete
     */
    where?: AuthVerificationTokenWhereInput
    /**
     * Limit how many AuthVerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * AuthVerificationToken without action
   */
  export type AuthVerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthVerificationToken
     */
    select?: AuthVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthVerificationToken
     */
    omit?: AuthVerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model WebAuthnUser
   */

  export type AggregateWebAuthnUser = {
    _count: WebAuthnUserCountAggregateOutputType | null
    _min: WebAuthnUserMinAggregateOutputType | null
    _max: WebAuthnUserMaxAggregateOutputType | null
  }

  export type WebAuthnUserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
  }

  export type WebAuthnUserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
  }

  export type WebAuthnUserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    createdAt: number
    _all: number
  }


  export type WebAuthnUserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
  }

  export type WebAuthnUserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
  }

  export type WebAuthnUserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type WebAuthnUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebAuthnUser to aggregate.
     */
    where?: WebAuthnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebAuthnUsers to fetch.
     */
    orderBy?: WebAuthnUserOrderByWithRelationInput | WebAuthnUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebAuthnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebAuthnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebAuthnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebAuthnUsers
    **/
    _count?: true | WebAuthnUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebAuthnUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebAuthnUserMaxAggregateInputType
  }

  export type GetWebAuthnUserAggregateType<T extends WebAuthnUserAggregateArgs> = {
        [P in keyof T & keyof AggregateWebAuthnUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebAuthnUser[P]>
      : GetScalarType<T[P], AggregateWebAuthnUser[P]>
  }




  export type WebAuthnUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebAuthnUserWhereInput
    orderBy?: WebAuthnUserOrderByWithAggregationInput | WebAuthnUserOrderByWithAggregationInput[]
    by: WebAuthnUserScalarFieldEnum[] | WebAuthnUserScalarFieldEnum
    having?: WebAuthnUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebAuthnUserCountAggregateInputType | true
    _min?: WebAuthnUserMinAggregateInputType
    _max?: WebAuthnUserMaxAggregateInputType
  }

  export type WebAuthnUserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    createdAt: Date
    _count: WebAuthnUserCountAggregateOutputType | null
    _min: WebAuthnUserMinAggregateOutputType | null
    _max: WebAuthnUserMaxAggregateOutputType | null
  }

  type GetWebAuthnUserGroupByPayload<T extends WebAuthnUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebAuthnUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebAuthnUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebAuthnUserGroupByOutputType[P]>
            : GetScalarType<T[P], WebAuthnUserGroupByOutputType[P]>
        }
      >
    >


  export type WebAuthnUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    credentials?: boolean | WebAuthnUser$credentialsArgs<ExtArgs>
    _count?: boolean | WebAuthnUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webAuthnUser"]>

  export type WebAuthnUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["webAuthnUser"]>

  export type WebAuthnUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["webAuthnUser"]>

  export type WebAuthnUserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type WebAuthnUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "createdAt", ExtArgs["result"]["webAuthnUser"]>
  export type WebAuthnUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    credentials?: boolean | WebAuthnUser$credentialsArgs<ExtArgs>
    _count?: boolean | WebAuthnUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WebAuthnUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WebAuthnUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WebAuthnUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebAuthnUser"
    objects: {
      credentials: Prisma.$WebAuthnCredentialPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      createdAt: Date
    }, ExtArgs["result"]["webAuthnUser"]>
    composites: {}
  }

  type WebAuthnUserGetPayload<S extends boolean | null | undefined | WebAuthnUserDefaultArgs> = $Result.GetResult<Prisma.$WebAuthnUserPayload, S>

  type WebAuthnUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebAuthnUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebAuthnUserCountAggregateInputType | true
    }

  export interface WebAuthnUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebAuthnUser'], meta: { name: 'WebAuthnUser' } }
    /**
     * Find zero or one WebAuthnUser that matches the filter.
     * @param {WebAuthnUserFindUniqueArgs} args - Arguments to find a WebAuthnUser
     * @example
     * // Get one WebAuthnUser
     * const webAuthnUser = await prisma.webAuthnUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebAuthnUserFindUniqueArgs>(args: SelectSubset<T, WebAuthnUserFindUniqueArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebAuthnUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebAuthnUserFindUniqueOrThrowArgs} args - Arguments to find a WebAuthnUser
     * @example
     * // Get one WebAuthnUser
     * const webAuthnUser = await prisma.webAuthnUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebAuthnUserFindUniqueOrThrowArgs>(args: SelectSubset<T, WebAuthnUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebAuthnUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnUserFindFirstArgs} args - Arguments to find a WebAuthnUser
     * @example
     * // Get one WebAuthnUser
     * const webAuthnUser = await prisma.webAuthnUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebAuthnUserFindFirstArgs>(args?: SelectSubset<T, WebAuthnUserFindFirstArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebAuthnUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnUserFindFirstOrThrowArgs} args - Arguments to find a WebAuthnUser
     * @example
     * // Get one WebAuthnUser
     * const webAuthnUser = await prisma.webAuthnUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebAuthnUserFindFirstOrThrowArgs>(args?: SelectSubset<T, WebAuthnUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebAuthnUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebAuthnUsers
     * const webAuthnUsers = await prisma.webAuthnUser.findMany()
     * 
     * // Get first 10 WebAuthnUsers
     * const webAuthnUsers = await prisma.webAuthnUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webAuthnUserWithIdOnly = await prisma.webAuthnUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebAuthnUserFindManyArgs>(args?: SelectSubset<T, WebAuthnUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebAuthnUser.
     * @param {WebAuthnUserCreateArgs} args - Arguments to create a WebAuthnUser.
     * @example
     * // Create one WebAuthnUser
     * const WebAuthnUser = await prisma.webAuthnUser.create({
     *   data: {
     *     // ... data to create a WebAuthnUser
     *   }
     * })
     * 
     */
    create<T extends WebAuthnUserCreateArgs>(args: SelectSubset<T, WebAuthnUserCreateArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebAuthnUsers.
     * @param {WebAuthnUserCreateManyArgs} args - Arguments to create many WebAuthnUsers.
     * @example
     * // Create many WebAuthnUsers
     * const webAuthnUser = await prisma.webAuthnUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebAuthnUserCreateManyArgs>(args?: SelectSubset<T, WebAuthnUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebAuthnUsers and returns the data saved in the database.
     * @param {WebAuthnUserCreateManyAndReturnArgs} args - Arguments to create many WebAuthnUsers.
     * @example
     * // Create many WebAuthnUsers
     * const webAuthnUser = await prisma.webAuthnUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebAuthnUsers and only return the `id`
     * const webAuthnUserWithIdOnly = await prisma.webAuthnUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebAuthnUserCreateManyAndReturnArgs>(args?: SelectSubset<T, WebAuthnUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebAuthnUser.
     * @param {WebAuthnUserDeleteArgs} args - Arguments to delete one WebAuthnUser.
     * @example
     * // Delete one WebAuthnUser
     * const WebAuthnUser = await prisma.webAuthnUser.delete({
     *   where: {
     *     // ... filter to delete one WebAuthnUser
     *   }
     * })
     * 
     */
    delete<T extends WebAuthnUserDeleteArgs>(args: SelectSubset<T, WebAuthnUserDeleteArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebAuthnUser.
     * @param {WebAuthnUserUpdateArgs} args - Arguments to update one WebAuthnUser.
     * @example
     * // Update one WebAuthnUser
     * const webAuthnUser = await prisma.webAuthnUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebAuthnUserUpdateArgs>(args: SelectSubset<T, WebAuthnUserUpdateArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebAuthnUsers.
     * @param {WebAuthnUserDeleteManyArgs} args - Arguments to filter WebAuthnUsers to delete.
     * @example
     * // Delete a few WebAuthnUsers
     * const { count } = await prisma.webAuthnUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebAuthnUserDeleteManyArgs>(args?: SelectSubset<T, WebAuthnUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebAuthnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebAuthnUsers
     * const webAuthnUser = await prisma.webAuthnUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebAuthnUserUpdateManyArgs>(args: SelectSubset<T, WebAuthnUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebAuthnUsers and returns the data updated in the database.
     * @param {WebAuthnUserUpdateManyAndReturnArgs} args - Arguments to update many WebAuthnUsers.
     * @example
     * // Update many WebAuthnUsers
     * const webAuthnUser = await prisma.webAuthnUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebAuthnUsers and only return the `id`
     * const webAuthnUserWithIdOnly = await prisma.webAuthnUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebAuthnUserUpdateManyAndReturnArgs>(args: SelectSubset<T, WebAuthnUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebAuthnUser.
     * @param {WebAuthnUserUpsertArgs} args - Arguments to update or create a WebAuthnUser.
     * @example
     * // Update or create a WebAuthnUser
     * const webAuthnUser = await prisma.webAuthnUser.upsert({
     *   create: {
     *     // ... data to create a WebAuthnUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebAuthnUser we want to update
     *   }
     * })
     */
    upsert<T extends WebAuthnUserUpsertArgs>(args: SelectSubset<T, WebAuthnUserUpsertArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebAuthnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnUserCountArgs} args - Arguments to filter WebAuthnUsers to count.
     * @example
     * // Count the number of WebAuthnUsers
     * const count = await prisma.webAuthnUser.count({
     *   where: {
     *     // ... the filter for the WebAuthnUsers we want to count
     *   }
     * })
    **/
    count<T extends WebAuthnUserCountArgs>(
      args?: Subset<T, WebAuthnUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebAuthnUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebAuthnUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebAuthnUserAggregateArgs>(args: Subset<T, WebAuthnUserAggregateArgs>): Prisma.PrismaPromise<GetWebAuthnUserAggregateType<T>>

    /**
     * Group by WebAuthnUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebAuthnUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebAuthnUserGroupByArgs['orderBy'] }
        : { orderBy?: WebAuthnUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebAuthnUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebAuthnUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebAuthnUser model
   */
  readonly fields: WebAuthnUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebAuthnUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebAuthnUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    credentials<T extends WebAuthnUser$credentialsArgs<ExtArgs> = {}>(args?: Subset<T, WebAuthnUser$credentialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebAuthnUser model
   */
  interface WebAuthnUserFieldRefs {
    readonly id: FieldRef<"WebAuthnUser", 'String'>
    readonly email: FieldRef<"WebAuthnUser", 'String'>
    readonly name: FieldRef<"WebAuthnUser", 'String'>
    readonly createdAt: FieldRef<"WebAuthnUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebAuthnUser findUnique
   */
  export type WebAuthnUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnUser to fetch.
     */
    where: WebAuthnUserWhereUniqueInput
  }

  /**
   * WebAuthnUser findUniqueOrThrow
   */
  export type WebAuthnUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnUser to fetch.
     */
    where: WebAuthnUserWhereUniqueInput
  }

  /**
   * WebAuthnUser findFirst
   */
  export type WebAuthnUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnUser to fetch.
     */
    where?: WebAuthnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebAuthnUsers to fetch.
     */
    orderBy?: WebAuthnUserOrderByWithRelationInput | WebAuthnUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebAuthnUsers.
     */
    cursor?: WebAuthnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebAuthnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebAuthnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebAuthnUsers.
     */
    distinct?: WebAuthnUserScalarFieldEnum | WebAuthnUserScalarFieldEnum[]
  }

  /**
   * WebAuthnUser findFirstOrThrow
   */
  export type WebAuthnUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnUser to fetch.
     */
    where?: WebAuthnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebAuthnUsers to fetch.
     */
    orderBy?: WebAuthnUserOrderByWithRelationInput | WebAuthnUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebAuthnUsers.
     */
    cursor?: WebAuthnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebAuthnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebAuthnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebAuthnUsers.
     */
    distinct?: WebAuthnUserScalarFieldEnum | WebAuthnUserScalarFieldEnum[]
  }

  /**
   * WebAuthnUser findMany
   */
  export type WebAuthnUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnUsers to fetch.
     */
    where?: WebAuthnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebAuthnUsers to fetch.
     */
    orderBy?: WebAuthnUserOrderByWithRelationInput | WebAuthnUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebAuthnUsers.
     */
    cursor?: WebAuthnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebAuthnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebAuthnUsers.
     */
    skip?: number
    distinct?: WebAuthnUserScalarFieldEnum | WebAuthnUserScalarFieldEnum[]
  }

  /**
   * WebAuthnUser create
   */
  export type WebAuthnUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * The data needed to create a WebAuthnUser.
     */
    data: XOR<WebAuthnUserCreateInput, WebAuthnUserUncheckedCreateInput>
  }

  /**
   * WebAuthnUser createMany
   */
  export type WebAuthnUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebAuthnUsers.
     */
    data: WebAuthnUserCreateManyInput | WebAuthnUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebAuthnUser createManyAndReturn
   */
  export type WebAuthnUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * The data used to create many WebAuthnUsers.
     */
    data: WebAuthnUserCreateManyInput | WebAuthnUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebAuthnUser update
   */
  export type WebAuthnUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * The data needed to update a WebAuthnUser.
     */
    data: XOR<WebAuthnUserUpdateInput, WebAuthnUserUncheckedUpdateInput>
    /**
     * Choose, which WebAuthnUser to update.
     */
    where: WebAuthnUserWhereUniqueInput
  }

  /**
   * WebAuthnUser updateMany
   */
  export type WebAuthnUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebAuthnUsers.
     */
    data: XOR<WebAuthnUserUpdateManyMutationInput, WebAuthnUserUncheckedUpdateManyInput>
    /**
     * Filter which WebAuthnUsers to update
     */
    where?: WebAuthnUserWhereInput
    /**
     * Limit how many WebAuthnUsers to update.
     */
    limit?: number
  }

  /**
   * WebAuthnUser updateManyAndReturn
   */
  export type WebAuthnUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * The data used to update WebAuthnUsers.
     */
    data: XOR<WebAuthnUserUpdateManyMutationInput, WebAuthnUserUncheckedUpdateManyInput>
    /**
     * Filter which WebAuthnUsers to update
     */
    where?: WebAuthnUserWhereInput
    /**
     * Limit how many WebAuthnUsers to update.
     */
    limit?: number
  }

  /**
   * WebAuthnUser upsert
   */
  export type WebAuthnUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * The filter to search for the WebAuthnUser to update in case it exists.
     */
    where: WebAuthnUserWhereUniqueInput
    /**
     * In case the WebAuthnUser found by the `where` argument doesn't exist, create a new WebAuthnUser with this data.
     */
    create: XOR<WebAuthnUserCreateInput, WebAuthnUserUncheckedCreateInput>
    /**
     * In case the WebAuthnUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebAuthnUserUpdateInput, WebAuthnUserUncheckedUpdateInput>
  }

  /**
   * WebAuthnUser delete
   */
  export type WebAuthnUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
    /**
     * Filter which WebAuthnUser to delete.
     */
    where: WebAuthnUserWhereUniqueInput
  }

  /**
   * WebAuthnUser deleteMany
   */
  export type WebAuthnUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebAuthnUsers to delete
     */
    where?: WebAuthnUserWhereInput
    /**
     * Limit how many WebAuthnUsers to delete.
     */
    limit?: number
  }

  /**
   * WebAuthnUser.credentials
   */
  export type WebAuthnUser$credentialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    where?: WebAuthnCredentialWhereInput
    orderBy?: WebAuthnCredentialOrderByWithRelationInput | WebAuthnCredentialOrderByWithRelationInput[]
    cursor?: WebAuthnCredentialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebAuthnCredentialScalarFieldEnum | WebAuthnCredentialScalarFieldEnum[]
  }

  /**
   * WebAuthnUser without action
   */
  export type WebAuthnUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnUser
     */
    select?: WebAuthnUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnUser
     */
    omit?: WebAuthnUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnUserInclude<ExtArgs> | null
  }


  /**
   * Model WebAuthnCredential
   */

  export type AggregateWebAuthnCredential = {
    _count: WebAuthnCredentialCountAggregateOutputType | null
    _avg: WebAuthnCredentialAvgAggregateOutputType | null
    _sum: WebAuthnCredentialSumAggregateOutputType | null
    _min: WebAuthnCredentialMinAggregateOutputType | null
    _max: WebAuthnCredentialMaxAggregateOutputType | null
  }

  export type WebAuthnCredentialAvgAggregateOutputType = {
    counter: number | null
  }

  export type WebAuthnCredentialSumAggregateOutputType = {
    counter: number | null
  }

  export type WebAuthnCredentialMinAggregateOutputType = {
    id: string | null
    credentialId: string | null
    publicKey: string | null
    counter: number | null
    userId: string | null
    createdAt: Date | null
  }

  export type WebAuthnCredentialMaxAggregateOutputType = {
    id: string | null
    credentialId: string | null
    publicKey: string | null
    counter: number | null
    userId: string | null
    createdAt: Date | null
  }

  export type WebAuthnCredentialCountAggregateOutputType = {
    id: number
    credentialId: number
    publicKey: number
    counter: number
    userId: number
    createdAt: number
    _all: number
  }


  export type WebAuthnCredentialAvgAggregateInputType = {
    counter?: true
  }

  export type WebAuthnCredentialSumAggregateInputType = {
    counter?: true
  }

  export type WebAuthnCredentialMinAggregateInputType = {
    id?: true
    credentialId?: true
    publicKey?: true
    counter?: true
    userId?: true
    createdAt?: true
  }

  export type WebAuthnCredentialMaxAggregateInputType = {
    id?: true
    credentialId?: true
    publicKey?: true
    counter?: true
    userId?: true
    createdAt?: true
  }

  export type WebAuthnCredentialCountAggregateInputType = {
    id?: true
    credentialId?: true
    publicKey?: true
    counter?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type WebAuthnCredentialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebAuthnCredential to aggregate.
     */
    where?: WebAuthnCredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebAuthnCredentials to fetch.
     */
    orderBy?: WebAuthnCredentialOrderByWithRelationInput | WebAuthnCredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebAuthnCredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebAuthnCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebAuthnCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebAuthnCredentials
    **/
    _count?: true | WebAuthnCredentialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebAuthnCredentialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebAuthnCredentialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebAuthnCredentialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebAuthnCredentialMaxAggregateInputType
  }

  export type GetWebAuthnCredentialAggregateType<T extends WebAuthnCredentialAggregateArgs> = {
        [P in keyof T & keyof AggregateWebAuthnCredential]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebAuthnCredential[P]>
      : GetScalarType<T[P], AggregateWebAuthnCredential[P]>
  }




  export type WebAuthnCredentialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebAuthnCredentialWhereInput
    orderBy?: WebAuthnCredentialOrderByWithAggregationInput | WebAuthnCredentialOrderByWithAggregationInput[]
    by: WebAuthnCredentialScalarFieldEnum[] | WebAuthnCredentialScalarFieldEnum
    having?: WebAuthnCredentialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebAuthnCredentialCountAggregateInputType | true
    _avg?: WebAuthnCredentialAvgAggregateInputType
    _sum?: WebAuthnCredentialSumAggregateInputType
    _min?: WebAuthnCredentialMinAggregateInputType
    _max?: WebAuthnCredentialMaxAggregateInputType
  }

  export type WebAuthnCredentialGroupByOutputType = {
    id: string
    credentialId: string
    publicKey: string
    counter: number
    userId: string
    createdAt: Date
    _count: WebAuthnCredentialCountAggregateOutputType | null
    _avg: WebAuthnCredentialAvgAggregateOutputType | null
    _sum: WebAuthnCredentialSumAggregateOutputType | null
    _min: WebAuthnCredentialMinAggregateOutputType | null
    _max: WebAuthnCredentialMaxAggregateOutputType | null
  }

  type GetWebAuthnCredentialGroupByPayload<T extends WebAuthnCredentialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebAuthnCredentialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebAuthnCredentialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebAuthnCredentialGroupByOutputType[P]>
            : GetScalarType<T[P], WebAuthnCredentialGroupByOutputType[P]>
        }
      >
    >


  export type WebAuthnCredentialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    credentialId?: boolean
    publicKey?: boolean
    counter?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | WebAuthnUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webAuthnCredential"]>

  export type WebAuthnCredentialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    credentialId?: boolean
    publicKey?: boolean
    counter?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | WebAuthnUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webAuthnCredential"]>

  export type WebAuthnCredentialSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    credentialId?: boolean
    publicKey?: boolean
    counter?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | WebAuthnUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webAuthnCredential"]>

  export type WebAuthnCredentialSelectScalar = {
    id?: boolean
    credentialId?: boolean
    publicKey?: boolean
    counter?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type WebAuthnCredentialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "credentialId" | "publicKey" | "counter" | "userId" | "createdAt", ExtArgs["result"]["webAuthnCredential"]>
  export type WebAuthnCredentialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | WebAuthnUserDefaultArgs<ExtArgs>
  }
  export type WebAuthnCredentialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | WebAuthnUserDefaultArgs<ExtArgs>
  }
  export type WebAuthnCredentialIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | WebAuthnUserDefaultArgs<ExtArgs>
  }

  export type $WebAuthnCredentialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebAuthnCredential"
    objects: {
      user: Prisma.$WebAuthnUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      credentialId: string
      publicKey: string
      counter: number
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["webAuthnCredential"]>
    composites: {}
  }

  type WebAuthnCredentialGetPayload<S extends boolean | null | undefined | WebAuthnCredentialDefaultArgs> = $Result.GetResult<Prisma.$WebAuthnCredentialPayload, S>

  type WebAuthnCredentialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebAuthnCredentialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebAuthnCredentialCountAggregateInputType | true
    }

  export interface WebAuthnCredentialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebAuthnCredential'], meta: { name: 'WebAuthnCredential' } }
    /**
     * Find zero or one WebAuthnCredential that matches the filter.
     * @param {WebAuthnCredentialFindUniqueArgs} args - Arguments to find a WebAuthnCredential
     * @example
     * // Get one WebAuthnCredential
     * const webAuthnCredential = await prisma.webAuthnCredential.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebAuthnCredentialFindUniqueArgs>(args: SelectSubset<T, WebAuthnCredentialFindUniqueArgs<ExtArgs>>): Prisma__WebAuthnCredentialClient<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebAuthnCredential that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebAuthnCredentialFindUniqueOrThrowArgs} args - Arguments to find a WebAuthnCredential
     * @example
     * // Get one WebAuthnCredential
     * const webAuthnCredential = await prisma.webAuthnCredential.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebAuthnCredentialFindUniqueOrThrowArgs>(args: SelectSubset<T, WebAuthnCredentialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebAuthnCredentialClient<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebAuthnCredential that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnCredentialFindFirstArgs} args - Arguments to find a WebAuthnCredential
     * @example
     * // Get one WebAuthnCredential
     * const webAuthnCredential = await prisma.webAuthnCredential.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebAuthnCredentialFindFirstArgs>(args?: SelectSubset<T, WebAuthnCredentialFindFirstArgs<ExtArgs>>): Prisma__WebAuthnCredentialClient<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebAuthnCredential that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnCredentialFindFirstOrThrowArgs} args - Arguments to find a WebAuthnCredential
     * @example
     * // Get one WebAuthnCredential
     * const webAuthnCredential = await prisma.webAuthnCredential.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebAuthnCredentialFindFirstOrThrowArgs>(args?: SelectSubset<T, WebAuthnCredentialFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebAuthnCredentialClient<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebAuthnCredentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnCredentialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebAuthnCredentials
     * const webAuthnCredentials = await prisma.webAuthnCredential.findMany()
     * 
     * // Get first 10 WebAuthnCredentials
     * const webAuthnCredentials = await prisma.webAuthnCredential.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webAuthnCredentialWithIdOnly = await prisma.webAuthnCredential.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebAuthnCredentialFindManyArgs>(args?: SelectSubset<T, WebAuthnCredentialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebAuthnCredential.
     * @param {WebAuthnCredentialCreateArgs} args - Arguments to create a WebAuthnCredential.
     * @example
     * // Create one WebAuthnCredential
     * const WebAuthnCredential = await prisma.webAuthnCredential.create({
     *   data: {
     *     // ... data to create a WebAuthnCredential
     *   }
     * })
     * 
     */
    create<T extends WebAuthnCredentialCreateArgs>(args: SelectSubset<T, WebAuthnCredentialCreateArgs<ExtArgs>>): Prisma__WebAuthnCredentialClient<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebAuthnCredentials.
     * @param {WebAuthnCredentialCreateManyArgs} args - Arguments to create many WebAuthnCredentials.
     * @example
     * // Create many WebAuthnCredentials
     * const webAuthnCredential = await prisma.webAuthnCredential.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebAuthnCredentialCreateManyArgs>(args?: SelectSubset<T, WebAuthnCredentialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebAuthnCredentials and returns the data saved in the database.
     * @param {WebAuthnCredentialCreateManyAndReturnArgs} args - Arguments to create many WebAuthnCredentials.
     * @example
     * // Create many WebAuthnCredentials
     * const webAuthnCredential = await prisma.webAuthnCredential.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebAuthnCredentials and only return the `id`
     * const webAuthnCredentialWithIdOnly = await prisma.webAuthnCredential.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebAuthnCredentialCreateManyAndReturnArgs>(args?: SelectSubset<T, WebAuthnCredentialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebAuthnCredential.
     * @param {WebAuthnCredentialDeleteArgs} args - Arguments to delete one WebAuthnCredential.
     * @example
     * // Delete one WebAuthnCredential
     * const WebAuthnCredential = await prisma.webAuthnCredential.delete({
     *   where: {
     *     // ... filter to delete one WebAuthnCredential
     *   }
     * })
     * 
     */
    delete<T extends WebAuthnCredentialDeleteArgs>(args: SelectSubset<T, WebAuthnCredentialDeleteArgs<ExtArgs>>): Prisma__WebAuthnCredentialClient<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebAuthnCredential.
     * @param {WebAuthnCredentialUpdateArgs} args - Arguments to update one WebAuthnCredential.
     * @example
     * // Update one WebAuthnCredential
     * const webAuthnCredential = await prisma.webAuthnCredential.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebAuthnCredentialUpdateArgs>(args: SelectSubset<T, WebAuthnCredentialUpdateArgs<ExtArgs>>): Prisma__WebAuthnCredentialClient<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebAuthnCredentials.
     * @param {WebAuthnCredentialDeleteManyArgs} args - Arguments to filter WebAuthnCredentials to delete.
     * @example
     * // Delete a few WebAuthnCredentials
     * const { count } = await prisma.webAuthnCredential.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebAuthnCredentialDeleteManyArgs>(args?: SelectSubset<T, WebAuthnCredentialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebAuthnCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnCredentialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebAuthnCredentials
     * const webAuthnCredential = await prisma.webAuthnCredential.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebAuthnCredentialUpdateManyArgs>(args: SelectSubset<T, WebAuthnCredentialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebAuthnCredentials and returns the data updated in the database.
     * @param {WebAuthnCredentialUpdateManyAndReturnArgs} args - Arguments to update many WebAuthnCredentials.
     * @example
     * // Update many WebAuthnCredentials
     * const webAuthnCredential = await prisma.webAuthnCredential.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebAuthnCredentials and only return the `id`
     * const webAuthnCredentialWithIdOnly = await prisma.webAuthnCredential.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebAuthnCredentialUpdateManyAndReturnArgs>(args: SelectSubset<T, WebAuthnCredentialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebAuthnCredential.
     * @param {WebAuthnCredentialUpsertArgs} args - Arguments to update or create a WebAuthnCredential.
     * @example
     * // Update or create a WebAuthnCredential
     * const webAuthnCredential = await prisma.webAuthnCredential.upsert({
     *   create: {
     *     // ... data to create a WebAuthnCredential
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebAuthnCredential we want to update
     *   }
     * })
     */
    upsert<T extends WebAuthnCredentialUpsertArgs>(args: SelectSubset<T, WebAuthnCredentialUpsertArgs<ExtArgs>>): Prisma__WebAuthnCredentialClient<$Result.GetResult<Prisma.$WebAuthnCredentialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebAuthnCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnCredentialCountArgs} args - Arguments to filter WebAuthnCredentials to count.
     * @example
     * // Count the number of WebAuthnCredentials
     * const count = await prisma.webAuthnCredential.count({
     *   where: {
     *     // ... the filter for the WebAuthnCredentials we want to count
     *   }
     * })
    **/
    count<T extends WebAuthnCredentialCountArgs>(
      args?: Subset<T, WebAuthnCredentialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebAuthnCredentialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebAuthnCredential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnCredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebAuthnCredentialAggregateArgs>(args: Subset<T, WebAuthnCredentialAggregateArgs>): Prisma.PrismaPromise<GetWebAuthnCredentialAggregateType<T>>

    /**
     * Group by WebAuthnCredential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebAuthnCredentialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebAuthnCredentialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebAuthnCredentialGroupByArgs['orderBy'] }
        : { orderBy?: WebAuthnCredentialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebAuthnCredentialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebAuthnCredentialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebAuthnCredential model
   */
  readonly fields: WebAuthnCredentialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebAuthnCredential.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebAuthnCredentialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends WebAuthnUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WebAuthnUserDefaultArgs<ExtArgs>>): Prisma__WebAuthnUserClient<$Result.GetResult<Prisma.$WebAuthnUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebAuthnCredential model
   */
  interface WebAuthnCredentialFieldRefs {
    readonly id: FieldRef<"WebAuthnCredential", 'String'>
    readonly credentialId: FieldRef<"WebAuthnCredential", 'String'>
    readonly publicKey: FieldRef<"WebAuthnCredential", 'String'>
    readonly counter: FieldRef<"WebAuthnCredential", 'Int'>
    readonly userId: FieldRef<"WebAuthnCredential", 'String'>
    readonly createdAt: FieldRef<"WebAuthnCredential", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebAuthnCredential findUnique
   */
  export type WebAuthnCredentialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnCredential to fetch.
     */
    where: WebAuthnCredentialWhereUniqueInput
  }

  /**
   * WebAuthnCredential findUniqueOrThrow
   */
  export type WebAuthnCredentialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnCredential to fetch.
     */
    where: WebAuthnCredentialWhereUniqueInput
  }

  /**
   * WebAuthnCredential findFirst
   */
  export type WebAuthnCredentialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnCredential to fetch.
     */
    where?: WebAuthnCredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebAuthnCredentials to fetch.
     */
    orderBy?: WebAuthnCredentialOrderByWithRelationInput | WebAuthnCredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebAuthnCredentials.
     */
    cursor?: WebAuthnCredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebAuthnCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebAuthnCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebAuthnCredentials.
     */
    distinct?: WebAuthnCredentialScalarFieldEnum | WebAuthnCredentialScalarFieldEnum[]
  }

  /**
   * WebAuthnCredential findFirstOrThrow
   */
  export type WebAuthnCredentialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnCredential to fetch.
     */
    where?: WebAuthnCredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebAuthnCredentials to fetch.
     */
    orderBy?: WebAuthnCredentialOrderByWithRelationInput | WebAuthnCredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebAuthnCredentials.
     */
    cursor?: WebAuthnCredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebAuthnCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebAuthnCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebAuthnCredentials.
     */
    distinct?: WebAuthnCredentialScalarFieldEnum | WebAuthnCredentialScalarFieldEnum[]
  }

  /**
   * WebAuthnCredential findMany
   */
  export type WebAuthnCredentialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * Filter, which WebAuthnCredentials to fetch.
     */
    where?: WebAuthnCredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebAuthnCredentials to fetch.
     */
    orderBy?: WebAuthnCredentialOrderByWithRelationInput | WebAuthnCredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebAuthnCredentials.
     */
    cursor?: WebAuthnCredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebAuthnCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebAuthnCredentials.
     */
    skip?: number
    distinct?: WebAuthnCredentialScalarFieldEnum | WebAuthnCredentialScalarFieldEnum[]
  }

  /**
   * WebAuthnCredential create
   */
  export type WebAuthnCredentialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * The data needed to create a WebAuthnCredential.
     */
    data: XOR<WebAuthnCredentialCreateInput, WebAuthnCredentialUncheckedCreateInput>
  }

  /**
   * WebAuthnCredential createMany
   */
  export type WebAuthnCredentialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebAuthnCredentials.
     */
    data: WebAuthnCredentialCreateManyInput | WebAuthnCredentialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebAuthnCredential createManyAndReturn
   */
  export type WebAuthnCredentialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * The data used to create many WebAuthnCredentials.
     */
    data: WebAuthnCredentialCreateManyInput | WebAuthnCredentialCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebAuthnCredential update
   */
  export type WebAuthnCredentialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * The data needed to update a WebAuthnCredential.
     */
    data: XOR<WebAuthnCredentialUpdateInput, WebAuthnCredentialUncheckedUpdateInput>
    /**
     * Choose, which WebAuthnCredential to update.
     */
    where: WebAuthnCredentialWhereUniqueInput
  }

  /**
   * WebAuthnCredential updateMany
   */
  export type WebAuthnCredentialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebAuthnCredentials.
     */
    data: XOR<WebAuthnCredentialUpdateManyMutationInput, WebAuthnCredentialUncheckedUpdateManyInput>
    /**
     * Filter which WebAuthnCredentials to update
     */
    where?: WebAuthnCredentialWhereInput
    /**
     * Limit how many WebAuthnCredentials to update.
     */
    limit?: number
  }

  /**
   * WebAuthnCredential updateManyAndReturn
   */
  export type WebAuthnCredentialUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * The data used to update WebAuthnCredentials.
     */
    data: XOR<WebAuthnCredentialUpdateManyMutationInput, WebAuthnCredentialUncheckedUpdateManyInput>
    /**
     * Filter which WebAuthnCredentials to update
     */
    where?: WebAuthnCredentialWhereInput
    /**
     * Limit how many WebAuthnCredentials to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebAuthnCredential upsert
   */
  export type WebAuthnCredentialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * The filter to search for the WebAuthnCredential to update in case it exists.
     */
    where: WebAuthnCredentialWhereUniqueInput
    /**
     * In case the WebAuthnCredential found by the `where` argument doesn't exist, create a new WebAuthnCredential with this data.
     */
    create: XOR<WebAuthnCredentialCreateInput, WebAuthnCredentialUncheckedCreateInput>
    /**
     * In case the WebAuthnCredential was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebAuthnCredentialUpdateInput, WebAuthnCredentialUncheckedUpdateInput>
  }

  /**
   * WebAuthnCredential delete
   */
  export type WebAuthnCredentialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
    /**
     * Filter which WebAuthnCredential to delete.
     */
    where: WebAuthnCredentialWhereUniqueInput
  }

  /**
   * WebAuthnCredential deleteMany
   */
  export type WebAuthnCredentialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebAuthnCredentials to delete
     */
    where?: WebAuthnCredentialWhereInput
    /**
     * Limit how many WebAuthnCredentials to delete.
     */
    limit?: number
  }

  /**
   * WebAuthnCredential without action
   */
  export type WebAuthnCredentialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebAuthnCredential
     */
    select?: WebAuthnCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebAuthnCredential
     */
    omit?: WebAuthnCredentialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebAuthnCredentialInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    originalPath: 'originalPath',
    tempPath: 'tempPath',
    finalPath: 'finalPath',
    documentType: 'documentType',
    isGenerated: 'isGenerated',
    isCustomized: 'isCustomized',
    isSent: 'isSent',
    isPushed: 'isPushed',
    generatedAt: 'generatedAt',
    sentAt: 'sentAt',
    pushedAt: 'pushedAt',
    createdAt: 'createdAt',
    lawyerId: 'lawyerId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const LawyerScalarFieldEnum: {
    id: 'id',
    pin: 'pin',
    lawFirm: 'lawFirm',
    contactName: 'contactName',
    phone: 'phone',
    email: 'email',
    status: 'status',
    readyToGenerateDocuments: 'readyToGenerateDocuments',
    readyToGenerateDocumentsSealed: 'readyToGenerateDocumentsSealed',
    sendEmail: 'sendEmail',
    sendEmailSealed: 'sendEmailSealed',
    pushToCentralRepository: 'pushToCentralRepository',
    pushToCentralRepositorySealed: 'pushToCentralRepositorySealed',
    readyToSend: 'readyToSend',
    pinAddedToTOB: 'pinAddedToTOB',
    customizedTOBPath: 'customizedTOBPath',
    pinHyperlink: 'pinHyperlink',
    documentsSent: 'documentsSent',
    emailSentAt: 'emailSentAt',
    pushedToRepository: 'pushedToRepository',
    repositoryPath: 'repositoryPath',
    completedAt: 'completedAt',
    followUpDueDate: 'followUpDueDate',
    followUpStatus: 'followUpStatus',
    stackGroup: 'stackGroup',
    position: 'position',
    isActive: 'isActive',
    isEditable: 'isEditable',
    isDraggable: 'isDraggable',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastModified: 'lastModified',
    createdBy: 'createdBy',
    customEmailSubject: 'customEmailSubject',
    customEmailContent: 'customEmailContent',
    cardCollapsed: 'cardCollapsed'
  };

  export type LawyerScalarFieldEnum = (typeof LawyerScalarFieldEnum)[keyof typeof LawyerScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    text: 'text',
    createdAt: 'createdAt',
    editedAt: 'editedAt',
    lawyerId: 'lawyerId',
    author: 'author'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const AuthVerificationTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    pin: 'pin',
    method: 'method',
    token: 'token',
    used: 'used',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt'
  };

  export type AuthVerificationTokenScalarFieldEnum = (typeof AuthVerificationTokenScalarFieldEnum)[keyof typeof AuthVerificationTokenScalarFieldEnum]


  export const WebAuthnUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type WebAuthnUserScalarFieldEnum = (typeof WebAuthnUserScalarFieldEnum)[keyof typeof WebAuthnUserScalarFieldEnum]


  export const WebAuthnCredentialScalarFieldEnum: {
    id: 'id',
    credentialId: 'credentialId',
    publicKey: 'publicKey',
    counter: 'counter',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type WebAuthnCredentialScalarFieldEnum = (typeof WebAuthnCredentialScalarFieldEnum)[keyof typeof WebAuthnCredentialScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    filename?: StringFilter<"Document"> | string
    originalPath?: StringFilter<"Document"> | string
    tempPath?: StringNullableFilter<"Document"> | string | null
    finalPath?: StringNullableFilter<"Document"> | string | null
    documentType?: StringFilter<"Document"> | string
    isGenerated?: BoolNullableFilter<"Document"> | boolean | null
    isCustomized?: BoolNullableFilter<"Document"> | boolean | null
    isSent?: BoolNullableFilter<"Document"> | boolean | null
    isPushed?: BoolNullableFilter<"Document"> | boolean | null
    generatedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    pushedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    lawyerId?: StringFilter<"Document"> | string
    lawyer?: XOR<LawyerScalarRelationFilter, LawyerWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalPath?: SortOrder
    tempPath?: SortOrderInput | SortOrder
    finalPath?: SortOrderInput | SortOrder
    documentType?: SortOrder
    isGenerated?: SortOrderInput | SortOrder
    isCustomized?: SortOrderInput | SortOrder
    isSent?: SortOrderInput | SortOrder
    isPushed?: SortOrderInput | SortOrder
    generatedAt?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    pushedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    lawyerId?: SortOrder
    lawyer?: LawyerOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    filename?: StringFilter<"Document"> | string
    originalPath?: StringFilter<"Document"> | string
    tempPath?: StringNullableFilter<"Document"> | string | null
    finalPath?: StringNullableFilter<"Document"> | string | null
    documentType?: StringFilter<"Document"> | string
    isGenerated?: BoolNullableFilter<"Document"> | boolean | null
    isCustomized?: BoolNullableFilter<"Document"> | boolean | null
    isSent?: BoolNullableFilter<"Document"> | boolean | null
    isPushed?: BoolNullableFilter<"Document"> | boolean | null
    generatedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    pushedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    lawyerId?: StringFilter<"Document"> | string
    lawyer?: XOR<LawyerScalarRelationFilter, LawyerWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalPath?: SortOrder
    tempPath?: SortOrderInput | SortOrder
    finalPath?: SortOrderInput | SortOrder
    documentType?: SortOrder
    isGenerated?: SortOrderInput | SortOrder
    isCustomized?: SortOrderInput | SortOrder
    isSent?: SortOrderInput | SortOrder
    isPushed?: SortOrderInput | SortOrder
    generatedAt?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    pushedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    lawyerId?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    filename?: StringWithAggregatesFilter<"Document"> | string
    originalPath?: StringWithAggregatesFilter<"Document"> | string
    tempPath?: StringNullableWithAggregatesFilter<"Document"> | string | null
    finalPath?: StringNullableWithAggregatesFilter<"Document"> | string | null
    documentType?: StringWithAggregatesFilter<"Document"> | string
    isGenerated?: BoolNullableWithAggregatesFilter<"Document"> | boolean | null
    isCustomized?: BoolNullableWithAggregatesFilter<"Document"> | boolean | null
    isSent?: BoolNullableWithAggregatesFilter<"Document"> | boolean | null
    isPushed?: BoolNullableWithAggregatesFilter<"Document"> | boolean | null
    generatedAt?: DateTimeNullableWithAggregatesFilter<"Document"> | Date | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"Document"> | Date | string | null
    pushedAt?: DateTimeNullableWithAggregatesFilter<"Document"> | Date | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Document"> | Date | string | null
    lawyerId?: StringWithAggregatesFilter<"Document"> | string
  }

  export type LawyerWhereInput = {
    AND?: LawyerWhereInput | LawyerWhereInput[]
    OR?: LawyerWhereInput[]
    NOT?: LawyerWhereInput | LawyerWhereInput[]
    id?: StringFilter<"Lawyer"> | string
    pin?: StringFilter<"Lawyer"> | string
    lawFirm?: StringFilter<"Lawyer"> | string
    contactName?: StringFilter<"Lawyer"> | string
    phone?: StringFilter<"Lawyer"> | string
    email?: StringFilter<"Lawyer"> | string
    status?: StringNullableFilter<"Lawyer"> | string | null
    readyToGenerateDocuments?: BoolNullableFilter<"Lawyer"> | boolean | null
    readyToGenerateDocumentsSealed?: BoolNullableFilter<"Lawyer"> | boolean | null
    sendEmail?: BoolNullableFilter<"Lawyer"> | boolean | null
    sendEmailSealed?: BoolNullableFilter<"Lawyer"> | boolean | null
    pushToCentralRepository?: BoolNullableFilter<"Lawyer"> | boolean | null
    pushToCentralRepositorySealed?: BoolNullableFilter<"Lawyer"> | boolean | null
    readyToSend?: BoolNullableFilter<"Lawyer"> | boolean | null
    pinAddedToTOB?: BoolNullableFilter<"Lawyer"> | boolean | null
    customizedTOBPath?: StringNullableFilter<"Lawyer"> | string | null
    pinHyperlink?: StringNullableFilter<"Lawyer"> | string | null
    documentsSent?: BoolNullableFilter<"Lawyer"> | boolean | null
    emailSentAt?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    pushedToRepository?: BoolNullableFilter<"Lawyer"> | boolean | null
    repositoryPath?: StringNullableFilter<"Lawyer"> | string | null
    completedAt?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    followUpDueDate?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    followUpStatus?: StringNullableFilter<"Lawyer"> | string | null
    stackGroup?: StringNullableFilter<"Lawyer"> | string | null
    position?: IntNullableFilter<"Lawyer"> | number | null
    isActive?: BoolNullableFilter<"Lawyer"> | boolean | null
    isEditable?: BoolNullableFilter<"Lawyer"> | boolean | null
    isDraggable?: BoolNullableFilter<"Lawyer"> | boolean | null
    createdAt?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    lastModified?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    createdBy?: StringNullableFilter<"Lawyer"> | string | null
    customEmailSubject?: StringNullableFilter<"Lawyer"> | string | null
    customEmailContent?: StringNullableFilter<"Lawyer"> | string | null
    cardCollapsed?: BoolNullableFilter<"Lawyer"> | boolean | null
    documents?: DocumentListRelationFilter
    notes?: NoteListRelationFilter
  }

  export type LawyerOrderByWithRelationInput = {
    id?: SortOrder
    pin?: SortOrder
    lawFirm?: SortOrder
    contactName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    status?: SortOrderInput | SortOrder
    readyToGenerateDocuments?: SortOrderInput | SortOrder
    readyToGenerateDocumentsSealed?: SortOrderInput | SortOrder
    sendEmail?: SortOrderInput | SortOrder
    sendEmailSealed?: SortOrderInput | SortOrder
    pushToCentralRepository?: SortOrderInput | SortOrder
    pushToCentralRepositorySealed?: SortOrderInput | SortOrder
    readyToSend?: SortOrderInput | SortOrder
    pinAddedToTOB?: SortOrderInput | SortOrder
    customizedTOBPath?: SortOrderInput | SortOrder
    pinHyperlink?: SortOrderInput | SortOrder
    documentsSent?: SortOrderInput | SortOrder
    emailSentAt?: SortOrderInput | SortOrder
    pushedToRepository?: SortOrderInput | SortOrder
    repositoryPath?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    followUpDueDate?: SortOrderInput | SortOrder
    followUpStatus?: SortOrderInput | SortOrder
    stackGroup?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    isEditable?: SortOrderInput | SortOrder
    isDraggable?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    lastModified?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    customEmailSubject?: SortOrderInput | SortOrder
    customEmailContent?: SortOrderInput | SortOrder
    cardCollapsed?: SortOrderInput | SortOrder
    documents?: DocumentOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
  }

  export type LawyerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    pin?: string
    AND?: LawyerWhereInput | LawyerWhereInput[]
    OR?: LawyerWhereInput[]
    NOT?: LawyerWhereInput | LawyerWhereInput[]
    lawFirm?: StringFilter<"Lawyer"> | string
    contactName?: StringFilter<"Lawyer"> | string
    phone?: StringFilter<"Lawyer"> | string
    email?: StringFilter<"Lawyer"> | string
    status?: StringNullableFilter<"Lawyer"> | string | null
    readyToGenerateDocuments?: BoolNullableFilter<"Lawyer"> | boolean | null
    readyToGenerateDocumentsSealed?: BoolNullableFilter<"Lawyer"> | boolean | null
    sendEmail?: BoolNullableFilter<"Lawyer"> | boolean | null
    sendEmailSealed?: BoolNullableFilter<"Lawyer"> | boolean | null
    pushToCentralRepository?: BoolNullableFilter<"Lawyer"> | boolean | null
    pushToCentralRepositorySealed?: BoolNullableFilter<"Lawyer"> | boolean | null
    readyToSend?: BoolNullableFilter<"Lawyer"> | boolean | null
    pinAddedToTOB?: BoolNullableFilter<"Lawyer"> | boolean | null
    customizedTOBPath?: StringNullableFilter<"Lawyer"> | string | null
    pinHyperlink?: StringNullableFilter<"Lawyer"> | string | null
    documentsSent?: BoolNullableFilter<"Lawyer"> | boolean | null
    emailSentAt?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    pushedToRepository?: BoolNullableFilter<"Lawyer"> | boolean | null
    repositoryPath?: StringNullableFilter<"Lawyer"> | string | null
    completedAt?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    followUpDueDate?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    followUpStatus?: StringNullableFilter<"Lawyer"> | string | null
    stackGroup?: StringNullableFilter<"Lawyer"> | string | null
    position?: IntNullableFilter<"Lawyer"> | number | null
    isActive?: BoolNullableFilter<"Lawyer"> | boolean | null
    isEditable?: BoolNullableFilter<"Lawyer"> | boolean | null
    isDraggable?: BoolNullableFilter<"Lawyer"> | boolean | null
    createdAt?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    lastModified?: DateTimeNullableFilter<"Lawyer"> | Date | string | null
    createdBy?: StringNullableFilter<"Lawyer"> | string | null
    customEmailSubject?: StringNullableFilter<"Lawyer"> | string | null
    customEmailContent?: StringNullableFilter<"Lawyer"> | string | null
    cardCollapsed?: BoolNullableFilter<"Lawyer"> | boolean | null
    documents?: DocumentListRelationFilter
    notes?: NoteListRelationFilter
  }, "id" | "pin">

  export type LawyerOrderByWithAggregationInput = {
    id?: SortOrder
    pin?: SortOrder
    lawFirm?: SortOrder
    contactName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    status?: SortOrderInput | SortOrder
    readyToGenerateDocuments?: SortOrderInput | SortOrder
    readyToGenerateDocumentsSealed?: SortOrderInput | SortOrder
    sendEmail?: SortOrderInput | SortOrder
    sendEmailSealed?: SortOrderInput | SortOrder
    pushToCentralRepository?: SortOrderInput | SortOrder
    pushToCentralRepositorySealed?: SortOrderInput | SortOrder
    readyToSend?: SortOrderInput | SortOrder
    pinAddedToTOB?: SortOrderInput | SortOrder
    customizedTOBPath?: SortOrderInput | SortOrder
    pinHyperlink?: SortOrderInput | SortOrder
    documentsSent?: SortOrderInput | SortOrder
    emailSentAt?: SortOrderInput | SortOrder
    pushedToRepository?: SortOrderInput | SortOrder
    repositoryPath?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    followUpDueDate?: SortOrderInput | SortOrder
    followUpStatus?: SortOrderInput | SortOrder
    stackGroup?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    isEditable?: SortOrderInput | SortOrder
    isDraggable?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    lastModified?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    customEmailSubject?: SortOrderInput | SortOrder
    customEmailContent?: SortOrderInput | SortOrder
    cardCollapsed?: SortOrderInput | SortOrder
    _count?: LawyerCountOrderByAggregateInput
    _avg?: LawyerAvgOrderByAggregateInput
    _max?: LawyerMaxOrderByAggregateInput
    _min?: LawyerMinOrderByAggregateInput
    _sum?: LawyerSumOrderByAggregateInput
  }

  export type LawyerScalarWhereWithAggregatesInput = {
    AND?: LawyerScalarWhereWithAggregatesInput | LawyerScalarWhereWithAggregatesInput[]
    OR?: LawyerScalarWhereWithAggregatesInput[]
    NOT?: LawyerScalarWhereWithAggregatesInput | LawyerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lawyer"> | string
    pin?: StringWithAggregatesFilter<"Lawyer"> | string
    lawFirm?: StringWithAggregatesFilter<"Lawyer"> | string
    contactName?: StringWithAggregatesFilter<"Lawyer"> | string
    phone?: StringWithAggregatesFilter<"Lawyer"> | string
    email?: StringWithAggregatesFilter<"Lawyer"> | string
    status?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    readyToGenerateDocuments?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    readyToGenerateDocumentsSealed?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    sendEmail?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    sendEmailSealed?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    pushToCentralRepository?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    pushToCentralRepositorySealed?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    readyToSend?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    pinAddedToTOB?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    customizedTOBPath?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    pinHyperlink?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    documentsSent?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    emailSentAt?: DateTimeNullableWithAggregatesFilter<"Lawyer"> | Date | string | null
    pushedToRepository?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    repositoryPath?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Lawyer"> | Date | string | null
    followUpDueDate?: DateTimeNullableWithAggregatesFilter<"Lawyer"> | Date | string | null
    followUpStatus?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    stackGroup?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    position?: IntNullableWithAggregatesFilter<"Lawyer"> | number | null
    isActive?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    isEditable?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    isDraggable?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Lawyer"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Lawyer"> | Date | string | null
    lastModified?: DateTimeNullableWithAggregatesFilter<"Lawyer"> | Date | string | null
    createdBy?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    customEmailSubject?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    customEmailContent?: StringNullableWithAggregatesFilter<"Lawyer"> | string | null
    cardCollapsed?: BoolNullableWithAggregatesFilter<"Lawyer"> | boolean | null
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    text?: StringFilter<"Note"> | string
    createdAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    editedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    lawyerId?: StringFilter<"Note"> | string
    author?: StringNullableFilter<"Note"> | string | null
    lawyer?: XOR<LawyerScalarRelationFilter, LawyerWhereInput>
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    editedAt?: SortOrderInput | SortOrder
    lawyerId?: SortOrder
    author?: SortOrderInput | SortOrder
    lawyer?: LawyerOrderByWithRelationInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    text?: StringFilter<"Note"> | string
    createdAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    editedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    lawyerId?: StringFilter<"Note"> | string
    author?: StringNullableFilter<"Note"> | string | null
    lawyer?: XOR<LawyerScalarRelationFilter, LawyerWhereInput>
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    editedAt?: SortOrderInput | SortOrder
    lawyerId?: SortOrder
    author?: SortOrderInput | SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    text?: StringWithAggregatesFilter<"Note"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Note"> | Date | string | null
    editedAt?: DateTimeNullableWithAggregatesFilter<"Note"> | Date | string | null
    lawyerId?: StringWithAggregatesFilter<"Note"> | string
    author?: StringNullableWithAggregatesFilter<"Note"> | string | null
  }

  export type AuthVerificationTokenWhereInput = {
    AND?: AuthVerificationTokenWhereInput | AuthVerificationTokenWhereInput[]
    OR?: AuthVerificationTokenWhereInput[]
    NOT?: AuthVerificationTokenWhereInput | AuthVerificationTokenWhereInput[]
    id?: StringFilter<"AuthVerificationToken"> | string
    email?: StringFilter<"AuthVerificationToken"> | string
    pin?: StringFilter<"AuthVerificationToken"> | string
    method?: StringFilter<"AuthVerificationToken"> | string
    token?: StringFilter<"AuthVerificationToken"> | string
    used?: BoolFilter<"AuthVerificationToken"> | boolean
    createdAt?: DateTimeFilter<"AuthVerificationToken"> | Date | string
    expiresAt?: DateTimeFilter<"AuthVerificationToken"> | Date | string
  }

  export type AuthVerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    pin?: SortOrder
    method?: SortOrder
    token?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type AuthVerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuthVerificationTokenWhereInput | AuthVerificationTokenWhereInput[]
    OR?: AuthVerificationTokenWhereInput[]
    NOT?: AuthVerificationTokenWhereInput | AuthVerificationTokenWhereInput[]
    email?: StringFilter<"AuthVerificationToken"> | string
    pin?: StringFilter<"AuthVerificationToken"> | string
    method?: StringFilter<"AuthVerificationToken"> | string
    token?: StringFilter<"AuthVerificationToken"> | string
    used?: BoolFilter<"AuthVerificationToken"> | boolean
    createdAt?: DateTimeFilter<"AuthVerificationToken"> | Date | string
    expiresAt?: DateTimeFilter<"AuthVerificationToken"> | Date | string
  }, "id">

  export type AuthVerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    pin?: SortOrder
    method?: SortOrder
    token?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    _count?: AuthVerificationTokenCountOrderByAggregateInput
    _max?: AuthVerificationTokenMaxOrderByAggregateInput
    _min?: AuthVerificationTokenMinOrderByAggregateInput
  }

  export type AuthVerificationTokenScalarWhereWithAggregatesInput = {
    AND?: AuthVerificationTokenScalarWhereWithAggregatesInput | AuthVerificationTokenScalarWhereWithAggregatesInput[]
    OR?: AuthVerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: AuthVerificationTokenScalarWhereWithAggregatesInput | AuthVerificationTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuthVerificationToken"> | string
    email?: StringWithAggregatesFilter<"AuthVerificationToken"> | string
    pin?: StringWithAggregatesFilter<"AuthVerificationToken"> | string
    method?: StringWithAggregatesFilter<"AuthVerificationToken"> | string
    token?: StringWithAggregatesFilter<"AuthVerificationToken"> | string
    used?: BoolWithAggregatesFilter<"AuthVerificationToken"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AuthVerificationToken"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"AuthVerificationToken"> | Date | string
  }

  export type WebAuthnUserWhereInput = {
    AND?: WebAuthnUserWhereInput | WebAuthnUserWhereInput[]
    OR?: WebAuthnUserWhereInput[]
    NOT?: WebAuthnUserWhereInput | WebAuthnUserWhereInput[]
    id?: StringFilter<"WebAuthnUser"> | string
    email?: StringFilter<"WebAuthnUser"> | string
    name?: StringNullableFilter<"WebAuthnUser"> | string | null
    createdAt?: DateTimeFilter<"WebAuthnUser"> | Date | string
    credentials?: WebAuthnCredentialListRelationFilter
  }

  export type WebAuthnUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    credentials?: WebAuthnCredentialOrderByRelationAggregateInput
  }

  export type WebAuthnUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: WebAuthnUserWhereInput | WebAuthnUserWhereInput[]
    OR?: WebAuthnUserWhereInput[]
    NOT?: WebAuthnUserWhereInput | WebAuthnUserWhereInput[]
    name?: StringNullableFilter<"WebAuthnUser"> | string | null
    createdAt?: DateTimeFilter<"WebAuthnUser"> | Date | string
    credentials?: WebAuthnCredentialListRelationFilter
  }, "id" | "email">

  export type WebAuthnUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WebAuthnUserCountOrderByAggregateInput
    _max?: WebAuthnUserMaxOrderByAggregateInput
    _min?: WebAuthnUserMinOrderByAggregateInput
  }

  export type WebAuthnUserScalarWhereWithAggregatesInput = {
    AND?: WebAuthnUserScalarWhereWithAggregatesInput | WebAuthnUserScalarWhereWithAggregatesInput[]
    OR?: WebAuthnUserScalarWhereWithAggregatesInput[]
    NOT?: WebAuthnUserScalarWhereWithAggregatesInput | WebAuthnUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebAuthnUser"> | string
    email?: StringWithAggregatesFilter<"WebAuthnUser"> | string
    name?: StringNullableWithAggregatesFilter<"WebAuthnUser"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WebAuthnUser"> | Date | string
  }

  export type WebAuthnCredentialWhereInput = {
    AND?: WebAuthnCredentialWhereInput | WebAuthnCredentialWhereInput[]
    OR?: WebAuthnCredentialWhereInput[]
    NOT?: WebAuthnCredentialWhereInput | WebAuthnCredentialWhereInput[]
    id?: StringFilter<"WebAuthnCredential"> | string
    credentialId?: StringFilter<"WebAuthnCredential"> | string
    publicKey?: StringFilter<"WebAuthnCredential"> | string
    counter?: IntFilter<"WebAuthnCredential"> | number
    userId?: StringFilter<"WebAuthnCredential"> | string
    createdAt?: DateTimeFilter<"WebAuthnCredential"> | Date | string
    user?: XOR<WebAuthnUserScalarRelationFilter, WebAuthnUserWhereInput>
  }

  export type WebAuthnCredentialOrderByWithRelationInput = {
    id?: SortOrder
    credentialId?: SortOrder
    publicKey?: SortOrder
    counter?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: WebAuthnUserOrderByWithRelationInput
  }

  export type WebAuthnCredentialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    credentialId?: string
    AND?: WebAuthnCredentialWhereInput | WebAuthnCredentialWhereInput[]
    OR?: WebAuthnCredentialWhereInput[]
    NOT?: WebAuthnCredentialWhereInput | WebAuthnCredentialWhereInput[]
    publicKey?: StringFilter<"WebAuthnCredential"> | string
    counter?: IntFilter<"WebAuthnCredential"> | number
    userId?: StringFilter<"WebAuthnCredential"> | string
    createdAt?: DateTimeFilter<"WebAuthnCredential"> | Date | string
    user?: XOR<WebAuthnUserScalarRelationFilter, WebAuthnUserWhereInput>
  }, "id" | "credentialId">

  export type WebAuthnCredentialOrderByWithAggregationInput = {
    id?: SortOrder
    credentialId?: SortOrder
    publicKey?: SortOrder
    counter?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: WebAuthnCredentialCountOrderByAggregateInput
    _avg?: WebAuthnCredentialAvgOrderByAggregateInput
    _max?: WebAuthnCredentialMaxOrderByAggregateInput
    _min?: WebAuthnCredentialMinOrderByAggregateInput
    _sum?: WebAuthnCredentialSumOrderByAggregateInput
  }

  export type WebAuthnCredentialScalarWhereWithAggregatesInput = {
    AND?: WebAuthnCredentialScalarWhereWithAggregatesInput | WebAuthnCredentialScalarWhereWithAggregatesInput[]
    OR?: WebAuthnCredentialScalarWhereWithAggregatesInput[]
    NOT?: WebAuthnCredentialScalarWhereWithAggregatesInput | WebAuthnCredentialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebAuthnCredential"> | string
    credentialId?: StringWithAggregatesFilter<"WebAuthnCredential"> | string
    publicKey?: StringWithAggregatesFilter<"WebAuthnCredential"> | string
    counter?: IntWithAggregatesFilter<"WebAuthnCredential"> | number
    userId?: StringWithAggregatesFilter<"WebAuthnCredential"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WebAuthnCredential"> | Date | string
  }

  export type DocumentCreateInput = {
    id?: string
    filename: string
    originalPath: string
    tempPath?: string | null
    finalPath?: string | null
    documentType: string
    isGenerated?: boolean | null
    isCustomized?: boolean | null
    isSent?: boolean | null
    isPushed?: boolean | null
    generatedAt?: Date | string | null
    sentAt?: Date | string | null
    pushedAt?: Date | string | null
    createdAt?: Date | string | null
    lawyer: LawyerCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    filename: string
    originalPath: string
    tempPath?: string | null
    finalPath?: string | null
    documentType: string
    isGenerated?: boolean | null
    isCustomized?: boolean | null
    isSent?: boolean | null
    isPushed?: boolean | null
    generatedAt?: Date | string | null
    sentAt?: Date | string | null
    pushedAt?: Date | string | null
    createdAt?: Date | string | null
    lawyerId: string
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalPath?: StringFieldUpdateOperationsInput | string
    tempPath?: NullableStringFieldUpdateOperationsInput | string | null
    finalPath?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    isGenerated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCustomized?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isPushed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lawyer?: LawyerUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalPath?: StringFieldUpdateOperationsInput | string
    tempPath?: NullableStringFieldUpdateOperationsInput | string | null
    finalPath?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    isGenerated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCustomized?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isPushed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lawyerId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    filename: string
    originalPath: string
    tempPath?: string | null
    finalPath?: string | null
    documentType: string
    isGenerated?: boolean | null
    isCustomized?: boolean | null
    isSent?: boolean | null
    isPushed?: boolean | null
    generatedAt?: Date | string | null
    sentAt?: Date | string | null
    pushedAt?: Date | string | null
    createdAt?: Date | string | null
    lawyerId: string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalPath?: StringFieldUpdateOperationsInput | string
    tempPath?: NullableStringFieldUpdateOperationsInput | string | null
    finalPath?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    isGenerated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCustomized?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isPushed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalPath?: StringFieldUpdateOperationsInput | string
    tempPath?: NullableStringFieldUpdateOperationsInput | string | null
    finalPath?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    isGenerated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCustomized?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isPushed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lawyerId?: StringFieldUpdateOperationsInput | string
  }

  export type LawyerCreateInput = {
    id?: string
    pin: string
    lawFirm: string
    contactName: string
    phone: string
    email: string
    status?: string | null
    readyToGenerateDocuments?: boolean | null
    readyToGenerateDocumentsSealed?: boolean | null
    sendEmail?: boolean | null
    sendEmailSealed?: boolean | null
    pushToCentralRepository?: boolean | null
    pushToCentralRepositorySealed?: boolean | null
    readyToSend?: boolean | null
    pinAddedToTOB?: boolean | null
    customizedTOBPath?: string | null
    pinHyperlink?: string | null
    documentsSent?: boolean | null
    emailSentAt?: Date | string | null
    pushedToRepository?: boolean | null
    repositoryPath?: string | null
    completedAt?: Date | string | null
    followUpDueDate?: Date | string | null
    followUpStatus?: string | null
    stackGroup?: string | null
    position?: number | null
    isActive?: boolean | null
    isEditable?: boolean | null
    isDraggable?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    lastModified?: Date | string | null
    createdBy?: string | null
    customEmailSubject?: string | null
    customEmailContent?: string | null
    cardCollapsed?: boolean | null
    documents?: DocumentCreateNestedManyWithoutLawyerInput
    notes?: NoteCreateNestedManyWithoutLawyerInput
  }

  export type LawyerUncheckedCreateInput = {
    id?: string
    pin: string
    lawFirm: string
    contactName: string
    phone: string
    email: string
    status?: string | null
    readyToGenerateDocuments?: boolean | null
    readyToGenerateDocumentsSealed?: boolean | null
    sendEmail?: boolean | null
    sendEmailSealed?: boolean | null
    pushToCentralRepository?: boolean | null
    pushToCentralRepositorySealed?: boolean | null
    readyToSend?: boolean | null
    pinAddedToTOB?: boolean | null
    customizedTOBPath?: string | null
    pinHyperlink?: string | null
    documentsSent?: boolean | null
    emailSentAt?: Date | string | null
    pushedToRepository?: boolean | null
    repositoryPath?: string | null
    completedAt?: Date | string | null
    followUpDueDate?: Date | string | null
    followUpStatus?: string | null
    stackGroup?: string | null
    position?: number | null
    isActive?: boolean | null
    isEditable?: boolean | null
    isDraggable?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    lastModified?: Date | string | null
    createdBy?: string | null
    customEmailSubject?: string | null
    customEmailContent?: string | null
    cardCollapsed?: boolean | null
    documents?: DocumentUncheckedCreateNestedManyWithoutLawyerInput
    notes?: NoteUncheckedCreateNestedManyWithoutLawyerInput
  }

  export type LawyerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    lawFirm?: StringFieldUpdateOperationsInput | string
    contactName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    readyToGenerateDocuments?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToGenerateDocumentsSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmail?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmailSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepositorySealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToSend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pinAddedToTOB?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customizedTOBPath?: NullableStringFieldUpdateOperationsInput | string | null
    pinHyperlink?: NullableStringFieldUpdateOperationsInput | string | null
    documentsSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedToRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repositoryPath?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpStatus?: NullableStringFieldUpdateOperationsInput | string | null
    stackGroup?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isEditable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDraggable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailContent?: NullableStringFieldUpdateOperationsInput | string | null
    cardCollapsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    documents?: DocumentUpdateManyWithoutLawyerNestedInput
    notes?: NoteUpdateManyWithoutLawyerNestedInput
  }

  export type LawyerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    lawFirm?: StringFieldUpdateOperationsInput | string
    contactName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    readyToGenerateDocuments?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToGenerateDocumentsSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmail?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmailSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepositorySealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToSend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pinAddedToTOB?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customizedTOBPath?: NullableStringFieldUpdateOperationsInput | string | null
    pinHyperlink?: NullableStringFieldUpdateOperationsInput | string | null
    documentsSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedToRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repositoryPath?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpStatus?: NullableStringFieldUpdateOperationsInput | string | null
    stackGroup?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isEditable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDraggable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailContent?: NullableStringFieldUpdateOperationsInput | string | null
    cardCollapsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    documents?: DocumentUncheckedUpdateManyWithoutLawyerNestedInput
    notes?: NoteUncheckedUpdateManyWithoutLawyerNestedInput
  }

  export type LawyerCreateManyInput = {
    id?: string
    pin: string
    lawFirm: string
    contactName: string
    phone: string
    email: string
    status?: string | null
    readyToGenerateDocuments?: boolean | null
    readyToGenerateDocumentsSealed?: boolean | null
    sendEmail?: boolean | null
    sendEmailSealed?: boolean | null
    pushToCentralRepository?: boolean | null
    pushToCentralRepositorySealed?: boolean | null
    readyToSend?: boolean | null
    pinAddedToTOB?: boolean | null
    customizedTOBPath?: string | null
    pinHyperlink?: string | null
    documentsSent?: boolean | null
    emailSentAt?: Date | string | null
    pushedToRepository?: boolean | null
    repositoryPath?: string | null
    completedAt?: Date | string | null
    followUpDueDate?: Date | string | null
    followUpStatus?: string | null
    stackGroup?: string | null
    position?: number | null
    isActive?: boolean | null
    isEditable?: boolean | null
    isDraggable?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    lastModified?: Date | string | null
    createdBy?: string | null
    customEmailSubject?: string | null
    customEmailContent?: string | null
    cardCollapsed?: boolean | null
  }

  export type LawyerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    lawFirm?: StringFieldUpdateOperationsInput | string
    contactName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    readyToGenerateDocuments?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToGenerateDocumentsSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmail?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmailSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepositorySealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToSend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pinAddedToTOB?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customizedTOBPath?: NullableStringFieldUpdateOperationsInput | string | null
    pinHyperlink?: NullableStringFieldUpdateOperationsInput | string | null
    documentsSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedToRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repositoryPath?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpStatus?: NullableStringFieldUpdateOperationsInput | string | null
    stackGroup?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isEditable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDraggable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailContent?: NullableStringFieldUpdateOperationsInput | string | null
    cardCollapsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type LawyerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    lawFirm?: StringFieldUpdateOperationsInput | string
    contactName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    readyToGenerateDocuments?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToGenerateDocumentsSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmail?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmailSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepositorySealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToSend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pinAddedToTOB?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customizedTOBPath?: NullableStringFieldUpdateOperationsInput | string | null
    pinHyperlink?: NullableStringFieldUpdateOperationsInput | string | null
    documentsSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedToRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repositoryPath?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpStatus?: NullableStringFieldUpdateOperationsInput | string | null
    stackGroup?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isEditable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDraggable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailContent?: NullableStringFieldUpdateOperationsInput | string | null
    cardCollapsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type NoteCreateInput = {
    id?: string
    text: string
    createdAt?: Date | string | null
    editedAt?: Date | string | null
    author?: string | null
    lawyer: LawyerCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    text: string
    createdAt?: Date | string | null
    editedAt?: Date | string | null
    lawyerId: string
    author?: string | null
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    lawyer?: LawyerUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lawyerId?: StringFieldUpdateOperationsInput | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteCreateManyInput = {
    id?: string
    text: string
    createdAt?: Date | string | null
    editedAt?: Date | string | null
    lawyerId: string
    author?: string | null
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lawyerId?: StringFieldUpdateOperationsInput | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthVerificationTokenCreateInput = {
    id?: string
    email: string
    pin: string
    method: string
    token: string
    used?: boolean
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type AuthVerificationTokenUncheckedCreateInput = {
    id?: string
    email: string
    pin: string
    method: string
    token: string
    used?: boolean
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type AuthVerificationTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthVerificationTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthVerificationTokenCreateManyInput = {
    id?: string
    email: string
    pin: string
    method: string
    token: string
    used?: boolean
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type AuthVerificationTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthVerificationTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebAuthnUserCreateInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    credentials?: WebAuthnCredentialCreateNestedManyWithoutUserInput
  }

  export type WebAuthnUserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    credentials?: WebAuthnCredentialUncheckedCreateNestedManyWithoutUserInput
  }

  export type WebAuthnUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: WebAuthnCredentialUpdateManyWithoutUserNestedInput
  }

  export type WebAuthnUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: WebAuthnCredentialUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WebAuthnUserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
  }

  export type WebAuthnUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebAuthnUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebAuthnCredentialCreateInput = {
    id?: string
    credentialId: string
    publicKey: string
    counter: number
    createdAt?: Date | string
    user: WebAuthnUserCreateNestedOneWithoutCredentialsInput
  }

  export type WebAuthnCredentialUncheckedCreateInput = {
    id?: string
    credentialId: string
    publicKey: string
    counter: number
    userId: string
    createdAt?: Date | string
  }

  export type WebAuthnCredentialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: WebAuthnUserUpdateOneRequiredWithoutCredentialsNestedInput
  }

  export type WebAuthnCredentialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebAuthnCredentialCreateManyInput = {
    id?: string
    credentialId: string
    publicKey: string
    counter: number
    userId: string
    createdAt?: Date | string
  }

  export type WebAuthnCredentialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebAuthnCredentialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type LawyerScalarRelationFilter = {
    is?: LawyerWhereInput
    isNot?: LawyerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalPath?: SortOrder
    tempPath?: SortOrder
    finalPath?: SortOrder
    documentType?: SortOrder
    isGenerated?: SortOrder
    isCustomized?: SortOrder
    isSent?: SortOrder
    isPushed?: SortOrder
    generatedAt?: SortOrder
    sentAt?: SortOrder
    pushedAt?: SortOrder
    createdAt?: SortOrder
    lawyerId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalPath?: SortOrder
    tempPath?: SortOrder
    finalPath?: SortOrder
    documentType?: SortOrder
    isGenerated?: SortOrder
    isCustomized?: SortOrder
    isSent?: SortOrder
    isPushed?: SortOrder
    generatedAt?: SortOrder
    sentAt?: SortOrder
    pushedAt?: SortOrder
    createdAt?: SortOrder
    lawyerId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalPath?: SortOrder
    tempPath?: SortOrder
    finalPath?: SortOrder
    documentType?: SortOrder
    isGenerated?: SortOrder
    isCustomized?: SortOrder
    isSent?: SortOrder
    isPushed?: SortOrder
    generatedAt?: SortOrder
    sentAt?: SortOrder
    pushedAt?: SortOrder
    createdAt?: SortOrder
    lawyerId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LawyerCountOrderByAggregateInput = {
    id?: SortOrder
    pin?: SortOrder
    lawFirm?: SortOrder
    contactName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    status?: SortOrder
    readyToGenerateDocuments?: SortOrder
    readyToGenerateDocumentsSealed?: SortOrder
    sendEmail?: SortOrder
    sendEmailSealed?: SortOrder
    pushToCentralRepository?: SortOrder
    pushToCentralRepositorySealed?: SortOrder
    readyToSend?: SortOrder
    pinAddedToTOB?: SortOrder
    customizedTOBPath?: SortOrder
    pinHyperlink?: SortOrder
    documentsSent?: SortOrder
    emailSentAt?: SortOrder
    pushedToRepository?: SortOrder
    repositoryPath?: SortOrder
    completedAt?: SortOrder
    followUpDueDate?: SortOrder
    followUpStatus?: SortOrder
    stackGroup?: SortOrder
    position?: SortOrder
    isActive?: SortOrder
    isEditable?: SortOrder
    isDraggable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastModified?: SortOrder
    createdBy?: SortOrder
    customEmailSubject?: SortOrder
    customEmailContent?: SortOrder
    cardCollapsed?: SortOrder
  }

  export type LawyerAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type LawyerMaxOrderByAggregateInput = {
    id?: SortOrder
    pin?: SortOrder
    lawFirm?: SortOrder
    contactName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    status?: SortOrder
    readyToGenerateDocuments?: SortOrder
    readyToGenerateDocumentsSealed?: SortOrder
    sendEmail?: SortOrder
    sendEmailSealed?: SortOrder
    pushToCentralRepository?: SortOrder
    pushToCentralRepositorySealed?: SortOrder
    readyToSend?: SortOrder
    pinAddedToTOB?: SortOrder
    customizedTOBPath?: SortOrder
    pinHyperlink?: SortOrder
    documentsSent?: SortOrder
    emailSentAt?: SortOrder
    pushedToRepository?: SortOrder
    repositoryPath?: SortOrder
    completedAt?: SortOrder
    followUpDueDate?: SortOrder
    followUpStatus?: SortOrder
    stackGroup?: SortOrder
    position?: SortOrder
    isActive?: SortOrder
    isEditable?: SortOrder
    isDraggable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastModified?: SortOrder
    createdBy?: SortOrder
    customEmailSubject?: SortOrder
    customEmailContent?: SortOrder
    cardCollapsed?: SortOrder
  }

  export type LawyerMinOrderByAggregateInput = {
    id?: SortOrder
    pin?: SortOrder
    lawFirm?: SortOrder
    contactName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    status?: SortOrder
    readyToGenerateDocuments?: SortOrder
    readyToGenerateDocumentsSealed?: SortOrder
    sendEmail?: SortOrder
    sendEmailSealed?: SortOrder
    pushToCentralRepository?: SortOrder
    pushToCentralRepositorySealed?: SortOrder
    readyToSend?: SortOrder
    pinAddedToTOB?: SortOrder
    customizedTOBPath?: SortOrder
    pinHyperlink?: SortOrder
    documentsSent?: SortOrder
    emailSentAt?: SortOrder
    pushedToRepository?: SortOrder
    repositoryPath?: SortOrder
    completedAt?: SortOrder
    followUpDueDate?: SortOrder
    followUpStatus?: SortOrder
    stackGroup?: SortOrder
    position?: SortOrder
    isActive?: SortOrder
    isEditable?: SortOrder
    isDraggable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastModified?: SortOrder
    createdBy?: SortOrder
    customEmailSubject?: SortOrder
    customEmailContent?: SortOrder
    cardCollapsed?: SortOrder
  }

  export type LawyerSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
    lawyerId?: SortOrder
    author?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
    lawyerId?: SortOrder
    author?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
    lawyerId?: SortOrder
    author?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AuthVerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    pin?: SortOrder
    method?: SortOrder
    token?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type AuthVerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    pin?: SortOrder
    method?: SortOrder
    token?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type AuthVerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    pin?: SortOrder
    method?: SortOrder
    token?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type WebAuthnCredentialListRelationFilter = {
    every?: WebAuthnCredentialWhereInput
    some?: WebAuthnCredentialWhereInput
    none?: WebAuthnCredentialWhereInput
  }

  export type WebAuthnCredentialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebAuthnUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type WebAuthnUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type WebAuthnUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type WebAuthnUserScalarRelationFilter = {
    is?: WebAuthnUserWhereInput
    isNot?: WebAuthnUserWhereInput
  }

  export type WebAuthnCredentialCountOrderByAggregateInput = {
    id?: SortOrder
    credentialId?: SortOrder
    publicKey?: SortOrder
    counter?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type WebAuthnCredentialAvgOrderByAggregateInput = {
    counter?: SortOrder
  }

  export type WebAuthnCredentialMaxOrderByAggregateInput = {
    id?: SortOrder
    credentialId?: SortOrder
    publicKey?: SortOrder
    counter?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type WebAuthnCredentialMinOrderByAggregateInput = {
    id?: SortOrder
    credentialId?: SortOrder
    publicKey?: SortOrder
    counter?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type WebAuthnCredentialSumOrderByAggregateInput = {
    counter?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type LawyerCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<LawyerCreateWithoutDocumentsInput, LawyerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LawyerCreateOrConnectWithoutDocumentsInput
    connect?: LawyerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type LawyerUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<LawyerCreateWithoutDocumentsInput, LawyerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LawyerCreateOrConnectWithoutDocumentsInput
    upsert?: LawyerUpsertWithoutDocumentsInput
    connect?: LawyerWhereUniqueInput
    update?: XOR<XOR<LawyerUpdateToOneWithWhereWithoutDocumentsInput, LawyerUpdateWithoutDocumentsInput>, LawyerUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentCreateNestedManyWithoutLawyerInput = {
    create?: XOR<DocumentCreateWithoutLawyerInput, DocumentUncheckedCreateWithoutLawyerInput> | DocumentCreateWithoutLawyerInput[] | DocumentUncheckedCreateWithoutLawyerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLawyerInput | DocumentCreateOrConnectWithoutLawyerInput[]
    createMany?: DocumentCreateManyLawyerInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutLawyerInput = {
    create?: XOR<NoteCreateWithoutLawyerInput, NoteUncheckedCreateWithoutLawyerInput> | NoteCreateWithoutLawyerInput[] | NoteUncheckedCreateWithoutLawyerInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutLawyerInput | NoteCreateOrConnectWithoutLawyerInput[]
    createMany?: NoteCreateManyLawyerInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutLawyerInput = {
    create?: XOR<DocumentCreateWithoutLawyerInput, DocumentUncheckedCreateWithoutLawyerInput> | DocumentCreateWithoutLawyerInput[] | DocumentUncheckedCreateWithoutLawyerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLawyerInput | DocumentCreateOrConnectWithoutLawyerInput[]
    createMany?: DocumentCreateManyLawyerInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutLawyerInput = {
    create?: XOR<NoteCreateWithoutLawyerInput, NoteUncheckedCreateWithoutLawyerInput> | NoteCreateWithoutLawyerInput[] | NoteUncheckedCreateWithoutLawyerInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutLawyerInput | NoteCreateOrConnectWithoutLawyerInput[]
    createMany?: NoteCreateManyLawyerInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DocumentUpdateManyWithoutLawyerNestedInput = {
    create?: XOR<DocumentCreateWithoutLawyerInput, DocumentUncheckedCreateWithoutLawyerInput> | DocumentCreateWithoutLawyerInput[] | DocumentUncheckedCreateWithoutLawyerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLawyerInput | DocumentCreateOrConnectWithoutLawyerInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutLawyerInput | DocumentUpsertWithWhereUniqueWithoutLawyerInput[]
    createMany?: DocumentCreateManyLawyerInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutLawyerInput | DocumentUpdateWithWhereUniqueWithoutLawyerInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutLawyerInput | DocumentUpdateManyWithWhereWithoutLawyerInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutLawyerNestedInput = {
    create?: XOR<NoteCreateWithoutLawyerInput, NoteUncheckedCreateWithoutLawyerInput> | NoteCreateWithoutLawyerInput[] | NoteUncheckedCreateWithoutLawyerInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutLawyerInput | NoteCreateOrConnectWithoutLawyerInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutLawyerInput | NoteUpsertWithWhereUniqueWithoutLawyerInput[]
    createMany?: NoteCreateManyLawyerInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutLawyerInput | NoteUpdateWithWhereUniqueWithoutLawyerInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutLawyerInput | NoteUpdateManyWithWhereWithoutLawyerInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutLawyerNestedInput = {
    create?: XOR<DocumentCreateWithoutLawyerInput, DocumentUncheckedCreateWithoutLawyerInput> | DocumentCreateWithoutLawyerInput[] | DocumentUncheckedCreateWithoutLawyerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLawyerInput | DocumentCreateOrConnectWithoutLawyerInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutLawyerInput | DocumentUpsertWithWhereUniqueWithoutLawyerInput[]
    createMany?: DocumentCreateManyLawyerInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutLawyerInput | DocumentUpdateWithWhereUniqueWithoutLawyerInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutLawyerInput | DocumentUpdateManyWithWhereWithoutLawyerInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutLawyerNestedInput = {
    create?: XOR<NoteCreateWithoutLawyerInput, NoteUncheckedCreateWithoutLawyerInput> | NoteCreateWithoutLawyerInput[] | NoteUncheckedCreateWithoutLawyerInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutLawyerInput | NoteCreateOrConnectWithoutLawyerInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutLawyerInput | NoteUpsertWithWhereUniqueWithoutLawyerInput[]
    createMany?: NoteCreateManyLawyerInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutLawyerInput | NoteUpdateWithWhereUniqueWithoutLawyerInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutLawyerInput | NoteUpdateManyWithWhereWithoutLawyerInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type LawyerCreateNestedOneWithoutNotesInput = {
    create?: XOR<LawyerCreateWithoutNotesInput, LawyerUncheckedCreateWithoutNotesInput>
    connectOrCreate?: LawyerCreateOrConnectWithoutNotesInput
    connect?: LawyerWhereUniqueInput
  }

  export type LawyerUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<LawyerCreateWithoutNotesInput, LawyerUncheckedCreateWithoutNotesInput>
    connectOrCreate?: LawyerCreateOrConnectWithoutNotesInput
    upsert?: LawyerUpsertWithoutNotesInput
    connect?: LawyerWhereUniqueInput
    update?: XOR<XOR<LawyerUpdateToOneWithWhereWithoutNotesInput, LawyerUpdateWithoutNotesInput>, LawyerUncheckedUpdateWithoutNotesInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WebAuthnCredentialCreateNestedManyWithoutUserInput = {
    create?: XOR<WebAuthnCredentialCreateWithoutUserInput, WebAuthnCredentialUncheckedCreateWithoutUserInput> | WebAuthnCredentialCreateWithoutUserInput[] | WebAuthnCredentialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebAuthnCredentialCreateOrConnectWithoutUserInput | WebAuthnCredentialCreateOrConnectWithoutUserInput[]
    createMany?: WebAuthnCredentialCreateManyUserInputEnvelope
    connect?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
  }

  export type WebAuthnCredentialUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WebAuthnCredentialCreateWithoutUserInput, WebAuthnCredentialUncheckedCreateWithoutUserInput> | WebAuthnCredentialCreateWithoutUserInput[] | WebAuthnCredentialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebAuthnCredentialCreateOrConnectWithoutUserInput | WebAuthnCredentialCreateOrConnectWithoutUserInput[]
    createMany?: WebAuthnCredentialCreateManyUserInputEnvelope
    connect?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
  }

  export type WebAuthnCredentialUpdateManyWithoutUserNestedInput = {
    create?: XOR<WebAuthnCredentialCreateWithoutUserInput, WebAuthnCredentialUncheckedCreateWithoutUserInput> | WebAuthnCredentialCreateWithoutUserInput[] | WebAuthnCredentialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebAuthnCredentialCreateOrConnectWithoutUserInput | WebAuthnCredentialCreateOrConnectWithoutUserInput[]
    upsert?: WebAuthnCredentialUpsertWithWhereUniqueWithoutUserInput | WebAuthnCredentialUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WebAuthnCredentialCreateManyUserInputEnvelope
    set?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
    disconnect?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
    delete?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
    connect?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
    update?: WebAuthnCredentialUpdateWithWhereUniqueWithoutUserInput | WebAuthnCredentialUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WebAuthnCredentialUpdateManyWithWhereWithoutUserInput | WebAuthnCredentialUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WebAuthnCredentialScalarWhereInput | WebAuthnCredentialScalarWhereInput[]
  }

  export type WebAuthnCredentialUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WebAuthnCredentialCreateWithoutUserInput, WebAuthnCredentialUncheckedCreateWithoutUserInput> | WebAuthnCredentialCreateWithoutUserInput[] | WebAuthnCredentialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebAuthnCredentialCreateOrConnectWithoutUserInput | WebAuthnCredentialCreateOrConnectWithoutUserInput[]
    upsert?: WebAuthnCredentialUpsertWithWhereUniqueWithoutUserInput | WebAuthnCredentialUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WebAuthnCredentialCreateManyUserInputEnvelope
    set?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
    disconnect?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
    delete?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
    connect?: WebAuthnCredentialWhereUniqueInput | WebAuthnCredentialWhereUniqueInput[]
    update?: WebAuthnCredentialUpdateWithWhereUniqueWithoutUserInput | WebAuthnCredentialUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WebAuthnCredentialUpdateManyWithWhereWithoutUserInput | WebAuthnCredentialUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WebAuthnCredentialScalarWhereInput | WebAuthnCredentialScalarWhereInput[]
  }

  export type WebAuthnUserCreateNestedOneWithoutCredentialsInput = {
    create?: XOR<WebAuthnUserCreateWithoutCredentialsInput, WebAuthnUserUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: WebAuthnUserCreateOrConnectWithoutCredentialsInput
    connect?: WebAuthnUserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WebAuthnUserUpdateOneRequiredWithoutCredentialsNestedInput = {
    create?: XOR<WebAuthnUserCreateWithoutCredentialsInput, WebAuthnUserUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: WebAuthnUserCreateOrConnectWithoutCredentialsInput
    upsert?: WebAuthnUserUpsertWithoutCredentialsInput
    connect?: WebAuthnUserWhereUniqueInput
    update?: XOR<XOR<WebAuthnUserUpdateToOneWithWhereWithoutCredentialsInput, WebAuthnUserUpdateWithoutCredentialsInput>, WebAuthnUserUncheckedUpdateWithoutCredentialsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LawyerCreateWithoutDocumentsInput = {
    id?: string
    pin: string
    lawFirm: string
    contactName: string
    phone: string
    email: string
    status?: string | null
    readyToGenerateDocuments?: boolean | null
    readyToGenerateDocumentsSealed?: boolean | null
    sendEmail?: boolean | null
    sendEmailSealed?: boolean | null
    pushToCentralRepository?: boolean | null
    pushToCentralRepositorySealed?: boolean | null
    readyToSend?: boolean | null
    pinAddedToTOB?: boolean | null
    customizedTOBPath?: string | null
    pinHyperlink?: string | null
    documentsSent?: boolean | null
    emailSentAt?: Date | string | null
    pushedToRepository?: boolean | null
    repositoryPath?: string | null
    completedAt?: Date | string | null
    followUpDueDate?: Date | string | null
    followUpStatus?: string | null
    stackGroup?: string | null
    position?: number | null
    isActive?: boolean | null
    isEditable?: boolean | null
    isDraggable?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    lastModified?: Date | string | null
    createdBy?: string | null
    customEmailSubject?: string | null
    customEmailContent?: string | null
    cardCollapsed?: boolean | null
    notes?: NoteCreateNestedManyWithoutLawyerInput
  }

  export type LawyerUncheckedCreateWithoutDocumentsInput = {
    id?: string
    pin: string
    lawFirm: string
    contactName: string
    phone: string
    email: string
    status?: string | null
    readyToGenerateDocuments?: boolean | null
    readyToGenerateDocumentsSealed?: boolean | null
    sendEmail?: boolean | null
    sendEmailSealed?: boolean | null
    pushToCentralRepository?: boolean | null
    pushToCentralRepositorySealed?: boolean | null
    readyToSend?: boolean | null
    pinAddedToTOB?: boolean | null
    customizedTOBPath?: string | null
    pinHyperlink?: string | null
    documentsSent?: boolean | null
    emailSentAt?: Date | string | null
    pushedToRepository?: boolean | null
    repositoryPath?: string | null
    completedAt?: Date | string | null
    followUpDueDate?: Date | string | null
    followUpStatus?: string | null
    stackGroup?: string | null
    position?: number | null
    isActive?: boolean | null
    isEditable?: boolean | null
    isDraggable?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    lastModified?: Date | string | null
    createdBy?: string | null
    customEmailSubject?: string | null
    customEmailContent?: string | null
    cardCollapsed?: boolean | null
    notes?: NoteUncheckedCreateNestedManyWithoutLawyerInput
  }

  export type LawyerCreateOrConnectWithoutDocumentsInput = {
    where: LawyerWhereUniqueInput
    create: XOR<LawyerCreateWithoutDocumentsInput, LawyerUncheckedCreateWithoutDocumentsInput>
  }

  export type LawyerUpsertWithoutDocumentsInput = {
    update: XOR<LawyerUpdateWithoutDocumentsInput, LawyerUncheckedUpdateWithoutDocumentsInput>
    create: XOR<LawyerCreateWithoutDocumentsInput, LawyerUncheckedCreateWithoutDocumentsInput>
    where?: LawyerWhereInput
  }

  export type LawyerUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: LawyerWhereInput
    data: XOR<LawyerUpdateWithoutDocumentsInput, LawyerUncheckedUpdateWithoutDocumentsInput>
  }

  export type LawyerUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    lawFirm?: StringFieldUpdateOperationsInput | string
    contactName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    readyToGenerateDocuments?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToGenerateDocumentsSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmail?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmailSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepositorySealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToSend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pinAddedToTOB?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customizedTOBPath?: NullableStringFieldUpdateOperationsInput | string | null
    pinHyperlink?: NullableStringFieldUpdateOperationsInput | string | null
    documentsSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedToRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repositoryPath?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpStatus?: NullableStringFieldUpdateOperationsInput | string | null
    stackGroup?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isEditable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDraggable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailContent?: NullableStringFieldUpdateOperationsInput | string | null
    cardCollapsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notes?: NoteUpdateManyWithoutLawyerNestedInput
  }

  export type LawyerUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    lawFirm?: StringFieldUpdateOperationsInput | string
    contactName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    readyToGenerateDocuments?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToGenerateDocumentsSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmail?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmailSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepositorySealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToSend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pinAddedToTOB?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customizedTOBPath?: NullableStringFieldUpdateOperationsInput | string | null
    pinHyperlink?: NullableStringFieldUpdateOperationsInput | string | null
    documentsSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedToRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repositoryPath?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpStatus?: NullableStringFieldUpdateOperationsInput | string | null
    stackGroup?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isEditable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDraggable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailContent?: NullableStringFieldUpdateOperationsInput | string | null
    cardCollapsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notes?: NoteUncheckedUpdateManyWithoutLawyerNestedInput
  }

  export type DocumentCreateWithoutLawyerInput = {
    id?: string
    filename: string
    originalPath: string
    tempPath?: string | null
    finalPath?: string | null
    documentType: string
    isGenerated?: boolean | null
    isCustomized?: boolean | null
    isSent?: boolean | null
    isPushed?: boolean | null
    generatedAt?: Date | string | null
    sentAt?: Date | string | null
    pushedAt?: Date | string | null
    createdAt?: Date | string | null
  }

  export type DocumentUncheckedCreateWithoutLawyerInput = {
    id?: string
    filename: string
    originalPath: string
    tempPath?: string | null
    finalPath?: string | null
    documentType: string
    isGenerated?: boolean | null
    isCustomized?: boolean | null
    isSent?: boolean | null
    isPushed?: boolean | null
    generatedAt?: Date | string | null
    sentAt?: Date | string | null
    pushedAt?: Date | string | null
    createdAt?: Date | string | null
  }

  export type DocumentCreateOrConnectWithoutLawyerInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutLawyerInput, DocumentUncheckedCreateWithoutLawyerInput>
  }

  export type DocumentCreateManyLawyerInputEnvelope = {
    data: DocumentCreateManyLawyerInput | DocumentCreateManyLawyerInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutLawyerInput = {
    id?: string
    text: string
    createdAt?: Date | string | null
    editedAt?: Date | string | null
    author?: string | null
  }

  export type NoteUncheckedCreateWithoutLawyerInput = {
    id?: string
    text: string
    createdAt?: Date | string | null
    editedAt?: Date | string | null
    author?: string | null
  }

  export type NoteCreateOrConnectWithoutLawyerInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutLawyerInput, NoteUncheckedCreateWithoutLawyerInput>
  }

  export type NoteCreateManyLawyerInputEnvelope = {
    data: NoteCreateManyLawyerInput | NoteCreateManyLawyerInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithWhereUniqueWithoutLawyerInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutLawyerInput, DocumentUncheckedUpdateWithoutLawyerInput>
    create: XOR<DocumentCreateWithoutLawyerInput, DocumentUncheckedCreateWithoutLawyerInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutLawyerInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutLawyerInput, DocumentUncheckedUpdateWithoutLawyerInput>
  }

  export type DocumentUpdateManyWithWhereWithoutLawyerInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutLawyerInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    filename?: StringFilter<"Document"> | string
    originalPath?: StringFilter<"Document"> | string
    tempPath?: StringNullableFilter<"Document"> | string | null
    finalPath?: StringNullableFilter<"Document"> | string | null
    documentType?: StringFilter<"Document"> | string
    isGenerated?: BoolNullableFilter<"Document"> | boolean | null
    isCustomized?: BoolNullableFilter<"Document"> | boolean | null
    isSent?: BoolNullableFilter<"Document"> | boolean | null
    isPushed?: BoolNullableFilter<"Document"> | boolean | null
    generatedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    pushedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    lawyerId?: StringFilter<"Document"> | string
  }

  export type NoteUpsertWithWhereUniqueWithoutLawyerInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutLawyerInput, NoteUncheckedUpdateWithoutLawyerInput>
    create: XOR<NoteCreateWithoutLawyerInput, NoteUncheckedCreateWithoutLawyerInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutLawyerInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutLawyerInput, NoteUncheckedUpdateWithoutLawyerInput>
  }

  export type NoteUpdateManyWithWhereWithoutLawyerInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutLawyerInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: StringFilter<"Note"> | string
    text?: StringFilter<"Note"> | string
    createdAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    editedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    lawyerId?: StringFilter<"Note"> | string
    author?: StringNullableFilter<"Note"> | string | null
  }

  export type LawyerCreateWithoutNotesInput = {
    id?: string
    pin: string
    lawFirm: string
    contactName: string
    phone: string
    email: string
    status?: string | null
    readyToGenerateDocuments?: boolean | null
    readyToGenerateDocumentsSealed?: boolean | null
    sendEmail?: boolean | null
    sendEmailSealed?: boolean | null
    pushToCentralRepository?: boolean | null
    pushToCentralRepositorySealed?: boolean | null
    readyToSend?: boolean | null
    pinAddedToTOB?: boolean | null
    customizedTOBPath?: string | null
    pinHyperlink?: string | null
    documentsSent?: boolean | null
    emailSentAt?: Date | string | null
    pushedToRepository?: boolean | null
    repositoryPath?: string | null
    completedAt?: Date | string | null
    followUpDueDate?: Date | string | null
    followUpStatus?: string | null
    stackGroup?: string | null
    position?: number | null
    isActive?: boolean | null
    isEditable?: boolean | null
    isDraggable?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    lastModified?: Date | string | null
    createdBy?: string | null
    customEmailSubject?: string | null
    customEmailContent?: string | null
    cardCollapsed?: boolean | null
    documents?: DocumentCreateNestedManyWithoutLawyerInput
  }

  export type LawyerUncheckedCreateWithoutNotesInput = {
    id?: string
    pin: string
    lawFirm: string
    contactName: string
    phone: string
    email: string
    status?: string | null
    readyToGenerateDocuments?: boolean | null
    readyToGenerateDocumentsSealed?: boolean | null
    sendEmail?: boolean | null
    sendEmailSealed?: boolean | null
    pushToCentralRepository?: boolean | null
    pushToCentralRepositorySealed?: boolean | null
    readyToSend?: boolean | null
    pinAddedToTOB?: boolean | null
    customizedTOBPath?: string | null
    pinHyperlink?: string | null
    documentsSent?: boolean | null
    emailSentAt?: Date | string | null
    pushedToRepository?: boolean | null
    repositoryPath?: string | null
    completedAt?: Date | string | null
    followUpDueDate?: Date | string | null
    followUpStatus?: string | null
    stackGroup?: string | null
    position?: number | null
    isActive?: boolean | null
    isEditable?: boolean | null
    isDraggable?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    lastModified?: Date | string | null
    createdBy?: string | null
    customEmailSubject?: string | null
    customEmailContent?: string | null
    cardCollapsed?: boolean | null
    documents?: DocumentUncheckedCreateNestedManyWithoutLawyerInput
  }

  export type LawyerCreateOrConnectWithoutNotesInput = {
    where: LawyerWhereUniqueInput
    create: XOR<LawyerCreateWithoutNotesInput, LawyerUncheckedCreateWithoutNotesInput>
  }

  export type LawyerUpsertWithoutNotesInput = {
    update: XOR<LawyerUpdateWithoutNotesInput, LawyerUncheckedUpdateWithoutNotesInput>
    create: XOR<LawyerCreateWithoutNotesInput, LawyerUncheckedCreateWithoutNotesInput>
    where?: LawyerWhereInput
  }

  export type LawyerUpdateToOneWithWhereWithoutNotesInput = {
    where?: LawyerWhereInput
    data: XOR<LawyerUpdateWithoutNotesInput, LawyerUncheckedUpdateWithoutNotesInput>
  }

  export type LawyerUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    lawFirm?: StringFieldUpdateOperationsInput | string
    contactName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    readyToGenerateDocuments?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToGenerateDocumentsSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmail?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmailSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepositorySealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToSend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pinAddedToTOB?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customizedTOBPath?: NullableStringFieldUpdateOperationsInput | string | null
    pinHyperlink?: NullableStringFieldUpdateOperationsInput | string | null
    documentsSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedToRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repositoryPath?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpStatus?: NullableStringFieldUpdateOperationsInput | string | null
    stackGroup?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isEditable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDraggable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailContent?: NullableStringFieldUpdateOperationsInput | string | null
    cardCollapsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    documents?: DocumentUpdateManyWithoutLawyerNestedInput
  }

  export type LawyerUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    lawFirm?: StringFieldUpdateOperationsInput | string
    contactName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    readyToGenerateDocuments?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToGenerateDocumentsSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmail?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sendEmailSealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pushToCentralRepositorySealed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readyToSend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pinAddedToTOB?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customizedTOBPath?: NullableStringFieldUpdateOperationsInput | string | null
    pinHyperlink?: NullableStringFieldUpdateOperationsInput | string | null
    documentsSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedToRepository?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repositoryPath?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpDueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followUpStatus?: NullableStringFieldUpdateOperationsInput | string | null
    stackGroup?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isEditable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDraggable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    customEmailContent?: NullableStringFieldUpdateOperationsInput | string | null
    cardCollapsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    documents?: DocumentUncheckedUpdateManyWithoutLawyerNestedInput
  }

  export type WebAuthnCredentialCreateWithoutUserInput = {
    id?: string
    credentialId: string
    publicKey: string
    counter: number
    createdAt?: Date | string
  }

  export type WebAuthnCredentialUncheckedCreateWithoutUserInput = {
    id?: string
    credentialId: string
    publicKey: string
    counter: number
    createdAt?: Date | string
  }

  export type WebAuthnCredentialCreateOrConnectWithoutUserInput = {
    where: WebAuthnCredentialWhereUniqueInput
    create: XOR<WebAuthnCredentialCreateWithoutUserInput, WebAuthnCredentialUncheckedCreateWithoutUserInput>
  }

  export type WebAuthnCredentialCreateManyUserInputEnvelope = {
    data: WebAuthnCredentialCreateManyUserInput | WebAuthnCredentialCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WebAuthnCredentialUpsertWithWhereUniqueWithoutUserInput = {
    where: WebAuthnCredentialWhereUniqueInput
    update: XOR<WebAuthnCredentialUpdateWithoutUserInput, WebAuthnCredentialUncheckedUpdateWithoutUserInput>
    create: XOR<WebAuthnCredentialCreateWithoutUserInput, WebAuthnCredentialUncheckedCreateWithoutUserInput>
  }

  export type WebAuthnCredentialUpdateWithWhereUniqueWithoutUserInput = {
    where: WebAuthnCredentialWhereUniqueInput
    data: XOR<WebAuthnCredentialUpdateWithoutUserInput, WebAuthnCredentialUncheckedUpdateWithoutUserInput>
  }

  export type WebAuthnCredentialUpdateManyWithWhereWithoutUserInput = {
    where: WebAuthnCredentialScalarWhereInput
    data: XOR<WebAuthnCredentialUpdateManyMutationInput, WebAuthnCredentialUncheckedUpdateManyWithoutUserInput>
  }

  export type WebAuthnCredentialScalarWhereInput = {
    AND?: WebAuthnCredentialScalarWhereInput | WebAuthnCredentialScalarWhereInput[]
    OR?: WebAuthnCredentialScalarWhereInput[]
    NOT?: WebAuthnCredentialScalarWhereInput | WebAuthnCredentialScalarWhereInput[]
    id?: StringFilter<"WebAuthnCredential"> | string
    credentialId?: StringFilter<"WebAuthnCredential"> | string
    publicKey?: StringFilter<"WebAuthnCredential"> | string
    counter?: IntFilter<"WebAuthnCredential"> | number
    userId?: StringFilter<"WebAuthnCredential"> | string
    createdAt?: DateTimeFilter<"WebAuthnCredential"> | Date | string
  }

  export type WebAuthnUserCreateWithoutCredentialsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
  }

  export type WebAuthnUserUncheckedCreateWithoutCredentialsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
  }

  export type WebAuthnUserCreateOrConnectWithoutCredentialsInput = {
    where: WebAuthnUserWhereUniqueInput
    create: XOR<WebAuthnUserCreateWithoutCredentialsInput, WebAuthnUserUncheckedCreateWithoutCredentialsInput>
  }

  export type WebAuthnUserUpsertWithoutCredentialsInput = {
    update: XOR<WebAuthnUserUpdateWithoutCredentialsInput, WebAuthnUserUncheckedUpdateWithoutCredentialsInput>
    create: XOR<WebAuthnUserCreateWithoutCredentialsInput, WebAuthnUserUncheckedCreateWithoutCredentialsInput>
    where?: WebAuthnUserWhereInput
  }

  export type WebAuthnUserUpdateToOneWithWhereWithoutCredentialsInput = {
    where?: WebAuthnUserWhereInput
    data: XOR<WebAuthnUserUpdateWithoutCredentialsInput, WebAuthnUserUncheckedUpdateWithoutCredentialsInput>
  }

  export type WebAuthnUserUpdateWithoutCredentialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebAuthnUserUncheckedUpdateWithoutCredentialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyLawyerInput = {
    id?: string
    filename: string
    originalPath: string
    tempPath?: string | null
    finalPath?: string | null
    documentType: string
    isGenerated?: boolean | null
    isCustomized?: boolean | null
    isSent?: boolean | null
    isPushed?: boolean | null
    generatedAt?: Date | string | null
    sentAt?: Date | string | null
    pushedAt?: Date | string | null
    createdAt?: Date | string | null
  }

  export type NoteCreateManyLawyerInput = {
    id?: string
    text: string
    createdAt?: Date | string | null
    editedAt?: Date | string | null
    author?: string | null
  }

  export type DocumentUpdateWithoutLawyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalPath?: StringFieldUpdateOperationsInput | string
    tempPath?: NullableStringFieldUpdateOperationsInput | string | null
    finalPath?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    isGenerated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCustomized?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isPushed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DocumentUncheckedUpdateWithoutLawyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalPath?: StringFieldUpdateOperationsInput | string
    tempPath?: NullableStringFieldUpdateOperationsInput | string | null
    finalPath?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    isGenerated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCustomized?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isPushed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutLawyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalPath?: StringFieldUpdateOperationsInput | string
    tempPath?: NullableStringFieldUpdateOperationsInput | string | null
    finalPath?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    isGenerated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCustomized?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isSent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isPushed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pushedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NoteUpdateWithoutLawyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUncheckedUpdateWithoutLawyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUncheckedUpdateManyWithoutLawyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebAuthnCredentialCreateManyUserInput = {
    id?: string
    credentialId: string
    publicKey: string
    counter: number
    createdAt?: Date | string
  }

  export type WebAuthnCredentialUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebAuthnCredentialUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebAuthnCredentialUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}