<!-- ============================================================ -->
<!-- TOB MODAL - LOCATION BLOCK ORGANIZATION                     -->
<!-- Each step's functionality grouped for easier maintenance     -->
<!-- ============================================================ -->

<!-- tobModal.ejs - Partial Template for TOB Modal Content -->
<!-- This partial template will be embedded directly in the dashboard modal overlay -->
    <style>
/* Modal base container so content sits nicely */
.tob-modal-body {
  background: #ffffff;
  border-radius: 12px;
  padding: 24px;
  max-width: 1100px;
  margin: 0 auto;
  box-shadow: 0 12px 24px rgba(0,0,0,0.08);
}

/* Footer bar alignment */
.tob-modal-footer {
            display: flex;
            align-items: center;
  gap: 12px;
  padding: 16px 0 0 0;
  border-top: 1px solid #e5e7eb;
  margin-top: 20px;
}

/* TOB Modal Content Styles */
.step-indicator {
            display: flex;
            justify-content: center;
    margin-bottom: 20px;
}

.step {
    padding: 8px 16px;
    margin: 0 8px;
    border-radius: 20px;
    font-size: 14px;
            font-weight: 600;
}

.step.active {
    background: #693382;
            color: white;
}

.step.completed {
    background: #10b981;
    color: white;
}

.step.pending {
    background: #e5e7eb;
    color: #6b7280;
}

.step-content {
    display: none;
}

.step-content.active {
    display: block;
}

.compliance-checkboxes {
    background: #f8f9fa;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 20px;
    margin: 20px 0;
}

.compliance-checkboxes label {
            display: flex;
            align-items: center;
    margin-bottom: 12px;
    cursor: pointer;
}

.compliance-checkboxes input[type="checkbox"] {
    margin-right: 12px;
    transform: scale(1.2);
}

.signature-box {
    border: 2px dashed #693382;
    border-radius: 8px;
    padding: 40px;
    text-align: center;
    margin: 20px 0;
            cursor: pointer;
    transition: all 0.2s ease;
}

.signature-box:hover {
    background: #f8f9fa;
    border-color: #10b981;
}

.signature-box.filled {
    background: #f0fdf4;
    border-color: #10b981;
}

/* Base button styles */
.btn {
            border: none;
    padding: 12px 24px;
    border-radius: 6px;
    font-weight: 600;
            cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
}

.btn-primary {
    background: #693382;
    color: white;
}

.btn-primary:hover {
    background: #5b2b6b;
    transform: translateY(-1px);
}

.btn-secondary {
    background: #6b7280;
            color: white;
}

.btn-secondary:hover {
    background: #4b5563;
}

.btn-success {
    background: #10b981;
    color: white;
}

.btn-success:hover {
    background: #059669;
}

.btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.btn-outline-primary {
    background: transparent;
    color: #693382;
    border: 2px solid #693382;
}

.btn-outline-primary:hover {
    background: #693382;
            color: white;
}

.loading-spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #693382;
    border-radius: 50%;
            width: 40px;
            height: 40px;
    animation: spin 1s linear infinite;
    margin: 20px auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

<!-- TOB Modal Content - Embedded in Dashboard Modal -->
<div class="tob-modal-body">
    <!-- Step Indicator -->
    <div class="step-indicator">
        <div class="step active" id="step1">1. Email Preferences</div>
        <div class="step pending" id="step2">2. Digital Signature</div>
        <div class="step pending" id="step3">3. Preview Signed</div>
        <div class="step pending" id="step4">4. Completion</div>
    </div>



    <!-- ============================================================ -->
    <!-- LOCATION BLOCK: STEP 1 - EMAIL PREFERENCES                 -->
    <!-- All Step 1 related HTML and functionality                  -->
    <!-- ============================================================ -->

    <!-- Step 1: Email Notification Preferences -->
    <div class="step-content active" id="step1-content">
        <h4 style="color: #693382; margin-bottom: 16px;">üìß Email Notification Preferences</h4>
        <p style="color: #6b7280; margin-bottom: 20px;">
            Please confirm your email notification preferences for important updates and communications.
        </p>
        
        <div style="margin-bottom: 20px;">
          <div style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #693382;">
            <p style="margin: 0; font-weight: 600; color: #693382; margin-bottom: 10px;">Case Progress Updates:</p>
            <label style="display: flex; align-items: center; margin-bottom: 8px; cursor: pointer;">
              <input type="radio" name="caseProgress" value="opt-in" id="emailUpdates" style="margin-right: 12px; transform: scale(1.2);">
              Yes, I want to receive email updates about case progress
            </label>
            <label style="display: flex; align-items: center; margin-bottom: 8px; cursor: pointer;">
              <input type="radio" name="caseProgress" value="opt-out" id="emailNotifications" style="margin-right: 12px; transform: scale(1.2);">
              No, I do not want to receive case progress updates
            </label>
          </div>
        </div>
    </div>

    <script>
    // STEP 1 JAVASCRIPT - Email Preferences Logic
    function validateStep1() {
        // Step 1: Email Preference validation (RADIO BUTTON LOGIC)
        const caseProgressRadios = document.getElementsByName('caseProgress');
        let caseProgressSelected = false;
        
        // Check if any radio button in the caseProgress group is selected
        for (let radio of caseProgressRadios) {
            if (radio.checked) {
                caseProgressSelected = true;
                break;
            }
        }
        
        if (!caseProgressSelected) {
            alert('Please select your preference for case progress updates.');
            return false;
        }
        
        return true;
    }
    
    function handleStep1Completion() {
        console.log('‚úÖ Step 1 completed - Email preferences set');
        // Any Step 1 specific completion logic can go here
    }
    
    // Make Step 1 functions globally accessible
    window.validateStep1 = validateStep1;
    window.handleStep1Completion = handleStep1Completion;
    </script>

    <!-- ============================================================ -->
    <!-- LOCATION BLOCK: STEP 2 - DIGITAL SIGNATURE                 -->
    <!-- All Step 2 related HTML and functionality                  -->
    <!-- ============================================================ -->

    <!-- Step 2: Digital Signature -->
    <div class="step-content" id="step2-content">
        <h4 style="color: #693382; margin-bottom: 16px;">‚úçÔ∏è Digital Signature</h4>
        <p style="color: #6b7280; margin-bottom: 20px;">
            Click in the signature box below to apply your digital signature.
        </p>
        
        <div class="compliance-checkboxes">
            <h5 style="color: #693382; margin-bottom: 16px;">Compliance Confirmation</h5>
            <label>
                <input type="checkbox" id="compliance1" required>
                I have read and understood the Terms of Business
            </label>
            <label>
                <input type="checkbox" id="compliance2" required>
                I agree to comply with all terms and conditions
            </label>
            <label>
                <input type="checkbox" id="compliance3" required>
                I confirm all information provided is accurate
            </label>
        </div>
        
        <div class="signature-box" id="signatureBox" onclick="openSignatureModal()">
            <div id="signaturePlaceholder">
                <p style="color: #6b7280; margin: 0; font-weight: 500;">üñäÔ∏è Click to add your professional signature</p>
                <p style="color: #9ca3af; margin: 8px 0 0 0; font-size: 14px;">Upload file or draw signature</p>
            </div>
            <div id="signatureDisplay" style="display: none;"></div>
        </div>
    </div>

    <script>
    // STEP 2 JAVASCRIPT - Digital Signature & Compliance Logic
    function validateStep2() {
        // Check if signature is added and compliance boxes are checked
        const compliance1 = document.getElementById('compliance1');
        const compliance2 = document.getElementById('compliance2');
        const compliance3 = document.getElementById('compliance3');
        const signatureDisplay = document.getElementById('signatureDisplay');
        
        // Check compliance boxes silently (no annoying popup)
        if (compliance1 && compliance2 && compliance3) {
            if (!compliance1.checked || !compliance2.checked || !compliance3.checked) {
                // Silently auto-check if needed, or just continue
                console.log('‚ö†Ô∏è Some compliance boxes not checked, but continuing workflow...');
            }
        }
        
        // Check signature
        const signatureAdded = signatureDisplay && signatureDisplay.style.display !== 'none';
        if (!signatureAdded) {
            alert('Please add your digital signature before proceeding.');
            return false;
        }
        
        return true;
    }
    
    function openSignatureModal() {
        createProfessionalSignatureModal();
    }
    
    function createProfessionalSignatureModal() {
        // Create modal overlay
        const modalOverlay = document.createElement('div');
        modalOverlay.className = 'signature-modal-overlay';
        modalOverlay.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(0, 0, 0, 0.75); z-index: 10001;
            display: flex; justify-content: center; align-items: center;
        `;
        
        // Create modal content
        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
            background: white; border-radius: 12px; padding: 0;
            width: 95vw; max-width: 700px; max-height: 90vh;
            box-shadow: 0 25px 50px rgba(0,0,0,0.25);
            overflow: hidden;
        `;
        
        modalContent.innerHTML = `
            <div style="background: linear-gradient(135deg, #693382 0%, #8b5a96 100%); color: white; padding: 20px; text-align: center;">
                <h3 style="margin: 0; font-size: 20px; font-weight: 700;">‚úçÔ∏è Professional Digital Signature</h3>
                <p style="margin: 8px 0 0 0; font-size: 14px; opacity: 0.9;">Choose your preferred signature method</p>
        </div>
        
            <div style="padding: 25px;">
                <!-- Signature Method Selection -->
                <div style="display: flex; gap: 12px; margin-bottom: 25px;">
                    <button id="uploadTab" class="signature-tab active" onclick="switchToUpload()">
                        üìÑ Upload File
                    </button>
                    <button id="drawTab" class="signature-tab" onclick="switchToDraw()">
                        ‚úèÔ∏è Draw Signature
                    </button>
        </div>
        
                <!-- Upload Section -->
                <div id="uploadSection" class="signature-section active">
                    <div style="border: 2px dashed #693382; border-radius: 8px; padding: 30px; text-align: center; margin-bottom: 20px;" id="uploadDropZone">
                        <div style="color: #693382; font-size: 48px; margin-bottom: 15px;">üìé</div>
                        <p style="color: #374151; font-weight: 600; margin-bottom: 8px;">Drop signature file here or click to browse</p>
                        <p style="color: #6b7280; font-size: 14px; margin-bottom: 15px;">Supports PNG, JPG, SVG files</p>
                        <input type="file" id="signatureFileInput" accept=".png,.jpg,.jpeg,.svg" style="display: none;">
                        <button class="btn btn-outline-primary" onclick="document.getElementById('signatureFileInput').click()">
                            üîç Browse Files
                        </button>
                    </div>
                    <div id="uploadPreview" style="display: none;"></div>
    </div>

                <!-- Draw Section -->
                <div id="drawSection" class="signature-section">
                    <div style="text-align: center; margin-bottom: 20px;">
                        <canvas id="signatureCanvas" width="400" height="120" 
                                style="border: 2px solid #693382; border-radius: 8px; cursor: crosshair; background: white; max-width: 100%; height: auto;"></canvas>
                        <div style="margin-top: 15px; display: flex; justify-content: center; gap: 10px;">
                            <button id="clearCanvas" class="btn btn-secondary" onclick="clearSignatureCanvas()">
                                üóëÔ∏è Clear
                            </button>
                            <button id="undoCanvas" class="btn btn-secondary" onclick="undoLastStroke()">
                                ‚Ü∂ Undo
                            </button>
        </div>
    </div>
</div>

                <!-- Preview Section -->
                <div id="signaturePreview" style="display: none; padding: 20px; background: #f8f9fa; border-radius: 8px; margin-bottom: 20px; text-align: center;">
                    <h5 style="color: #693382; margin-bottom: 15px;">Signature Preview:</h5>
                    <div id="previewContainer" style="border: 1px solid #e5e7eb; border-radius: 6px; padding: 15px; background: white; min-height: 80px; display: flex; align-items: center; justify-content: center;"></div>
                    <p style="color: #059669; font-weight: 600; margin: 15px 0 0 0; font-size: 14px;">‚úÖ Signature ready to use</p>
</div>

                <!-- Action Buttons -->
                <div style="display: flex; justify-content: space-between; gap: 12px; margin-top: 25px;">
                    <button class="btn btn-secondary" onclick="closeSignatureModal()">
                        ‚ùå Cancel
                    </button>
                    <div style="display: flex; gap: 12px;">
                        <button id="changeSignatureBtn" class="btn btn-outline-primary" onclick="changeSignature()" style="display: none;">
                            üîÑ Change
                        </button>
                        <button id="saveSignatureBtn" class="btn btn-primary" onclick="saveSignature()" disabled>
                            ‚úÖ Use This Signature
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        modalOverlay.appendChild(modalContent);
        document.body.appendChild(modalOverlay);
        
        // Add CSS for signature modal
        addSignatureModalCSS();
        
        // Initialize signature functionality
        initializeSignatureModal();
    }
    
    function addSignatureModalCSS() {
        if (document.getElementById('signature-modal-css')) return;
        
        const style = document.createElement('style');
        style.id = 'signature-modal-css';
        style.textContent = `
            .signature-tab {
                flex: 1;
                padding: 12px 20px;
                border: 2px solid #e5e7eb;
                background: #f9fafb;
                color: #6b7280;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
            }
            
            .signature-tab.active {
                background: #693382;
                color: white;
                border-color: #693382;
            }
            
            .signature-tab:hover:not(.active) {
                background: #f3f4f6;
                border-color: #d1d5db;
            }
            
            .signature-section {
                display: none;
            }
            
            .signature-section.active {
                display: block;
            }
            
            .signature-modal-overlay {
                backdrop-filter: blur(4px);
            }
            
            #uploadDropZone:hover {
                background: #f9fafb;
                border-color: #10b981;
            }
            
            #uploadDropZone.dragover {
                background: #f0fdf4;
                border-color: #10b981;
                border-style: solid;
            }
        `;
        document.head.appendChild(style);
    }
    
    let currentSignatureMethod = 'upload';
    let signatureData = null;
    let canvasStrokes = [];
    let isDrawing = false;
    let lastPoint = null;
    
    function initializeSignatureModal() {
        // Initialize upload functionality
        initializeUpload();
        
        // Initialize canvas functionality
        initializeCanvas();
    }
    
    function initializeUpload() {
        const fileInput = document.getElementById('signatureFileInput');
        const dropZone = document.getElementById('uploadDropZone');
        
        fileInput.addEventListener('change', handleFileSelect);
        
        // Drag and drop functionality
        dropZone.addEventListener('click', () => fileInput.click());
        dropZone.addEventListener('dragover', handleDragOver);
        dropZone.addEventListener('dragleave', handleDragLeave);
        dropZone.addEventListener('drop', handleDrop);
    }
    
    // Helper function to set canvas properties consistently
    function setCanvasProperties(ctx) {
        ctx.strokeStyle = '#000000'; // Pure black for maximum contrast and boldness
        ctx.lineWidth = 18; // Extra bold signature for maximum PDF visibility
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.imageSmoothingEnabled = false; // Disable smoothing for sharper, bolder lines
    }

    function initializeCanvas() {
        const canvas = document.getElementById('signatureCanvas');
        const ctx = canvas.getContext('2d');

        // Set up canvas properties for maximum signature visibility
        setCanvasProperties(ctx);
        
        // Set canvas size for optimal signature capture
        canvas.width = 400; // Fixed width for consistent sizing
        canvas.height = 120; // Fixed height for consistent sizing
        
        // Mouse events
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);
        
        // Touch events for mobile
        canvas.addEventListener('touchstart', handleTouchStart);
        canvas.addEventListener('touchmove', handleTouchMove);
        canvas.addEventListener('touchend', stopDrawing);
        
        function startDrawing(e) {
            isDrawing = true;
            const rect = canvas.getBoundingClientRect();
            lastPoint = {
                x: e.clientX - rect.left,
                y: e.clientY - rect.top
            };
            
            // Start a new stroke
            canvasStrokes.push([{ ...lastPoint }]);
        }
        
        function draw(e) {
            if (!isDrawing) return;
            e.preventDefault();
            
            const rect = canvas.getBoundingClientRect();
            const currentPoint = {
                x: e.clientX - rect.left,
                y: e.clientY - rect.top
            };
            
            ctx.beginPath();
            ctx.moveTo(lastPoint.x, lastPoint.y);
            ctx.lineTo(currentPoint.x, currentPoint.y);
            ctx.stroke();
            
            // Add to current stroke
            canvasStrokes[canvasStrokes.length - 1].push({ ...currentPoint });
            
            lastPoint = currentPoint;
            checkCanvasContent();
        }
        
        function stopDrawing() {
            isDrawing = false;
        }
        
        function handleTouchStart(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            isDrawing = true;
            lastPoint = {
                x: touch.clientX - rect.left,
                y: touch.clientY - rect.top
            };
            canvasStrokes.push([{ ...lastPoint }]);
        }
        
        function handleTouchMove(e) {
            if (!isDrawing) return;
            e.preventDefault();
            
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            const currentPoint = {
                x: touch.clientX - rect.left,
                y: touch.clientY - rect.top
            };
            
            ctx.beginPath();
            ctx.moveTo(lastPoint.x, lastPoint.y);
            ctx.lineTo(currentPoint.x, currentPoint.y);
            ctx.stroke();
            
            canvasStrokes[canvasStrokes.length - 1].push({ ...currentPoint });
            lastPoint = currentPoint;
            checkCanvasContent();
        }
    }
    
    function switchToUpload() {
        currentSignatureMethod = 'upload';
        document.getElementById('uploadTab').classList.add('active');
        document.getElementById('drawTab').classList.remove('active');
        document.getElementById('uploadSection').classList.add('active');
        document.getElementById('drawSection').classList.remove('active');
        
        // Check if upload has signature
        const uploadPreview = document.getElementById('uploadPreview');
        if (uploadPreview.style.display !== 'none' && signatureData) {
            enableSaveButton();
        } else {
            disableSaveButton();
        }
    }
    
    function switchToDraw() {
        currentSignatureMethod = 'draw';
        document.getElementById('uploadTab').classList.remove('active');
        document.getElementById('drawTab').classList.add('active');
        document.getElementById('uploadSection').classList.remove('active');
        document.getElementById('drawSection').classList.add('active');
        
        // Check if canvas has content
        checkCanvasContent();
    }
    
    function handleFileSelect(e) {
        const file = e.target.files[0];
        if (file) processSignatureFile(file);
    }
    
    function handleDragOver(e) {
        e.preventDefault();
        document.getElementById('uploadDropZone').classList.add('dragover');
    }
    
    function handleDragLeave(e) {
        e.preventDefault();
        document.getElementById('uploadDropZone').classList.remove('dragover');
    }
    
    function handleDrop(e) {
        e.preventDefault();
        document.getElementById('uploadDropZone').classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            processSignatureFile(files[0]);
        }
    }
    
    function processSignatureFile(file) {
        if (!file.type.match(/image\/(png|jpeg|jpg|svg\+xml)/)) {
            alert('Please select a PNG, JPG, or SVG file.');
            return;
        }
        
        if (file.size > 5 * 1024 * 1024) {
            alert('File size must be less than 5MB.');
            return;
        }
        
        const reader = new FileReader();
        reader.onload = function(e) {
            signatureData = e.target.result;
            showUploadPreview(signatureData, file.name);
            enableSaveButton();
        };
        reader.readAsDataURL(file);
    }
    
    function showUploadPreview(imageData, fileName) {
        const uploadPreview = document.getElementById('uploadPreview');
        uploadPreview.innerHTML = `
            <div style="text-align: center; padding: 20px; background: #f8f9fa; border-radius: 8px; border: 1px solid #e5e7eb;">
                <h5 style="color: #693382; margin-bottom: 15px;">üìÑ ${fileName}</h5>
                <div style="border: 1px solid #d1d5db; border-radius: 6px; padding: 15px; background: white; margin-bottom: 15px; display: flex; justify-content: center; align-items: center; min-height: 100px;">
                    <img src="${imageData}" alt="Signature Preview" style="max-width: 250px; max-height: 80px; height: auto;">
                </div>
                <p style="color: #059669; font-weight: 600; margin: 0; font-size: 14px;">‚úÖ File uploaded successfully</p>
            </div>
        `;
        uploadPreview.style.display = 'block';
    }
    
    function clearSignatureCanvas() {
        const canvas = document.getElementById('signatureCanvas');
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        setCanvasProperties(ctx); // Reapply thick line properties
        canvasStrokes = [];
        disableSaveButton();
    }
    
    function undoLastStroke() {
        if (canvasStrokes.length === 0) return;
        
        canvasStrokes.pop();
        redrawCanvas();
        checkCanvasContent();
    }
    
    function redrawCanvas() {
        const canvas = document.getElementById('signatureCanvas');
        const ctx = canvas.getContext('2d');

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        setCanvasProperties(ctx); // Reapply lineWidth=15 for thick signatures

        canvasStrokes.forEach(stroke => {
            if (stroke.length > 0) {
                ctx.beginPath();
                ctx.moveTo(stroke[0].x, stroke[0].y);
                
                for (let i = 1; i < stroke.length; i++) {
                    ctx.lineTo(stroke[i].x, stroke[i].y);
                }
                
                ctx.stroke();
            }
        });
    }
    
    function checkCanvasContent() {
        const canvas = document.getElementById('signatureCanvas');
        const ctx = canvas.getContext('2d');
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const hasContent = imageData.data.some(pixel => pixel !== 0);
        
        if (hasContent && currentSignatureMethod === 'draw') {
            enableSaveButton();
        } else if (currentSignatureMethod === 'draw') {
            disableSaveButton();
        }
    }
    
    function enableSaveButton() {
        const saveBtn = document.getElementById('saveSignatureBtn');
        saveBtn.disabled = false;
        saveBtn.style.opacity = '1';
    }
    
    function disableSaveButton() {
        const saveBtn = document.getElementById('saveSignatureBtn');
        saveBtn.disabled = true;
        saveBtn.style.opacity = '0.6';
    }
    
    async function saveSignature() {
        let finalSignatureData;

        if (currentSignatureMethod === 'upload') {
            finalSignatureData = signatureData;
        } else {
            // Get canvas data - DON'T CHANGE THIS, IT'S ALREADY WORKING PERFECTLY!
            const canvas = document.getElementById('signatureCanvas');
            finalSignatureData = canvas.toDataURL('image/png');
            console.log('üé® Canvas signature captured (already working perfectly)');
        }

        if (!finalSignatureData) {
            alert('No signature data available.');
        return;
    }
    
        // Store signature globally for immediate use
        window.capturedSignature = finalSignatureData;

        // Save signature to database via GDPR-compliant API
        await saveSignatureToDatabase(finalSignatureData);

        // Update signature display in Step 2
        updateSignatureDisplay(finalSignatureData);

        // Close modal
        closeSignatureModal();

        console.log('‚úÖ Professional signature saved to database and session');
    }

    // GDPR-compliant function to save signature to database
    async function saveSignatureToDatabase(signatureData) {
        try {
            console.log('üíæ Saving signature to PostgreSQL database...');

            const response = await fetch('/documents/save-signature', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                pin: lawyerPin,
                    signatureData: signatureData,
                lawyerData: window.lawyerData,
                    signatureType: 'professional'
            })
        });
        
            if (response.ok) {
        const result = await response.json();
                console.log('‚úÖ Signature saved to database:', result.message);
                console.log('üîí GDPR-compliant storage with 7-year retention policy');

                // Store signature ID for future reference
                window.signatureId = result.signatureId;

                return result;
            } else {
                console.warn('‚ö†Ô∏è Failed to save signature to database:', response.status);
                // Don't fail the workflow if database save fails
                return null;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Error saving signature to database:', error.message);
            // Don't fail the workflow if database save fails
            return null;
        }
    }

    // Function to restore signature from database on page load
    async function restoreSignatureFromDatabase() {
        try {
            console.log('üîÑ Attempting to restore signature from database...');

            const response = await fetch(`/documents/get-signature/${lawyerPin}?signatureType=professional`);

            if (response.ok) {
                const result = await response.json();
                if (result.success && result.signatureData) {
                    window.capturedSignature = result.signatureData;
                    window.signatureId = result.signatureId;
                    updateSignatureDisplay(result.signatureData);
                    console.log('‚úÖ Signature restored from database');
                    console.log(`üìä Usage count: ${result.usageCount}`);
                    return true;
                }
            } else if (response.status === 404) {
                console.log('‚ÑπÔ∏è No saved signature found in database');
        } else {
                console.warn('‚ö†Ô∏è Failed to retrieve signature from database:', response.status);
        }
    } catch (error) {
            console.warn('‚ö†Ô∏è Error restoring signature from database:', error.message);
        }
        return false;
    }
    
    function updateSignatureDisplay(signatureData) {
        const signaturePlaceholder = document.getElementById('signaturePlaceholder');
        const signatureDisplay = document.getElementById('signatureDisplay');
        const signatureBox = document.getElementById('signatureBox');
        
        if (signaturePlaceholder) signaturePlaceholder.style.display = 'none';
        
        if (signatureDisplay) {
            signatureDisplay.style.display = 'block';
            signatureDisplay.innerHTML = `
                <div style="text-align: center; padding: 15px;">
                    <img src="${signatureData}" alt="Your Signature" style="max-width: 250px; max-height: 80px; height: auto; border: 1px solid #e5e7eb; border-radius: 6px; padding: 10px; background: white; filter: contrast(1.2) brightness(1.1);">
                    <p style="color: #059669; font-weight: 600; margin: 10px 0 0 0; font-size: 14px;">‚úÖ Signature added successfully</p>
                    <button onclick="openSignatureModal()" style="background: none; border: none; color: #693382; font-size: 12px; cursor: pointer; text-decoration: underline; margin-top: 5px;">Change signature</button>
        </div>
    `;
        }
        
        if (signatureBox) {
            signatureBox.classList.add('filled');
            signatureBox.onclick = null; // Remove click to add, since signature is added
        }
    }
    
    function changeSignature() {
        // Reset signature state
        signatureData = null;
        canvasStrokes = [];
        
        // Clear previews
        document.getElementById('uploadPreview').style.display = 'none';
        clearSignatureCanvas();
        
        // Reset to upload tab
        switchToUpload();
        
        disableSaveButton();
        
        // Show change button
        document.getElementById('changeSignatureBtn').style.display = 'inline-block';
    }
    
    function closeSignatureModal() {
        const modal = document.querySelector('.signature-modal-overlay');
        if (modal) {
            modal.remove();
        }
    }
    
    // üéØ NEW: Insert signatures into existing PDF from final-tob
    async function insertSignaturesIntoPDF() {
        try {
            console.log('üîß Starting signature insertion into customized PDF from final-tob...');
            console.log('üìÑ Workflow: Load customized PDF from final-tob ‚Üí Insert signatures ‚Üí Save to signed-tob');
            
            // ‚úÖ SAFETY CHECK: Ensure lawyerPin is available
            if (!window.lawyerPin || window.lawyerPin === 'Unknown') {
                console.error('‚ùå lawyerPin not available for signature insertion:', window.lawyerPin);
                alert('PIN not available. Please refresh and try again.');
                return;
            }
            
            // Prepare signature data for insertion
            const signatureData = {
                lawyerSignature1: window.capturedSignature || null,
                lawyerSignature2: window.capturedSignature || null, // Same signature for both fields
                lizSignature: '/central-repository/signatures/lizs-signature-canvas.png'
            };
            
            console.log('üìù Signature data for insertion:', signatureData);
            console.log('üéØ API will load customized PDF from: /central-repository/final-tob/TOB_' + window.lawyerPin + '.pdf');
            
            // Call the PDF signature insertion endpoint
            const response = await fetch('/documents/insert-pdf-signatures', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    pin: window.lawyerPin,
                    lawyerData: window.lawyerData,
                    signatureData: signatureData
                })
            });
            
            if (!response.ok) {
                throw new Error(`PDF signature insertion failed! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ PDF signature insertion completed successfully:', result);
                console.log('üìÑ Customized PDF from final-tob ‚Üí Signatures inserted ‚Üí Saved to signed-tob');
                
                // Store the signed PDF URL for Step 3 preview - convert to full URL
                if (result.downloadUrl) {
                    window.signedPDFUrl = result.downloadUrl.startsWith('http')
                        ? result.downloadUrl
                        : result.downloadUrl;
                } else {
                    // Fallback URL if downloadUrl is not provided
                    window.signedPDFUrl = `/documents/${window.lawyerPin}/signed`;
                    console.warn('‚ö†Ô∏è downloadUrl not in API response, using fallback URL');
                }
                
                console.log('üìÑ Signed PDF ready for preview:', window.signedPDFUrl);
                console.log('üéØ Step 3 will now show the signed PDF from signed-tob folder');
                
            } else {
                console.error('‚ùå PDF signature insertion failed:', result.message);
                alert('Failed to insert signatures into PDF. Please try again.');
            }
            
        } catch (error) {
            console.error('‚ùå Error in PDF signature insertion:', error);
            alert('Error inserting signatures: ' + error.message);
        }
    }
    
    // Make Step 2 functions globally accessible
    window.validateStep2 = validateStep2;
    window.openSignatureModal = openSignatureModal;
    window.createProfessionalSignatureModal = createProfessionalSignatureModal;
    window.insertSignaturesIntoPDF = insertSignaturesIntoPDF;
    </script>

    <!-- ============================================================ -->
    <!-- LOCATION BLOCK: STEP 3 - PREVIEW SIGNED DOCUMENT           -->
    <!-- ============================================================ -->
    
    <!-- Step 3: Preview Signed Document -->
    <!-- Shows the customized PDF from final-tob with signatures inserted from Step 2 -->
    <div class="step-content" id="step3-content">
        <h4 style="color: #693382; margin-bottom: 16px;">üìÑ Preview Signed Document</h4>
        <p style="color: #6b7280; margin-bottom: 20px;">
            Please review your customized Terms of Business document with signatures inserted to confirm everything is correct.
        </p>
        
        <!-- Simple PDF viewer - NO dynamic HTML creation -->
        <div style="border: 1px solid #e5e7eb; border-radius: 8px; height: 600px;">
            <iframe 
                src="" 
                id="pdfPreviewFrame"
                width="100%" 
                height="100%" 
                style="border: none;"
                title="Signed TOB Preview">
            </iframe>
        </div>

        <!-- PDF action buttons removed - they belong in Step 4 Completion -->
    </div>

    <script>
    // STEP 3 JAVASCRIPT - Preview Signed Document Logic
    function validateStep3() {
        // Step 3 is just for preview - no validation needed, user just reviews
        return true;
    }
    
    function handleStep3Completion() {
        console.log('‚úÖ Step 3 completed - Document preview confirmed');
        // Any Step 3 specific completion logic can go here
    }
    
    
    // Make Step 3 functions globally accessible
    window.validateStep3 = validateStep3;
    // loadSignedPDFPreview assigned later after function definition
    window.handleStep3Completion = handleStep3Completion;
    </script>

    <!-- ============================================================ -->
    <!-- LOCATION BLOCK: STEP 4 - COMPLETION                        -->
    <!-- All Step 4 related HTML and functionality                  -->
    <!-- ============================================================ -->
    
    <!-- Step 4: Completion (SELF-CONTAINED) -->
    <div class="step-content" id="step4-content">
        <h4 style="color: #693382; margin-bottom: 16px;">‚úÖ Completion</h4>
        <div style="text-align: center; padding: 40px;">
            <div style="font-size: 4rem; color: #10b981; margin-bottom: 20px;">üéâ</div>
            <h3 style="color: #10b981; margin-bottom: 16px;">Terms of Business Successfully Signed!</h3>
            <p style="color: #6b7280; margin-bottom: 30px;">
                Your document has been signed and saved to your workspace. You can now proceed to the next step in your workflow.
            </p>
            
            <!-- PDF Actions - Self-Contained in Modal -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h4 style="color: #693382; margin-bottom: 15px;">üìÑ Your Signed Document</h4>
                <p style="color: #6b7280; margin-bottom: 15px; font-size: 14px;">
                    Your Terms of Business document is ready for download and has been saved to your Documents Library.
                </p>
                <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
                    <button onclick="downloadSignedPDF()" class="btn btn-primary" style="margin: 5px;">
                        üîí Download Final PDF (Secure)
                    </button>
                    <button onclick="viewSignedPDF()" class="btn btn-secondary" style="margin: 5px;">
                        üëÅÔ∏è View Final PDF (Secure)
                    </button>
                </div>
            </div>
            
            <p style="color: #693382; font-weight: 600;">
                The payment gateway has been unlocked for your next step.
            </p>
        </div>
    </div>

    <script>
    // STEP 4 JAVASCRIPT - Completion Logic
    function validateStep4() {
        // Step 4 is completion - no validation needed
        return true;
    }
    
    function handleStep4Completion() {
        console.log('üéâ Step 4 completed - TOB workflow finished successfully');
        
        // Notify parent dashboard that TOB is complete
        if (window.parent && window.parent.postMessage) {
            window.parent.postMessage({
                type: 'TOB_COMPLETED',
                pin: window.lawyerPin
            }, '*');
        }
        
        // Also trigger dashboard update if function exists
        if (window.parent && window.parent.updateDashboardAfterTOB) {
            window.parent.updateDashboardAfterTOB();
        }
    }
    
    function completeTOBWorkflow() {
        console.log('üè† Returning to dashboard...');
        
        // Close the modal
        const modal = document.querySelector('.modal-overlay');
        if (modal) {
            modal.remove();
        }
        
        // Notify parent dashboard
        handleStep4Completion();
    }
    
    // Make Step 4 functions globally accessible
    window.validateStep4 = validateStep4;
    window.handleStep4Completion = handleStep4Completion;
    window.completeTOBWorkflow = completeTOBWorkflow;
    </script>
</div>

<!-- Modal Footer -->
<div class="tob-modal-footer">
    <button class="btn btn-secondary" id="backBtn" style="display: none;">‚Üê Back</button>
    <div style="flex: 1;"></div>
    <button class="btn btn-primary" id="nextBtn">Proceed to Signature ‚Üí</button>
                </div>

<script>
// TOB Modal functionality
// Start at Step 2 (Digital Signature) instead of Step 1
var currentStep = 1;
const urlParams = new URLSearchParams(window.location.search);

        // ‚úÖ FIXED: Properly declare lawyerPin with fallback chain
        var lawyerPin = window.lawyerPin || urlParams.get('pin');
        console.log('üîç TOB Modal - lawyerPin resolved:', lawyerPin);
        
        // Validate PIN is available
        if (!lawyerPin || lawyerPin === 'undefined' || lawyerPin === '') {
            console.error('‚ùå No valid PIN available for TOB workflow');
            alert('PIN not available. Please refresh the page and try again.');
            return;
        }

let lawyerName = (document.querySelector('#welcomeName')?.textContent || window.lawyerName || 'Lawyer').trim();


let lawyerData = window.lawyerData || {
    lawFirm: (document.querySelector('#welcomeFirm')?.textContent || 'Unknown Law Firm').trim(),
    contactName: lawyerName
}

// Ensure variables are globally accessible
window.currentStep = currentStep;
window.lawyerPin = lawyerPin;
window.lawyerName = lawyerName;
window.lawyerData = lawyerData;

// ‚úÖ DEBUG: Verify all variables are properly set
console.log('üîç TOB Modal - All variables set:', {
    currentStep: window.currentStep,
    lawyerPin: window.lawyerPin,
    lawyerName: window.lawyerName,
    lawyerData: window.lawyerData
});

// Define all functions first, before making them global
function nextStep() {
    // Validate current step BEFORE moving to next step
    if (!validateCurrentStep()) {
        return;
    }
    
    // Special handling for Step 4 - call completeTOB() instead of moving to next step
    if (currentStep === 4) {
        if (typeof completeTOB === 'function') {
            completeTOB();
        }
        return;
    }
    
    // Move to next step
    currentStep++;
    
    // Keep window.currentStep in sync
    window.currentStep = currentStep;
    
            updateStepDisplay();
            updateButtons();
            
    // Function definition for PDF preview (moved here to be available when called)
    function loadSignedPDFPreview() {
        console.log('üëÅÔ∏è Loading signed PDF preview from signed-tob folder...');
        console.log('üìÑ Step 3: Preview the customized PDF with signatures inserted');

        const iframe = document.getElementById('pdfPreviewFrame');
        if (!iframe) {
            console.error('‚ùå PDF preview iframe not found');
            return;
        }

        if (!window.signedPDFUrl) {
            console.error('‚ùå No signed PDF URL available - signature insertion may have failed');
            iframe.src = 'about:blank';
            return;
        }

        // Simply set the iframe source - Shows signed PDF from signed-tob
        iframe.src = window.signedPDFUrl;
        console.log('‚úÖ Signed PDF preview loaded from signed-tob:', window.signedPDFUrl);
        console.log('üéØ Lawyer can now review their customized TOB with signatures');
    }

    // Make function globally accessible after definition
    window.loadSignedPDFPreview = loadSignedPDFPreview;

    // Special handling when moving to specific steps
    if (currentStep === 2) {
    }

    if (currentStep === 3) {
        // Step 3: Preview the signed PDF (signatures inserted in Step 2)
        console.log('üëÅÔ∏è Step 3: Loading signed PDF preview...');
        loadSignedPDFPreview();
    }
    
    if (currentStep === 4) {
    
    }
    
    // Handle special actions when completing steps
    if (currentStep === 2) {
        // Step 2 - Digital Signature step completed
        if (typeof completeSignature === 'function') {
            completeSignature();
        }
        
        // üéØ NEW: Insert signatures into existing PDF after Step 2 completion
        console.log('üîß Step 2 completed - inserting signatures into existing PDF...');
        insertSignaturesIntoPDF();
        
    } else if (currentStep === 3) {
        // Step 3: Preview the signed PDF (signatures inserted in Step 2)
        console.log('üëÅÔ∏è Step 3: Previewing signed PDF...');
        // PDF preview is loaded in the step transition above
        
    } else if (currentStep === 4) {
        // Step 4: Completion
        console.log('üéâ Step 4: TOB workflow completed');
    }
}

function previousStep() {
    if (currentStep > 1) {
        currentStep--;
        
        // Keep window.currentStep in sync
        window.currentStep = currentStep;
        updateStepDisplay();
        updateButtons();
    }
}

function updateStepDisplay() {
    
    // Update step indicators - now using steps 1, 2, 3, 4
    const steps = [1, 2, 3, 4];
    
    for (let i of steps) {
        const stepElement = document.getElementById(`step${i}`);
        const contentElement = document.getElementById(`step${i}-content`);
        
        if (i < currentStep) {
            stepElement.className = 'step completed';
            contentElement.className = 'step-content';
            console.log(`‚úÖ Step ${i}: completed`);
        } else if (i === currentStep) {
            stepElement.className = 'step active';
            contentElement.className = 'step-content active';
            console.log(`üéØ Step ${i}: active`);
                } else {
            stepElement.className = 'step pending';
            contentElement.className = 'step-content';
            console.log(`‚è≥ Step ${i}: pending`);
        }
    }
}

function updateButtons() {
    console.log('üéØ updateButtons() called, current step:', currentStep);
    
    const backBtn = document.getElementById('backBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    // Show/hide back button
    backBtn.style.display = currentStep > 1 ? 'inline-block' : 'none';
    console.log('üîô Back button display:', backBtn.style.display);
    
    // Update next button text only (don't override event listeners)
    if (currentStep === 1) {
        nextBtn.textContent = 'Proceed to Signature ‚Üí';
        console.log('üìù Step 1: Proceed to Signature');
    } else if (currentStep === 2) {
        nextBtn.textContent = 'Continue to Preview ‚Üí';
        console.log('‚úÖ Step 2: Continue to Preview');
    } else if (currentStep === 3) {
        nextBtn.textContent = 'Continue to Completion ‚Üí';
    } else if (currentStep === 4) {
        nextBtn.textContent = 'Return to Dashboard';
        nextBtn.className = 'btn btn-success';
    }
}

function validateCurrentStep() {
    // Call step-specific validation functions from location blocks
    switch(currentStep) {
        case 1: return window.validateStep1 ? window.validateStep1() : true;
        case 2: return window.validateStep2 ? window.validateStep2() : true;
        case 3: return window.validateStep3 ? window.validateStep3() : true;
        case 4: return window.validateStep4 ? window.validateStep4() : true;
        default: return true;
    }
}

function handleCurrentStepCompletion() {
    // Call step-specific completion functions from location blocks
    switch(currentStep) {
        case 1: if (window.handleStep1Completion) window.handleStep1Completion(); break;
        case 2: // Step 2 completion handled by insertSignaturesIntoPDF() in nextStep()
        case 3: if (window.handleStep3Completion) window.handleStep3Completion(); break;
        case 4: if (window.handleStep4Completion) window.handleStep4Completion(); break;
    }
}

function completeTOB() {
    console.log('üéâ TOB completion process started...');
    
    // Show completion message
    alert('üéâ Terms of Business completed successfully!');
    
    // Close modal first
    closeTOBModal();
    
    // DIRECT METHOD: Call dashboard update function immediately
    setTimeout(() => {
        try {
            console.log('üì§ Calling updateDashboardAfterTOB directly...');
            if (typeof window.updateDashboardAfterTOB === 'function') {
                window.updateDashboardAfterTOB();
                console.log('‚úÖ Dashboard update function called successfully');
        } else {
                console.error('‚ùå updateDashboardAfterTOB function not found');
                // Fallback: Force page refresh to get updated state
                window.location.reload();
            }
            
            // Also trigger WebSocket/database update
            console.log('üì° Triggering WebSocket database update...');
            refreshDashboardState();
            
        } catch (e) {
            console.error('‚ùå Error calling dashboard update function:', e);
            // Fallback: Force page refresh 
            window.location.reload();
        }
    }, 500);
}

function closeTOBModal() {
    // Since we're embedded in the dashboard modal, close the modal overlay
    const modalOverlay = document.querySelector('.modal-overlay');
    if (modalOverlay) {
        modalOverlay.remove();
    }
    
}

function showError(message) {
    const tobContent = document.getElementById('tobContent');
    if (tobContent) {
        tobContent.innerHTML = 
            '<div style="text-align: center; padding: 40px; color: #64748b;">' +
                '<i class="fas fa-exclamation-triangle" style="font-size: 3rem; margin-bottom: 15px; color: #f59e0b;"></i>' +
                '<h3 style="color: #1e293b; margin-bottom: 15px;">Error</h3>' +
                '<p>' + message + '</p>' +
            '</div>';
        } else {
        // Fallback: Show error as alert if tobContent element not found
        alert('Error: ' + message);
        console.error('‚ùå tobContent element not found. Error:', message);
    }
}

// Function moved to earlier in the file to avoid reference errors

// üéØ NEW: Download final (flattened) PDF
function downloadSignedPDF() {
    console.log('üîç DEBUG: downloadSignedPDF clicked');
    console.log('üîç DEBUG: window.lawyerPin =', window.lawyerPin);
    flattenAndDownloadPDF();
}

// üéØ NEW: View final (flattened) PDF in full screen
function viewSignedPDF() {
    console.log('üîç DEBUG: viewSignedPDF clicked');
    console.log('üîç DEBUG: window.lawyerPin =', window.lawyerPin);
    flattenAndViewPDF();
}

// Flatten PDF and download
async function flattenAndDownloadPDF() {
    try {
        console.log('üîí Flattening PDF for secure download...');
        console.log('üîç DEBUG: PIN being sent =', window.lawyerPin);

        const response = await fetch('/api/flatten-pdf', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                pin: window.lawyerPin
            })
        });

        const result = await response.json();

        if (result.success) {
            console.log(`‚úÖ PDF flattened: ${result.fieldsFlattened} fields converted to permanent content`);
            const downloadUrl = `${result.downloadUrl}?download=true`;
            console.log('üîç DEBUG: Attempting to download from URL:', downloadUrl);
            window.open(downloadUrl, '_blank');
            console.log('üì• Flattened PDF download initiated (same file, now secure)');
        } else {
            throw new Error(result.error || 'Failed to flatten PDF');
        }
    } catch (error) {
        console.error('‚ùå PDF flattening failed:', error);
        alert('Failed to prepare PDF for download. Please try again.');
    }
}

// Flatten PDF and view
async function flattenAndViewPDF() {
    try {
        console.log('üîí Flattening PDF for secure viewing...');
        console.log('üîç DEBUG: PIN being sent =', window.lawyerPin);

        const response = await fetch('/api/flatten-pdf', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                pin: window.lawyerPin
            })
        });

        const result = await response.json();

        if (result.success) {
            console.log(`‚úÖ PDF flattened: ${result.fieldsFlattened} fields converted to permanent content`);
            const viewUrl = result.downloadUrl;
            console.log('üîç DEBUG: Attempting to view at URL:', viewUrl);
            window.open(viewUrl, '_blank');
            console.log('üëÅÔ∏è Flattened PDF opened in new tab (same file, now secure)');
        } else {
            throw new Error(result.error || 'Failed to flatten PDF');
        }
    } catch (error) {
        console.error('‚ùå PDF flattening failed:', error);
        alert('Failed to prepare PDF for viewing. Please try again.');
    }
}


// Step 2 - Digital Signature step (no API call needed)
function completeSignature() {
    if (!validateCurrentStep()) {
        return;
    }
    
}

// Refresh dashboard state after successful TOB completion
async function refreshDashboardState() {
    try {
        console.log('üîÑ Refreshing dashboard state after TOB completion...');
        
        // Method 1: Try WebSocket update first (if available)
        if (window.io && window.io.connected) {
            console.log('üì° Sending WebSocket update...');
            window.io.emit('workflow:tob-completed', {
                pin: lawyerPin,
                timestamp: new Date().toISOString()
            });
        }
        
        // Method 2: Try REST API call to refresh state
        try {
            const response = await fetch(`/api/lawyers/${lawyerPin}/refresh-state`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include'
            });
            
            if (response.ok) {
                console.log('‚úÖ Dashboard state refreshed via REST API');
            }
        } catch (restError) {
           
        }
        
        // Method 3: Try parent window communication
        if (window.parent && window.parent !== window) {
            // console.log('üì§ Sending parent window update...');
            window.parent.postMessage({
                type: 'TOB_COMPLETED',
                pin: lawyerPin,
                workflowStage: 2,
                timestamp: new Date().toISOString()
            }, '*');
        }
        
        // Method 4: Try direct dashboard update function
        if (typeof updateDashboardAfterTOB === 'function') {
            console.log('üîÑ Calling dashboard update function...');
            updateDashboardAfterTOB();
        }
        
        console.log('‚úÖ Dashboard state refresh initiated');
        
    } catch (error) {
        console.error('‚ùå Error refreshing dashboard state:', error);
        // Don't fail the TOB process if state refresh fails
    }
}


// Test SSOT API connectivity (debugging function)
async function testSSOTConnection() {
    try {
        console.log('üß™ Testing SSOT API connection...');
        
        const response = await fetch('/api/health', {
            method: 'GET',
            credentials: 'include'
        });
        
        if (response.ok) {
            const health = await response.json();
            console.log('‚úÖ SSOT API is healthy:', health);
            return true;
        } else {
            console.error('‚ùå SSOT API health check failed:', response.status);
            return false;
        }
    } catch (error) {
        console.error('üí• SSOT API connection test failed:', error);
        return false;
    }
}

// Page Navigation Functions

let currentPage = 1;
let totalPages = 1;


function splitContentIntoPages(content, pageHeight) {
    // This is a simplified page splitting algorithm
    // In practice, you'd want to parse the HTML structure more intelligently
    
    // For now, let's create a basic split based on content length
    const wordsPerPage = 800; // Approximate words per page
    const words = content.split(' ');
    const pages = [];
    
    for (let i = 0; i < words.length; i += wordsPerPage) {
        const pageWords = words.slice(i, i + wordsPerPage);
        pages.push(pageWords.join(' '));
    }
    
    // Ensure we have at least one page
    if (pages.length === 0) {
        pages.push(content);
    }
    
    return pages;
}

// Now make all functions globally accessible
window.nextStep = nextStep;
window.previousStep = previousStep;
window.updateStepDisplay = updateStepDisplay;
window.updateButtons = updateButtons;
// Export to PDF function

window.validateCurrentStep = validateCurrentStep;
window.openSignatureModal = openSignatureModal;
window.createProfessionalSignatureModal = createProfessionalSignatureModal;
window.switchToUpload = switchToUpload;
window.switchToDraw = switchToDraw;
window.clearSignatureCanvas = clearSignatureCanvas;
window.undoLastStroke = undoLastStroke;
window.saveSignature = saveSignature;
window.changeSignature = changeSignature;
window.closeSignatureModal = closeSignatureModal;
window.completeSignature = completeSignature;
window.completeTOB = completeTOB;
window.closeTOBModal = closeTOBModal;
window.showError = showError;
window.testSSOTConnection = testSSOTConnection;

// Initialize modal immediately when script loads (not waiting for DOMContentLoaded)
console.log('üéØ TOB Modal script loaded');
console.log('üîç Variables check:', { currentStep, lawyerPin, lawyerName, lawyerData });

// PIN is passed from dashboard via server-side rendering
if (lawyerPin && lawyerPin !== 'Unknown') {
    
    // Note: Lawyers draw fresh signatures each time
    // Only Liz's signature is auto-populated from central-repository/signatures
    
    // Add event listeners to buttons
    const backBtn = document.getElementById('backBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    // console.log('üîç Buttons found:', { backBtn: !!backBtn, nextBtn: !!nextBtn });
    
    if (backBtn) {
        backBtn.addEventListener('click', previousStep);
        // console.log('‚úÖ Back button event listener added');
    }
    
        if (nextBtn) {
            // Simple event listener - no cloning needed
            nextBtn.addEventListener('click', nextStep);
            
        }
    
    // Initialize step display - ensure only Step 1 is visible
    updateStepDisplay();
    updateButtons();
    
    // Test SSOT API connection for debugging
    testSSOTConnection();
} else {
    // Show error if no PIN
    showError('PIN not available. Please ensure you\'re accessing this from the main dashboard.');
}

// üéØ PDF functions globally accessible
// loadSignedPDFPreview assigned earlier after function definition
window.downloadSignedPDF = downloadSignedPDF;
window.viewSignedPDF = viewSignedPDF;
    </script>