<!-- 
=========================================================================
=== -->
<!-- TOBMODAL.EJS - TERMS OF BUSINESS MODAL WORKFLOW -->
<!-- UPDATED: Signature lineWidth increased from 2 to 5 for better visibility -->
<!-- 
=========================================================================
=== -->
<!-- This modal handles the 4-step Terms of Business signing workflow: -->
<!-- 1. Email Preferences -->
<!-- 2. Digital Signature -->
<!-- 3. Preview Signed Document -->
<!-- 4. Completion & Return to Dashboard -->
<!-- 
=========================================================================
=== -->

<!-- 
=========================================================================
=== -->
<!-- LOCATION BLOCK 0: STYLES & CSS -->
<!-- 
=========================================================================
=== -->
<style>
  /* GENERAL STYLES */
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f8f9fa;
  }
  
  .step-content {
    padding: 30px;
    background-color: #ffffff;
    min-height: 500px;
  }
  
  .step-container {
    max-width: 900px;
    margin: 0 auto;
  }
  
  .step-header {
    text-align: center;
    margin-bottom: 40px;
  }
  
  .step-title {
    font-size: 28px;
    font-weight: 700;
    color: #693382;
    margin-bottom: 10px;
  }
  
  .step-description {
    font-size: 16px;
    color: #6b7280;
  }
  
  /* EMAIL PREFERENCES STYLES */
  .preference-section {
    margin-top: 30px;
  }
  
  .preference-card {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 30px;
    border: 2px solid #e5e7eb;
  }
  
  .preference-card h3 {
    font-size: 20px;
    color: #111827;
    margin-bottom: 20px;
    text-align: center;
  }
  
  .preference-options {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin: 20px 0;
  }
  
  .preference-option {
    position: relative;
  }
  
  .preference-radio {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }
  
  .preference-label {
    display: flex;
    align-items: center;
    padding: 20px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    background: #ffffff;
  }
  
  .preference-label:hover {
    border-color: #693382;
    box-shadow: 0 2px 8px rgba(105, 51, 130, 0.1);
  }
  
  .preference-radio:checked + .preference-label {
    border-color: #693382;
    background: #faf5ff;
  }
  
  .preference-icon {
    font-size: 24px;
    margin-right: 15px;
  }
  
  .preference-text strong {
    display: block;
    margin-bottom: 5px;
    color: #111827;
  }
  
  .preference-text p {
    font-size: 14px;
    color: #6b7280;
    margin: 0;
  }
  
  /* DIGITAL SIGNATURE STYLES */
  .signature-section {
    margin-top: 30px;
  }
  
  .signature-tabs {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    border-bottom: 2px solid #e5e7eb;
  }
  
  .signature-tab {
    padding: 12px 24px;
    background: none;
    border: none;
    border-bottom: 3px solid transparent;
    font-size: 16px;
    font-weight: 500;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .signature-tab.active {
    color: #693382;
    border-bottom-color: #693382;
  }
  
  .signature-tab:hover {
    color: #693382;
  }
  
  .signature-mode {
    margin-top: 20px;
  }
  
  .canvas-container {
    border: 2px solid #693382;
    border-radius: 8px;
    background: #ffffff;
    padding: 10px;
    margin-bottom: 20px;
  }
  
  .signature-canvas {
    width: 100%;
    height: 200px;
    cursor: crosshair;
    background: #ffffff;
    border-radius: 4px;
  }
  
  .canvas-controls {
    display: flex;
    gap: 10px;
    justify-content: center;
  }
  
  .upload-container {
    text-align: center;
    padding: 40px;
    border: 2px dashed #693382;
    border-radius: 8px;
    background: #faf5ff;
  }
  
  .upload-label {
    display: block;
    cursor: pointer;
  }
  
  .upload-icon {
    font-size: 48px;
    margin-bottom: 15px;
  }
  
  .upload-text strong {
    display: block;
    margin-bottom: 5px;
    color: #693382;
  }
  
  .upload-preview {
    margin-top: 20px;
  }
  
  .upload-preview img {
    max-width: 400px;
    max-height: 150px;
    border: 2px solid #693382;
    border-radius: 8px;
    margin-bottom: 15px;
  }
  
  .signature-status {
    margin: 20px 0;
    padding: 15px;
    background: #dcfce7;
    border-radius: 8px;
    border-left: 4px solid #10b981;
  }
  
  .status-success {
    display: flex;
    align-items: center;
    gap: 10px;
    color: #065f46;
  }
  
  .signature-info {
    margin-top: 30px;
    padding: 20px;
    background: #eff6ff;
    border-radius: 8px;
    border-left: 4px solid #3b82f6;
  }
  
  .signature-info h4 {
    color: #1e40af;
    margin-bottom: 15px;
  }
  
  .signature-info ul {
    margin-top: 10px;
    padding-left: 20px;
  }
  
  .signature-info li {
    padding: 5px 0;
    color: #1e3a8a;
  }
  
  .signature-actions {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-top: 20px;
  }
  
  /* PREVIEW STYLES */
  .preview-section {
    margin-top: 30px;
  }
  
  .pdf-viewer-container {
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    background: #f9fafb;
    padding: 20px;
    min-height: 600px;
    position: relative;
  }
  
  .loading-message {
    text-align: center;
    padding: 50px 20px;
  }
  
  .spinner {
    border: 4px solid #f3f4f6;
    border-top: 4px solid #693382;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .pdf-preview-frame {
    width: 100%;
    height: 600px;
    border: none;
    border-radius: 4px;
  }
  
  .signature-verification {
    margin-top: 30px;
    padding: 20px;
    background: #f0fdf4;
    border-radius: 8px;
    border-left: 4px solid #10b981;
  }
  
  .signature-verification h4 {
    color: #065f46;
    margin-bottom: 15px;
    font-size: 18px;
  }
  
  .verification-grid {
    display: grid;
    gap: 15px;
  }
  
  .verification-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    background: #ffffff;
    border-radius: 6px;
    border: 1px solid #e5e7eb;
  }
  
  .verification-label {
    font-weight: 600;
    color: #374151;
  }
  
  .verification-value {
    color: #10b981;
    font-weight: 500;
  }
  
  .preview-instructions {
    margin-top: 30px;
    padding: 20px;
    background: #eff6ff;
    border-radius: 8px;
    border-left: 4px solid #3b82f6;
  }
  
  .preview-instructions h4 {
    color: #1e40af;
    margin-bottom: 15px;
    font-size: 18px;
  }
  
  .preview-instructions ul {
    margin-top: 10px;
    padding-left: 20px;
  }
  
  .preview-instructions li {
    padding: 5px 0;
    color: #1e3a8a;
  }
  
  /* COMPLETION STYLES */
  .completion-section {
    margin-top: 30px;
  }
  
  .success-message {
    text-align: center;
    padding: 40px;
    background: linear-gradient(135deg, #dcfce7 0%, #f0fdf4 100%);
    border-radius: 12px;
    border: 2px solid #10b981;
    margin-bottom: 30px;
  }
  
  .success-icon {
    font-size: 64px;
    margin-bottom: 20px;
  }
  
  .success-message h3 {
    font-size: 24px;
    color: #065f46;
    margin-bottom: 10px;
  }
  
  .success-message p {
    font-size: 16px;
    color: #047857;
  }
  
  .action-buttons-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }
  
  .action-card {
    padding: 20px;
    background: #ffffff;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    text-align: center;
    transition: all 0.3s ease;
  }
  
  .action-card:hover {
    border-color: #693382;
    box-shadow: 0 4px 12px rgba(105, 51, 130, 0.1);
  }
  
  .action-card-icon {
    font-size: 32px;
    margin-bottom: 10px;
  }
  
  .action-card h4 {
    font-size: 18px;
    color: #111827;
    margin-bottom: 10px;
  }
  
  .action-card p {
    font-size: 14px;
    color: #6b7280;
    margin-bottom: 15px;
  }
  
  .completion-summary {
    background: #f9fafb;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 30px;
  }
  
  .completion-summary h4 {
    color: #111827;
    margin-bottom: 15px;
    font-size: 18px;
  }
  
  .summary-grid {
    display: grid;
    gap: 15px;
  }
  
  .summary-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .summary-label {
    font-weight: 600;
    color: #374151;
  }
  
  .summary-value {
    color: #6b7280;
  }
  
  .summary-text {
    padding: 10px 0;
  }
  
  .summary-text strong {
    display: block;
    color: #111827;
    margin-bottom: 5px;
  }
  
  .summary-text p {
    font-size: 14px;
    color: #6b7280;
    margin: 0;
  }
  
  .behind-scenes {
    padding: 20px;
    background: #fef3c7;
    border-radius: 8px;
    border-left: 4px solid #f59e0b;
    margin-bottom: 30px;
  }
  
  .behind-scenes h4 {
    color: #92400e;
    margin-bottom: 15px;
    font-size: 18px;
  }
  
  .behind-scenes ul {
    list-style: none;
    padding: 0;
  }
  
  .behind-scenes li {
    padding: 5px 0;
    color: #78350f;
    font-size: 14px;
  }
  
  .completion-return {
    text-align: center;
  }
  
  .return-note {
    margin-top: 10px;
    font-size: 14px;
    color: #6b7280;
  }
  
  /* NAVIGATION BAR STYLES */
  .modal-navigation {
    background: #ffffff;
    border-top: 2px solid #e5e7eb;
    padding: 20px 30px;
  }
  
  .progress-steps {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .progress-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    flex: 1;
    position: relative;
  }
  
  .progress-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #e5e7eb;
    color: #9ca3af;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 16px;
    transition: all 0.3s ease;
  }
  
  .progress-step.active .progress-circle {
    background: #693382;
    color: #ffffff;
    box-shadow: 0 0 0 4px rgba(105, 51, 130, 0.1);
  }
  
  .progress-label {
    font-size: 12px;
    color: #6b7280;
    text-align: center;
  }
  
  .progress-step.active .progress-label {
    color: #693382;
    font-weight: 600;
  }
  
  .progress-line {
    flex: 1;
    height: 2px;
    background: #e5e7eb;
    margin: 0 10px;
    position: relative;
    top: -25px;
  }
  
  .navigation-buttons {
    display: flex;
    justify-content: space-between;
    gap: 15px;
  }
  
  /* BUTTON STYLES */
  button {
    font-family: inherit;
    font-size: 16px;
    padding: 12px 24px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
  }
  
  .btn-primary {
    background: #693382;
    color: #ffffff;
  }
  
  .btn-primary:hover {
    background: #553168;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(105, 51, 130, 0.3);
  }
  
  .btn-secondary {
    background: #e5e7eb;
    color: #374151;
  }
  
  .btn-secondary:hover {
    background: #d1d5db;
    transform: translateY(-2px);
  }
  
  .btn-nav {
    min-width: 150px;
  }
  
  .btn-large {
    padding: 16px 40px;
    font-size: 18px;
  }
  
  button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  button:disabled:hover {
    transform: none;
    box-shadow: none;
  }
  
  /* ANIMATIONS */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* RESPONSIVE DESIGN */
  @media (max-width: 768px) {
    .step-content {
      padding: 20px;
    }
    .step-title {
      font-size: 24px;
    }
    .action-buttons-grid {
      grid-template-columns: 1fr;
    }
    .progress-steps {
      flex-direction: column;
      gap: 20px;
    }
    .progress-line {
      display: none;
    }
    .navigation-buttons {
      flex-direction: column;
    }
    .btn-nav {
      width: 100%;
    }
  }
  </style>
  
  <!-- 
  =========================================================================
  === -->
  <!-- LOCATION BLOCK 1: EMAIL PREFERENCES -->
  <!-- 
  =========================================================================
  === -->
  <div id="step1" class="step-content" style="display: block;">
    <div class="step-container">
      <div class="step-header">
        <h2 class="step-title">📧 Email Preferences</h2>
        <p class="step-description">Choose your email notification preferences for case progress updates.</p>
      </div>
      
      <div class="preference-section">
        <div class="preference-card">
          <h3>Would you like to receive email updates about case progress?</h3>
          
          <div class="preference-options">
            <div class="preference-option">
              <input type="radio" id="emailYes" name="emailPreference" value="yes" class="preference-radio">
              <label for="emailYes" class="preference-label">
                <div class="preference-icon">✅</div>
                <div class="preference-text">
                  <strong>Yes, I want to receive email updates</strong>
                  <p>Get notified about important case milestones and progress</p>
                </div>
              </label>
            </div>
            
            <div class="preference-option">
              <input type="radio" id="emailNo" name="emailPreference" value="no" class="preference-radio">
              <label for="emailNo" class="preference-label">
                <div class="preference-icon">❌</div>
                <div class="preference-text">
                  <strong>No, I do not want to receive case progress updates</strong>
                  <p>Focus on accessing updates through your online portal</p>
                </div>
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
  // LOCATION BLOCK 1 JAVASCRIPT: EMAIL PREFERENCES
  let emailPreference = null;
  
  function loadSavedEmailPreference() {
    const lawyerPin = window.parent.lawyerPin || window.lawyerPin || '<%= pin %>';
    
    fetch(`/api/lawyer/email-preference?pin=${lawyerPin}`)
      .then(response => response.json())
      .then(data => {
        if (data.preference) {
          const radio = document.getElementById(
            data.preference === 'yes' ? 'emailYes' : 'emailNo'
          );
          if (radio) radio.checked = true;
          emailPreference = data.preference;
          console.log('✅ Email preference loaded:', emailPreference);
        }
      })
      .catch(error => console.error('❌ Error loading email preference:', error));
  }
  
  function validateEmailPreferences() {
    const yesRadio = document.getElementById('emailYes');
    const noRadio = document.getElementById('emailNo');
    
    if (yesRadio && yesRadio.checked) {
      emailPreference = 'yes';
      saveEmailPreference();
      return true;
    }
    
    if (noRadio && noRadio.checked) {
      emailPreference = 'no';
      saveEmailPreference();
      return true;
    }
    
    return false;
  }
  
  function saveEmailPreference() {
    const lawyerPin = window.parent.lawyerPin || window.lawyerPin || '<%= pin %>';
    
    fetch('/api/lawyer/email-preference', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        pin: lawyerPin,
        preference: emailPreference
      })
    })
    .then(response => response.json())
    .then(data => {
      console.log('✅ Email preference saved:', emailPreference);
    })
    .catch(error => {
      console.error('❌ Error saving email preference:', error);
    });
  }
  </script>
  
  <!-- 
  =========================================================================
  === -->
  <!-- LOCATION BLOCK 2: DIGITAL SIGNATURE -->
  <!-- ✅ UPDATED: lineWidth increased from 2 to 5 for better visibility -->
  <!-- 
  =========================================================================
  === -->
  <div id="step2" class="step-content" style="display: none;">
    <div class="step-container">
      <div class="step-header">
        <h2 class="step-title">✍️ Digital Signature</h2>
        <p class="step-description">Sign your Terms of Business document digitally.</p>
      </div>
      
      <div class="signature-section">
        <div class="signature-tabs">
          <button id="drawTab" class="signature-tab active" onclick="switchSignatureMode('draw')">
            ✏️ Draw Signature
          </button>
          <button id="uploadTab" class="signature-tab" onclick="switchSignatureMode('upload')">
            📤 Upload Signature
          </button>
        </div>
        
        <div id="drawMode" class="signature-mode active">
          <div class="canvas-container">
            <canvas id="signatureCanvas" class="signature-canvas" width="600" height="200"></canvas>
          </div>
          
          <div class="canvas-controls">
            <button id="clearSignature" class="btn-secondary" onclick="clearSignatureCanvas()">
              🗑️ Clear
            </button>
            <button id="saveSignature" class="btn-primary" onclick="saveDrawnSignature()">
              💾 Save Signature
            </button>
          </div>
        </div>
        
        <div id="uploadMode" class="signature-mode" style="display: none;">
          <div class="upload-container">
            <input type="file" id="signatureUpload" accept="image/png,image/jpeg,image/jpg" style="display: none;" onchange="handleSignatureUpload(event)">
            <label for="signatureUpload" class="upload-label">
              <div class="upload-icon">📤</div>
              <div class="upload-text">
                <strong>Click to upload your signature</strong>
                <p>PNG, JPG or JPEG format (max 5MB)</p>
              </div>
            </label>
            
            <div id="uploadPreview" class="upload-preview" style="display: none;">
              <img id="uploadedSignature" alt="Uploaded signature" />
              <button class="btn-secondary" onclick="removeUploadedSignature()">Remove</button>
            </div>
          </div>
        </div>
        
        <div id="signatureStatus" class="signature-status" style="display: none;">
          <div class="status-success">
            <span class="status-icon">✅</span>
            <span class="status-text">Signature saved successfully!</span>
          </div>
        </div>
        
        <div class="signature-info">
          <h4>📋 Signature Workflow</h4>
          <ul>
            <li>Your signature will be saved to the secure database</li>
            <li>Liz's signature will be automatically added to the document</li>
            <li>Both signatures will appear on pages 19 and 20 of the TOB document</li>
            <li>The document will be encrypted and GDPR compliant</li>
          </ul>
        </div>
        
        <div class="signature-actions">
          <button id="cancelSignature" class="btn-secondary" onclick="cancelSignatureProcess()">
            Cancel
          </button>
          <button id="restartSignature" class="btn-secondary" onclick="restartSignatureProcess()">
            🔄 Restart
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <script>
  // LOCATION BLOCK 2 JAVASCRIPT: DIGITAL SIGNATURE
  // ✅ UPDATED: lineWidth increased from 2 to 5 for bold, visible signatures
  
  let signatureCanvas, signatureContext;
  let isSignatureSaved = false;
  let signatureData = null;
  
  function initializeSignatureCanvas() {
    signatureCanvas = document.getElementById('signatureCanvas');
    if (!signatureCanvas) return;
    
    signatureContext = signatureCanvas.getContext('2d');
    signatureContext.strokeStyle = '#000000';
    signatureContext.lineWidth = 5;  // ✅ INCREASED from 2 to 5 for better visibility
    signatureContext.lineCap = 'round';
    signatureContext.lineJoin = 'round';
    
    let isDrawing = false;
    let lastX = 0;
    let lastY = 0;
    
    signatureCanvas.addEventListener('mousedown', (e) => {
      isDrawing = true;
      [lastX, lastY] = [e.offsetX, e.offsetY];
    });
    
    signatureCanvas.addEventListener('mousemove', (e) => {
      if (!isDrawing) return;
      signatureContext.beginPath();
      signatureContext.moveTo(lastX, lastY);
      signatureContext.lineTo(e.offsetX, e.offsetY);
      signatureContext.stroke();
      [lastX, lastY] = [e.offsetX, e.offsetY];
    });
    
    signatureCanvas.addEventListener('mouseup', () => {
      isDrawing = false;
    });
    
    signatureCanvas.addEventListener('mouseout', () => {
      isDrawing = false;
    });
    
    // Touch support
    signatureCanvas.addEventListener('touchstart', (e) => {
      e.preventDefault();
      const touch = e.touches[0];
      const rect = signatureCanvas.getBoundingClientRect();
      isDrawing = true;
      [lastX, lastY] = [touch.clientX - rect.left, touch.clientY - rect.top];
    });
    
    signatureCanvas.addEventListener('touchmove', (e) => {
      e.preventDefault();
      if (!isDrawing) return;
      const touch = e.touches[0];
      const rect = signatureCanvas.getBoundingClientRect();
      const x = touch.clientX - rect.left;
      const y = touch.clientY - rect.top;
      signatureContext.beginPath();
      signatureContext.moveTo(lastX, lastY);
      signatureContext.lineTo(x, y);
      signatureContext.stroke();
      [lastX, lastY] = [x, y];
    });
    
    signatureCanvas.addEventListener('touchend', () => {
      isDrawing = false;
    });
  }
  
  function switchSignatureMode(mode) {
    const drawMode = document.getElementById('drawMode');
    const uploadMode = document.getElementById('uploadMode');
    const drawTab = document.getElementById('drawTab');
    const uploadTab = document.getElementById('uploadTab');
    
    if (mode === 'draw') {
      drawMode.style.display = 'block';
      uploadMode.style.display = 'none';
      drawTab.classList.add('active');
      uploadTab.classList.remove('active');
    } else {
      drawMode.style.display = 'none';
      uploadMode.style.display = 'block';
      drawTab.classList.remove('active');
      uploadTab.classList.add('active');
    }
  }
  
  function clearSignatureCanvas() {
    if (signatureContext && signatureCanvas) {
      signatureContext.clearRect(0, 0, signatureCanvas.width, signatureCanvas.height);
      isSignatureSaved = false;
      hideSignatureStatus();
    }
  }
  
  function saveDrawnSignature() {
    if (!signatureCanvas) return;
    
    const canvasData = signatureContext.getImageData(0, 0, signatureCanvas.width, signatureCanvas.height);
    const pixels = canvasData.data;
    let isEmpty = true;
    
    for (let i = 0; i < pixels.length; i += 4) {
      if (pixels[i + 3] !== 0) {
        isEmpty = false;
        break;
      }
    }
    
    if (isEmpty) {
      alert('Please draw your signature before saving.');
      return;
    }
    
    signatureData = signatureCanvas.toDataURL('image/png');
    saveSignatureToDatabase(signatureData);
  }
  
  function handleSignatureUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    if (!file.type.match('image/(png|jpeg|jpg)')) {
      alert('Please upload a PNG or JPEG image.');
      return;
    }
    
    if (file.size > 5 * 1024 * 1024) {
      alert('File size must be less than 5MB.');
      return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
      signatureData = e.target.result;
      const preview = document.getElementById('uploadPreview');
      const img = document.getElementById('uploadedSignature');
      img.src = signatureData;
      preview.style.display = 'block';
      saveSignatureToDatabase(signatureData);
    };
    reader.readAsDataURL(file);
  }
  
  function removeUploadedSignature() {
    document.getElementById('uploadPreview').style.display = 'none';
    document.getElementById('signatureUpload').value = '';
    signatureData = null;
    isSignatureSaved = false;
    hideSignatureStatus();
  }
  
  function saveSignatureToDatabase(signatureDataUrl) {
    const lawyerPin = window.parent.lawyerPin || window.lawyerPin || '<%= pin %>';
    
    fetch('/api/lawyer/signature', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        pin: lawyerPin,
        signature: signatureDataUrl
      })
    })
    .then(response => response.json())
    .then(data => {
      isSignatureSaved = true;
      showSignatureStatus();
      console.log('✅ Signature saved to database');
    })
    .catch(error => {
      console.error('❌ Error saving signature:', error);
      alert('Error saving signature. Please try again.');
    });
  }
  
  function validateSignature() {
    return isSignatureSaved;
  }
  
  function showSignatureStatus() {
    const status = document.getElementById('signatureStatus');
    if (status) status.style.display = 'block';
  }
  
  function hideSignatureStatus() {
    const status = document.getElementById('signatureStatus');
    if (status) status.style.display = 'none';
  }
  
  function cancelSignatureProcess() {
    if (confirm('Are you sure you want to cancel the signature process?')) {
      clearSignatureCanvas();
      removeUploadedSignature();
    }
  }
  
  function restartSignatureProcess() {
    if (confirm('Are you sure you want to restart the signature process?')) {
      clearSignatureCanvas();
      removeUploadedSignature();
      switchSignatureMode('draw');
    }
  }
  </script>
  
  <!-- 
  =========================================================================
  === -->
  <!-- LOCATION BLOCK 3: PREVIEW SIGNED DOCUMENT -->
  <!-- 
  =========================================================================
  === -->
  <div id="step3" class="step-content" style="display: none;">
    <div class="step-container">
      <div class="step-header">
        <h2 class="step-title">👁️ Preview Signed Document</h2>
        <p class="step-description">Review your signed Terms of Business document before finalizing.</p>
      </div>
      
      <div class="preview-section">
        <div class="pdf-viewer-container">
          <div id="pdfLoadingMessage" class="loading-message">
            <div class="spinner"></div>
            <p>Loading your signed document...</p>
          </div>
          
          <iframe id="pdfPreview" class="pdf-preview-frame" style="display: none;"></iframe>
        </div>
        
        <div class="signature-verification">
          <h4>✅ Signature Verification</h4>
          <div class="verification-grid">
            <div class="verification-item">
              <span class="verification-label">Your Signature:</span>
              <span class="verification-value" id="lawyerSignatureStatus">✅ Present (Pages 19-20)</span>
            </div>
            <div class="verification-item">
              <span class="verification-label">Liz's Signature:</span>
              <span class="verification-value" id="lizSignatureStatus">✅ Present (Page 19)</span>
            </div>
            <div class="verification-item">
              <span class="verification-label">Document Status:</span>
              <span class="verification-value" id="documentStatus">🔒 Encrypted & Secure</span>
            </div>
          </div>
        </div>
        
        <div class="preview-instructions">
          <h4>📋 Next Steps</h4>
          <ul>
            <li>Review the entire document carefully</li>
            <li>Verify both signatures are visible on pages 19 and 20</li>
            <li>Click "Finalize & Complete" when you're satisfied</li>
            <li>The document will be saved and emailed to you</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
  
  <script>
  // LOCATION BLOCK 3 JAVASCRIPT: PREVIEW SIGNED DOCUMENT
  
  function loadPDFPreview() {
    const lawyerPin = window.parent.lawyerPin || window.lawyerPin || '<%= pin %>';
    const pdfFrame = document.getElementById('pdfPreview');
    const loadingMessage = document.getElementById('pdfLoadingMessage');
    
    // Show loading
    loadingMessage.style.display = 'block';
    pdfFrame.style.display = 'none';
    
    // Load the flattened PDF
        fetch(`/api/lawyer/signed-tob?pin=${lawyerPin}`)
      .then(response => response.blob())
      .then(blob => {
        const url = URL.createObjectURL(blob);
        pdfFrame.src = url;
        
        // Hide loading, show PDF
        loadingMessage.style.display = 'none';
        pdfFrame.style.display = 'block';
        
        console.log('✅ PDF preview loaded successfully');
        updateSignatureVerification();
      })
      .catch(error => {
        console.error('❌ Error loading PDF preview:', error);
        loadingMessage.innerHTML = `
          <div style="color: #e74c3c;">
            <p>Error loading PDF preview</p>
            <button onclick="loadPDFPreview()" class="btn-secondary">
              Retry
            </button>
          </div>
        `;
      });
  }
  
  function updateSignatureVerification() {
    const lawyerStatus = document.getElementById('lawyerSignatureStatus');
    const lizStatus = document.getElementById('lizSignatureStatus');
    const docStatus = document.getElementById('documentStatus');
    
    if (lawyerStatus) lawyerStatus.textContent = '✅ Present (Pages 19-20)';
    if (lizStatus) lizStatus.textContent = '✅ Present (Page 19)';
    if (docStatus) docStatus.textContent = '🔒 Encrypted & Secure';
  }
  
  function goBackToSignature() {
    if (confirm('Are you sure you want to return to the signature step? You will need to sign the document again.')) {
      // Reset signature state
      isSignatureSaved = false;
      signatureData = null;
      
      // Clear the signature canvas if it exists
      if (signatureCanvas && signatureContext) {
        signatureContext.clearRect(0, 0, signatureCanvas.width, signatureCanvas.height);
      }
      
      // Go back to Step 2
      currentStep = 2;
      showStep(2);
      
      console.log('↩️ User returned to signature step from preview');
    }
  }
  
  function flattenPDFBeforeCompletion() {
    const lawyerPin = window.parent.lawyerPin || window.lawyerPin || '<%= pin %>';
    
        return fetch('/api/lawyer/flatten-tob-pdf', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ pin: lawyerPin })
    })
    .then(response => response.json())
    .then(data => {
      console.log('✅ PDF flattened successfully');
      return data;
    })
    .catch(error => {
      console.error('❌ Error flattening PDF:', error);
      throw error;
    });
  }
  </script>
  
  <!-- 
==================================================================================== -->
<!-- LOCATION BLOCK 4: COMPLETION -->
<!-- ✅ CORRECTED: Removed all backend functions (moved to Dashboard) -->
<!-- ✅ CORRECTED: Simplified returnToDashboard() to only send message & close modal -->
<!-- 
==================================================================================== -->
<div id="step4" class="step-content" style="display: none;">
  <div class="step-container">
    <div class="step-header">
      <h2 class="step-title">🎉 Completion</h2>
      <p class="step-description">Your Terms of Business has been signed successfully!</p>
    </div>
    
    <div class="completion-section">
      <div class="success-message">
        <div class="success-icon">✅</div>
        <h3>Terms of Business Signed Successfully!</h3>
        <p>Your document has been processed and saved securely.</p>
      </div>
      
      <div class="action-buttons-grid">
        <div class="action-card">
          <div class="action-card-icon">📥</div>
          <h4>Download PDF</h4>
          <p>Save a copy to your device</p>
          <button class="btn-primary" onclick="downloadSignedPDF()">
            Download
          </button>
        </div>
        
        <div class="action-card">
          <div class="action-card-icon">👁</div>
          <h4>View Document</h4>
          <p>Open in a new window</p>
          <button class="btn-secondary" onclick="viewSignedPDF()">
            View
          </button>
        </div>
      </div>
      
      <div class="completion-return">
        <button class="btn-primary btn-large" onclick="returnToDashboard()">
          🏠 Return to Dashboard
        </button>
        <p class="return-note">Click to return to your Lawyers Dashboard. You'll be able to view a complete summary of this workflow from your dashboard.</p>
      </div>
    </div>
  </div>
</div>

<script>
// ==================================================================================
// LOCATION BLOCK 4 JAVASCRIPT: COMPLETION
// ✅ ONLY 3 functions: downloadSignedPDF, viewSignedPDF, returnToDashboard
// ✅ NO backend API calls - those are handled by Dashboard
// ==================================================================================

function downloadSignedPDF() {
  const lawyerPin = window.parent.lawyerPin || window.lawyerPin || '<%= pin %>';
  window.open(`/documents/tob/download?pin=${lawyerPin}`, '_blank');
}

function viewSignedPDF() {
  const lawyerPin = window.parent.lawyerPin || window.lawyerPin || '<%= pin %>';
  window.open(`/documents/tob/view?pin=${lawyerPin}`, '_blank');
}

function returnToDashboard() {
  const lawyerPin = window.parent.lawyerPin || window.lawyerPin || '<%= pin %>';
  
  console.log('🏠 Returning to Dashboard - sending completion message');
  
  // Send ONE completion message to parent Dashboard
  window.parent.postMessage({
    type: 'TOB_COMPLETED',
    pin: lawyerPin
  }, '*');
  
  // Close modal after short delay
  setTimeout(() => {
    const modalOverlay = document.querySelector('.modal-overlay');
    if (modalOverlay) {
      modalOverlay.remove();
      console.log('✅ Modal closed successfully');
    }
  }, 500);
}

// ==================================================================================
// ❌ DELETED FUNCTIONS (Now handled by Dashboard):
// - updateDatabase()
// - saveToDocumentLibrary()
// - sendCompletionEmail()
// - updateWorkflowProgress()
// - completeTOBWorkflow()
//
// These are NOW the responsibility of the Lawyers Dashboard!
// ==================================================================================

</script>

  <!-- 
  =========================================================================
  === -->
  <!-- LOCATION BLOCK 5: NAVIGATION BAR & GLOBAL FUNCTIONS -->
  <!-- 
  =========================================================================
  === -->
  <div class="modal-navigation">
    <div class="progress-steps">
      <div class="progress-step active" id="progressStep1">
        <div class="progress-circle">1</div>
        <span class="progress-label">Email Preferences</span>
      </div>
      <div class="progress-line"></div>
      
      <div class="progress-step" id="progressStep2">
        <div class="progress-circle">2</div>
        <span class="progress-label">Digital Signature</span>
      </div>
      <div class="progress-line"></div>
      
      <div class="progress-step" id="progressStep3">
        <div class="progress-circle">3</div>
        <span class="progress-label">Preview Signed</span>
      </div>
      <div class="progress-line"></div>
      
      <div class="progress-step" id="progressStep4">
        <div class="progress-circle">4</div>
        <span class="progress-label">Completion</span>
      </div>
    </div>
    
    <div class="navigation-buttons">
      <button id="prevBtn" class="btn-secondary btn-nav" onclick="previousStep()" style="display: none;">
        ← Previous
      </button>
      <button id="nextBtn" class="btn-primary btn-nav" onclick="nextStep()">
        Next →
      </button>
    </div>
  </div>
  
  <script>
  // LOCATION BLOCK 5 JAVASCRIPT: NAVIGATION & GLOBAL FUNCTIONS
  
  let currentStep = 1;
  const totalSteps = 4;
  
  function showStep(stepNumber) {
    // Hide all steps
    for (let i = 1; i <= totalSteps; i++) {
      const step = document.getElementById(`step${i}`);
      if (step) step.style.display = 'none';
      
      const progress = document.getElementById(`progressStep${i}`);
      if (progress) progress.classList.remove('active');
    }
    
    // Show current step
    const currentStepElement = document.getElementById(`step${stepNumber}`);
    if (currentStepElement) {
      currentStepElement.style.display = 'block';
    }
    
    // Update progress indicator
    const currentProgress = document.getElementById(`progressStep${stepNumber}`);
    if (currentProgress) {
      currentProgress.classList.add('active');
    }
    
    // Update navigation buttons
    updateNavigationButtons();
    
    // Step-specific actions
    if (stepNumber === 3) {
      loadPDFPreview();
    }
  }
  
  function nextStep() {
    // Validation
    if (currentStep === 1 && !validateEmailPreferences()) {
      alert('Please select your email preference before continuing.');
      return;
    }
    
    if (currentStep === 2 && !validateSignature()) {
      alert('Please complete your signature before continuing.');
      return;
    }
    
    // Flatten PDF before moving from Step 3 to Step 4
    if (currentStep === 3) {
      flattenPDFBeforeCompletion().then(() => {
        currentStep++;
        showStep(currentStep);
      }).catch(error => {
        console.error('❌ Error flattening PDF:', error);
        alert('Error preparing final document. Please try again.');
      });
      return;
    }
    
    if (currentStep < totalSteps) {
      currentStep++;
      showStep(currentStep);
    } else {
      returnToDashboard();
    }
  }
  
  function previousStep() {
    if (currentStep > 1) {
      currentStep--;
      showStep(currentStep);
    }
  }
  
  function updateNavigationButtons() {
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    // Previous button visibility
    if (prevBtn) {
      prevBtn.style.display = currentStep === 1 ? 'none' : 'block';
    }
    
    // Next button text based on step
    if (nextBtn) {
      switch(currentStep) {
        case 1:
          nextBtn.innerHTML = '✍️ Proceed to Signature';
          break;
        case 2:
          nextBtn.innerHTML = '👁️ Preview Document';
          break;
        case 3:
          nextBtn.innerHTML = '✅ Finalize & Complete';
          break;
        case 4:
          nextBtn.innerHTML = '🏠 Return to Dashboard';
          break;
      }
    }
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    initializeSignatureCanvas();
    loadSavedEmailPreference();
    showStep(1);
  });
  </script>