<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Starter Login - QOLAE</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .login-container {
            max-width: 480px;
            width: 100%;
        }

        .login-card {
            background: rgba(255, 255, 255, 0.98);
            border-radius: 16px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            padding: 40px 32px;
            backdrop-filter: blur(10px);
        }

        .header {
            text-align: center;
            margin-bottom: 32px;
        }

        .header h1 {
            font-size: 28px;
            font-weight: bold;
            color: #693382;
            font-family: Baskerville, "Baskerville Old Face", serif;
            margin-bottom: 8px;
        }

        .header p {
            color: #6b7280;
            font-size: 14px;
        }

        .step-indicator {
            display: flex;
            justify-content: center;
            gap: 12px;
            margin-bottom: 32px;
        }

        .step-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #e5e7eb;
            transition: all 0.3s ease;
        }

        .step-dot.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transform: scale(1.3);
        }

        .step-dot.completed {
            background: #10b981;
        }

        .auth-step {
            display: none;
        }

        .auth-step.active {
            display: block;
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .step-title {
            font-size: 20px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
        }

        .step-subtitle {
            color: #6b7280;
            font-size: 14px;
            margin-bottom: 24px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            color: #374151;
            font-size: 14px;
        }

        .form-input {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid #d1d5db;
            border-radius: 8px;
            font-size: 15px;
            transition: all 0.2s;
            font-family: inherit;
        }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-input.error {
            border-color: #ef4444;
        }

        .form-input-large {
            font-size: 24px;
            text-align: center;
            letter-spacing: 4px;
            font-weight: 600;
        }

        .help-text {
            font-size: 12px;
            color: #6b7280;
            margin-top: 6px;
        }

        .password-requirements {
            background: #f9fafb;
            border-radius: 8px;
            padding: 16px;
            margin-top: 12px;
        }

        .password-requirements h4 {
            font-size: 13px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
        }

        .requirement {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 12px;
            color: #6b7280;
            margin-bottom: 4px;
        }

        .requirement.met {
            color: #10b981;
        }

        .btn {
            width: 100%;
            padding: 14px 24px;
            border-radius: 8px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            font-size: 15px;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:disabled {
            background: #9ca3af;
            cursor: not-allowed;
            transform: none;
        }

        .btn-secondary {
            background: white;
            color: #667eea;
            border: 2px solid #667eea;
            margin-top: 12px;
        }

        .btn-secondary:hover {
            background: #f3f4f6;
        }

        .message {
            display: none;
            padding: 14px 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
            animation: slideDown 0.3s ease-out;
        }

        .message.visible {
            display: block;
        }

        .success-message {
            background: #d1fae5;
            border: 1px solid #10b981;
            color: #065f46;
        }

        .error-message {
            background: #fee2e2;
            border: 1px solid #ef4444;
            color: #991b1b;
        }

        .info-message {
            background: #dbeafe;
            border: 1px solid #3b82f6;
            color: #1e40af;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .footer {
            text-align: center;
            color: white;
            font-size: 12px;
            margin-top: 24px;
        }

        .footer a {
            color: white;
            text-decoration: underline;
        }

        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 0.6s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .verified-info {
            background: #f0fdf4;
            border: 1px solid #10b981;
            border-radius: 8px;
            padding: 16px;
            margin-top: 16px;
        }

        .verified-info p {
            margin: 0;
            color: #065f46;
            font-size: 14px;
        }

        .verified-info strong {
            color: #047857;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-card">
            <div class="header">
                <h1>üîê New Starter Portal</h1>
                <p>Secure 2FA Authentication</p>
            </div>

            <div class="step-indicator">
                <div class="step-dot active" id="stepDot1"></div>
                <div class="step-dot" id="stepDot2"></div>
                <div class="step-dot" id="stepDot3"></div>
            </div>

            <div id="successMessage" class="message success-message"></div>
            <div id="errorMessage" class="message error-message"></div>
            <div id="infoMessage" class="message info-message"></div>

            <!-- STEP 1: VERIFY PIN -->
            <div id="step1" class="auth-step active">
                <h2 class="step-title">Step 1: Verify Your PIN</h2>
                <p class="step-subtitle">Your PIN from the invitation email</p>

                <div class="form-group">
                    <label class="form-label">New Starter PIN</label>
                    <input
                        type="text"
                        id="pinInput"
                        class="form-input form-input-large"
                        placeholder="NS-XX######"
                        maxlength="12"
                        autocomplete="off"
                        style="text-transform: uppercase;">
                    <p class="help-text">Format: NS-XX123456</p>
                </div>

                <button type="button" class="btn btn-primary" id="verifyPinBtn">
                    Continue ‚Üí
                </button>
            </div>

            <!-- STEP 2: VERIFY OTP -->
            <div id="step2" class="auth-step">
                <h2 class="step-title">Step 2: Verify OTP</h2>
                <p class="step-subtitle">Enter the 6-digit code sent to <strong id="userEmail"></strong></p>

                <div class="verified-info" id="verifiedInfo" style="display: none;">
                    <p>‚úì Welcome, <strong id="userName"></strong>!</p>
                </div>

                <div class="form-group">
                    <label class="form-label">One-Time Password</label>
                    <input
                        type="text"
                        id="otpInput"
                        class="form-input form-input-large"
                        placeholder="000000"
                        maxlength="6"
                        autocomplete="off"
                        inputmode="numeric"
                        pattern="[0-9]{6}">
                    <p class="help-text">Code expires in 15 minutes</p>
                </div>

                <button type="button" class="btn btn-primary" id="verifyOtpBtn">
                    Verify Code ‚Üí
                </button>

                <button type="button" class="btn btn-secondary" id="resendOtpBtn">
                    Resend Code
                </button>
            </div>

            <!-- STEP 3: CREATE PASSWORD -->
            <div id="step3" class="auth-step">
                <h2 class="step-title">Step 3: Create Password</h2>
                <p class="step-subtitle">Create a secure password for your account</p>

                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input
                        type="password"
                        id="passwordInput"
                        class="form-input"
                        placeholder="Enter password"
                        autocomplete="new-password">
                </div>

                <div class="form-group">
                    <label class="form-label">Confirm Password</label>
                    <input
                        type="password"
                        id="confirmPasswordInput"
                        class="form-input"
                        placeholder="Confirm password"
                        autocomplete="new-password">
                </div>

                <div class="password-requirements">
                    <h4>Password Requirements:</h4>
                    <div class="requirement" id="req-length">
                        <span>‚óã</span> At least 8 characters
                    </div>
                    <div class="requirement" id="req-uppercase">
                        <span>‚óã</span> At least one uppercase letter
                    </div>
                    <div class="requirement" id="req-lowercase">
                        <span>‚óã</span> At least one lowercase letter
                    </div>
                    <div class="requirement" id="req-number">
                        <span>‚óã</span> At least one number
                    </div>
                    <div class="requirement" id="req-symbol">
                        <span>‚óã</span> At least one symbol (!@#$%^&*...)
                    </div>
                </div>

                <button type="button" class="btn btn-primary" id="submitPasswordBtn" style="margin-top: 20px;">
                    Complete Authentication ‚Üí
                </button>
            </div>
        </div>

        <div class="footer">
            <p>QOLAE HR Compliance Dashboard</p>
            <p>Having trouble? Contact <a href="mailto:hr@qolae.com">hr@qolae.com</a></p>
        </div>
    </div>

    <script>
        let currentStep = 1;
        let authState = {
            newStarterId: null,
            pin: '',
            email: '',
            fullName: ''
        };

        // Get PIN from URL
        const urlParams = new URLSearchParams(window.location.search);
        const pinFromUrl = urlParams.get('pin');

        if (pinFromUrl) {
            document.getElementById('pinInput').value = pinFromUrl.toUpperCase();
        }

        // STEP NAVIGATION
        function showStep(step) {
            document.querySelectorAll('.auth-step').forEach(s => s.classList.remove('active'));
            document.getElementById(`step${step}`).classList.add('active');

            document.querySelectorAll('.step-dot').forEach((dot, index) => {
                dot.classList.remove('active', 'completed');
                if (index + 1 < step) {
                    dot.classList.add('completed');
                } else if (index + 1 === step) {
                    dot.classList.add('active');
                }
            });

            currentStep = step;
        }

        // MESSAGE HELPERS
        function showMessage(type, text) {
            hideAllMessages();
            const messageEl = document.getElementById(`${type}Message`);
            messageEl.textContent = text;
            messageEl.classList.add('visible');

            if (type === 'success' || type === 'info') {
                setTimeout(() => messageEl.classList.remove('visible'), 5000);
            }
        }

        function hideAllMessages() {
            document.querySelectorAll('.message').forEach(m => m.classList.remove('visible'));
        }

        // STEP 1: VERIFY PIN
        document.getElementById('verifyPinBtn').addEventListener('click', async () => {
            const pin = document.getElementById('pinInput').value.trim().toUpperCase();

            const pinRegex = /^NS-[A-Z]{2}\d{6}$/;
            if (!pinRegex.test(pin)) {
                showMessage('error', 'Invalid PIN format. Expected: NS-XX123456');
                document.getElementById('pinInput').classList.add('error');
                return;
            }

            document.getElementById('pinInput').classList.remove('error');

            const btn = document.getElementById('verifyPinBtn');
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner"></span> Verifying...';

            try {
                const response = await fetch('/api/new-starter/verify-pin', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ pin })
                });

                const data = await response.json();

                if (data.success) {
                    authState.newStarterId = data.data.newStarterId;
                    authState.pin = pin;
                    authState.email = data.data.email;
                    authState.fullName = data.data.fullName;

                    document.getElementById('userEmail').textContent = authState.email;
                    document.getElementById('userName').textContent = authState.fullName;

                    showMessage('success', `Welcome, ${authState.fullName}!`);

                    // Auto-send OTP
                    await sendOTP();

                    setTimeout(() => {
                        document.getElementById('verifiedInfo').style.display = 'block';
                        showStep(2);
                    }, 1000);
                } else {
                    showMessage('error', data.error || 'PIN verification failed');
                }
            } catch (error) {
                console.error('PIN verification error:', error);
                showMessage('error', 'Connection error. Please try again.');
            } finally {
                btn.disabled = false;
                btn.innerHTML = 'Continue ‚Üí';
            }
        });

        // STEP 2: SEND & VERIFY OTP
        async function sendOTP() {
            try {
                const response = await fetch('/api/new-starter/send-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ newStarterId: authState.newStarterId })
                });

                const data = await response.json();

                if (data.success) {
                    showMessage('info', `Verification code sent to ${authState.email}`);
                    return true;
                } else {
                    throw new Error(data.error || 'Failed to send OTP');
                }
            } catch (error) {
                console.error('OTP send error:', error);
                showMessage('error', error.message);
                return false;
            }
        }

        document.getElementById('verifyOtpBtn').addEventListener('click', async () => {
            const otp = document.getElementById('otpInput').value.trim();

            if (otp.length !== 6 || !/^\d{6}$/.test(otp)) {
                showMessage('error', 'Please enter a valid 6-digit code');
                document.getElementById('otpInput').classList.add('error');
                return;
            }

            document.getElementById('otpInput').classList.remove('error');

            const btn = document.getElementById('verifyOtpBtn');
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner"></span> Verifying...';

            try {
                const response = await fetch('/api/new-starter/verify-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        newStarterId: authState.newStarterId,
                        otp: otp
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showMessage('success', 'Code verified successfully!');
                    setTimeout(() => showStep(3), 1000);
                } else {
                    showMessage('error', data.error || 'Invalid verification code');
                }
            } catch (error) {
                console.error('OTP verification error:', error);
                showMessage('error', 'Connection error. Please try again.');
            } finally {
                btn.disabled = false;
                btn.innerHTML = 'Verify Code ‚Üí';
            }
        });

        document.getElementById('resendOtpBtn').addEventListener('click', async () => {
            const btn = document.getElementById('resendOtpBtn');
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner"></span> Sending...';

            await sendOTP();

            btn.disabled = false;
            btn.innerHTML = 'Resend Code';
        });

        // STEP 3: PASSWORD VALIDATION
        function checkPasswordRequirements(password) {
            const requirements = {
                length: password.length >= 8,
                uppercase: /[A-Z]/.test(password),
                lowercase: /[a-z]/.test(password),
                number: /\d/.test(password),
                symbol: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
            };

            Object.keys(requirements).forEach(key => {
                const reqEl = document.getElementById(`req-${key}`);
                if (requirements[key]) {
                    reqEl.classList.add('met');
                    reqEl.querySelector('span').textContent = '‚úì';
                } else {
                    reqEl.classList.remove('met');
                    reqEl.querySelector('span').textContent = '‚óã';
                }
            });

            return Object.values(requirements).every(v => v);
        }

        document.getElementById('passwordInput').addEventListener('input', (e) => {
            checkPasswordRequirements(e.target.value);
        });

        document.getElementById('submitPasswordBtn').addEventListener('click', async () => {
            const password = document.getElementById('passwordInput').value;
            const confirmPassword = document.getElementById('confirmPasswordInput').value;

            if (!checkPasswordRequirements(password)) {
                showMessage('error', 'Password does not meet all requirements');
                return;
            }

            if (password !== confirmPassword) {
                showMessage('error', 'Passwords do not match');
                document.getElementById('confirmPasswordInput').classList.add('error');
                return;
            }

            document.getElementById('confirmPasswordInput').classList.remove('error');

            const btn = document.getElementById('submitPasswordBtn');
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner"></span> Completing...';

            try {
                const response = await fetch('/api/new-starter/create-password', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        newStarterId: authState.newStarterId,
                        password: password
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showMessage('success', 'Authentication complete! Redirecting to compliance portal...');

                    setTimeout(() => {
                        window.location.href = `/new-starter-compliance?pin=${authState.pin}`;
                    }, 1500);
                } else {
                    showMessage('error', data.error || 'Failed to create password');
                }
            } catch (error) {
                console.error('Password submission error:', error);
                showMessage('error', 'Connection error. Please try again.');
            } finally {
                btn.disabled = false;
                btn.innerHTML = 'Complete Authentication ‚Üí';
            }
        });

        // INITIALIZATION
        window.addEventListener('DOMContentLoaded', () => {
            console.log('üîê New Starter Login Portal initialized');
            if (pinFromUrl) {
                console.log('PIN auto-populated from URL:', pinFromUrl);
            }
            document.getElementById('pinInput').focus();
        });
    </script>
</body>
</html>
